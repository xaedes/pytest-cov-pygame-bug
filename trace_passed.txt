 --- modulename: test_draw, funcname: <module>
test_draw.py(4): from draw import draw
 --- modulename: draw, funcname: <module>
draw.py(4): import pygame
 --- modulename: __init__, funcname: <module>
__init__.py(25): """
__init__.py(27): import sys, os, string
__init__.py(31): if not 'SDL_VIDEODRIVER' in os.environ:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(104):         return key in self.data
__init__.py(37):     if hasattr(sys, "getwindowsversion"):
__init__.py(47): if 'DISPLAY' in os.environ and not 'SDL_VIDEO_X11_WMCLASS' in os.environ:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(104):         return key in self.data
 --- modulename: UserDict, funcname: __contains__
UserDict.py(104):         return key in self.data
__init__.py(48):     os.environ['SDL_VIDEO_X11_WMCLASS'] = os.path.basename(sys.argv[0])
 --- modulename: posixpath, funcname: basename
posixpath.py(114):     i = p.rfind('/') + 1
posixpath.py(115):     return p[i:]
 --- modulename: os, funcname: __setitem__
os.py(473):                 putenv(key, item)
os.py(474):                 self.data[key] = item
__init__.py(50): class MissingModule:
 --- modulename: __init__, funcname: MissingModule
__init__.py(50): class MissingModule:
__init__.py(51):     _NOT_IMPLEMENTED_ = True
__init__.py(52):     def __init__(self, name, info='', urgent=0):
__init__.py(67):     def __getattr__(self, var):
__init__.py(76):     def __nonzero__(self):
__init__.py(79):     def warn(self):
__init__.py(99): from pygame.base import *
 --- modulename: atexit, funcname: <module>
atexit.py(6): """
atexit.py(8): __all__ = ["register"]
atexit.py(10): import sys
atexit.py(12): _exithandlers = []
atexit.py(13): def _run_exitfuncs():
atexit.py(37): def register(func, *targs, **kargs):
atexit.py(49): if hasattr(sys, "exitfunc"):
atexit.py(52): sys.exitfunc = _run_exitfuncs
atexit.py(54): if __name__ == "__main__":
 --- modulename: atexit, funcname: register
atexit.py(46):     _exithandlers.append((func, targs, kargs))
atexit.py(47):     return func
__init__.py(100): from pygame.constants import *
__init__.py(101): from pygame.version import *
 --- modulename: version, funcname: <module>
version.py(28): """
version.py(30): ver =   '1.9.1release'
version.py(31): vernum = 1,9,1
__init__.py(102): from pygame.rect import Rect
__init__.py(103): from pygame.compat import geterror
 --- modulename: compat, funcname: <module>
compat.py(1): """Python 2.x/3.x compatibility tools"""
compat.py(3): import sys
compat.py(5): __all__ = ['geterror', 'long_', 'xrange_', 'ord_', 'unichr_',
compat.py(6):            'unicode_', 'raw_input_']
compat.py(8): def geterror ():
compat.py(11): try:
compat.py(12):     long_ = long
compat.py(16): try:
compat.py(17):     xrange_ = xrange
compat.py(21): def get_BytesIO():
compat.py(28): def ord_(o):
compat.py(34): try:
compat.py(35):     unichr_ = unichr
compat.py(39): try:
compat.py(40):     unicode_ = unicode
compat.py(44): try:
compat.py(45):     raw_input_ = raw_input
__init__.py(104): import pygame.rwobject
__init__.py(105): import pygame.surflock
__init__.py(106): import pygame.color
 --- modulename: colordict, funcname: <module>
colordict.py(21): THECOLORS = {
colordict.py(22): 'gray17' : (43, 43, 43, 255) ,
colordict.py(23): 'gold' : (255, 215, 0, 255) ,
colordict.py(24): 'gray10' : (26, 26, 26, 255) ,
colordict.py(25): 'yellow' : (255, 255, 0, 255) ,
colordict.py(26): 'gray11' : (28, 28, 28, 255) ,
colordict.py(27): 'grey61' : (156, 156, 156, 255) ,
colordict.py(28): 'grey60' : (153, 153, 153, 255) ,
colordict.py(29): 'darkseagreen' : (143, 188, 143, 255) ,
colordict.py(30): 'grey62' : (158, 158, 158, 255) ,
colordict.py(31): 'grey65' : (166, 166, 166, 255) ,
colordict.py(32): 'gray12' : (31, 31, 31, 255) ,
colordict.py(33): 'grey67' : (171, 171, 171, 255) ,
colordict.py(34): 'grey66' : (168, 168, 168, 255) ,
colordict.py(35): 'grey69' : (176, 176, 176, 255) ,
colordict.py(36): 'gray21' : (54, 54, 54, 255) ,
colordict.py(37): 'lightsalmon4' : (139, 87, 66, 255) ,
colordict.py(38): 'lightsalmon2' : (238, 149, 114, 255) ,
colordict.py(39): 'lightsalmon3' : (205, 129, 98, 255) ,
colordict.py(40): 'lightsalmon1' : (255, 160, 122, 255) ,
colordict.py(41): 'gray32' : (82, 82, 82, 255) ,
colordict.py(42): 'green4' : (0, 139, 0, 255) ,
colordict.py(43): 'gray30' : (77, 77, 77, 255) ,
colordict.py(44): 'gray31' : (79, 79, 79, 255) ,
colordict.py(45): 'green1' : (0, 255, 0, 255) ,
colordict.py(46): 'gray37' : (94, 94, 94, 255) ,
colordict.py(47): 'green3' : (0, 205, 0, 255) ,
colordict.py(48): 'green2' : (0, 238, 0, 255) ,
colordict.py(49): 'darkslategray1' : (151, 255, 255, 255) ,
colordict.py(50): 'darkslategray2' : (141, 238, 238, 255) ,
colordict.py(51): 'darkslategray3' : (121, 205, 205, 255) ,
colordict.py(52): 'aquamarine1' : (127, 255, 212, 255) ,
colordict.py(53): 'aquamarine3' : (102, 205, 170, 255) ,
colordict.py(54): 'aquamarine2' : (118, 238, 198, 255) ,
colordict.py(55): 'papayawhip' : (255, 239, 213, 255) ,
colordict.py(56): 'black' : (0, 0, 0, 255) ,
colordict.py(57): 'darkorange3' : (205, 102, 0, 255) ,
colordict.py(58): 'oldlace' : (253, 245, 230, 255) ,
colordict.py(59): 'lightgoldenrod4' : (139, 129, 76, 255) ,
colordict.py(60): 'gray90' : (229, 229, 229, 255) ,
colordict.py(61): 'orchid1' : (255, 131, 250, 255) ,
colordict.py(62): 'orchid2' : (238, 122, 233, 255) ,
colordict.py(63): 'orchid3' : (205, 105, 201, 255) ,
colordict.py(64): 'grey68' : (173, 173, 173, 255) ,
colordict.py(65): 'brown' : (165, 42, 42, 255) ,
colordict.py(66): 'purple2' : (145, 44, 238, 255) ,
colordict.py(67): 'gray80' : (204, 204, 204, 255) ,
colordict.py(68): 'antiquewhite3' : (205, 192, 176, 255) ,
colordict.py(69): 'antiquewhite2' : (238, 223, 204, 255) ,
colordict.py(70): 'antiquewhite1' : (255, 239, 219, 255) ,
colordict.py(71): 'palevioletred3' : (205, 104, 137, 255) ,
colordict.py(72): 'hotpink' : (255, 105, 180, 255) ,
colordict.py(73): 'lightcyan' : (224, 255, 255, 255) ,
colordict.py(74): 'coral3' : (205, 91, 69, 255) ,
colordict.py(75): 'gray8' : (20, 20, 20, 255) ,
colordict.py(76): 'gray9' : (23, 23, 23, 255) ,
colordict.py(77): 'grey32' : (82, 82, 82, 255) ,
colordict.py(78): 'bisque4' : (139, 125, 107, 255) ,
colordict.py(79): 'cyan' : (0, 255, 255, 255) ,
colordict.py(80): 'gray0' : (0, 0, 0, 255) ,
colordict.py(81): 'gray1' : (3, 3, 3, 255) ,
colordict.py(82): 'gray6' : (15, 15, 15, 255) ,
colordict.py(83): 'bisque1' : (255, 228, 196, 255) ,
colordict.py(84): 'bisque2' : (238, 213, 183, 255) ,
colordict.py(85): 'bisque3' : (205, 183, 158, 255) ,
colordict.py(86): 'skyblue' : (135, 206, 235, 255) ,
colordict.py(87): 'gray' : (190, 190, 190, 255) ,
colordict.py(88): 'darkturquoise' : (0, 206, 209, 255) ,
colordict.py(89): 'rosybrown4' : (139, 105, 105, 255) ,
colordict.py(90): 'deepskyblue3' : (0, 154, 205, 255) ,
colordict.py(91): 'grey63' : (161, 161, 161, 255) ,
colordict.py(92): 'indianred1' : (255, 106, 106, 255) ,
colordict.py(93): 'grey78' : (199, 199, 199, 255) ,
colordict.py(94): 'lightpink' : (255, 182, 193, 255) ,
colordict.py(95): 'gray88' : (224, 224, 224, 255) ,
colordict.py(96): 'gray22' : (56, 56, 56, 255) ,
colordict.py(97): 'red' : (255, 0, 0, 255) ,
colordict.py(98): 'grey11' : (28, 28, 28, 255) ,
colordict.py(99): 'lemonchiffon3' : (205, 201, 165, 255) ,
colordict.py(100): 'lemonchiffon2' : (238, 233, 191, 255) ,
colordict.py(101): 'lemonchiffon1' : (255, 250, 205, 255) ,
colordict.py(102): 'indianred3' : (205, 85, 85, 255) ,
colordict.py(103): 'violetred1' : (255, 62, 150, 255) ,
colordict.py(104): 'plum2' : (238, 174, 238, 255) ,
colordict.py(105): 'plum1' : (255, 187, 255, 255) ,
colordict.py(106): 'lemonchiffon4' : (139, 137, 112, 255) ,
colordict.py(107): 'gray99' : (252, 252, 252, 255) ,
colordict.py(108): 'grey13' : (33, 33, 33, 255) ,
colordict.py(109): 'grey55' : (140, 140, 140, 255) ,
colordict.py(110): 'darkcyan' : (0, 139, 139, 255) ,
colordict.py(111): 'chocolate4' : (139, 69, 19, 255) ,
colordict.py(112): 'lightgoldenrodyellow' : (250, 250, 210, 255) ,
colordict.py(113): 'gray54' : (138, 138, 138, 255) ,
colordict.py(114): 'lavender' : (230, 230, 250, 255) ,
colordict.py(115): 'chartreuse3' : (102, 205, 0, 255) ,
colordict.py(116): 'chartreuse2' : (118, 238, 0, 255) ,
colordict.py(117): 'chartreuse1' : (127, 255, 0, 255) ,
colordict.py(118): 'grey48' : (122, 122, 122, 255) ,
colordict.py(119): 'grey16' : (41, 41, 41, 255) ,
colordict.py(120): 'thistle' : (216, 191, 216, 255) ,
colordict.py(121): 'chartreuse4' : (69, 139, 0, 255) ,
colordict.py(122): 'darkorchid4' : (104, 34, 139, 255) ,
colordict.py(123): 'grey42' : (107, 107, 107, 255) ,
colordict.py(124): 'grey41' : (105, 105, 105, 255) ,
colordict.py(125): 'grey17' : (43, 43, 43, 255) ,
colordict.py(126): 'dimgrey' : (105, 105, 105, 255) ,
colordict.py(127): 'dodgerblue4' : (16, 78, 139, 255) ,
colordict.py(128): 'darkorchid2' : (178, 58, 238, 255) ,
colordict.py(129): 'darkorchid3' : (154, 50, 205, 255) ,
colordict.py(130): 'blue' : (0, 0, 255, 255) ,
colordict.py(131): 'rosybrown2' : (238, 180, 180, 255) ,
colordict.py(132): 'honeydew' : (240, 255, 240, 255) ,
colordict.py(133): 'gray18' : (46, 46, 46, 255) ,
colordict.py(134): 'cornflowerblue' : (100, 149, 237, 255) ,
colordict.py(135): 'grey91' : (232, 232, 232, 255) ,
colordict.py(136): 'gray14' : (36, 36, 36, 255) ,
colordict.py(137): 'gray15' : (38, 38, 38, 255) ,
colordict.py(138): 'gray16' : (41, 41, 41, 255) ,
colordict.py(139): 'maroon4' : (139, 28, 98, 255) ,
colordict.py(140): 'maroon3' : (205, 41, 144, 255) ,
colordict.py(141): 'maroon2' : (238, 48, 167, 255) ,
colordict.py(142): 'maroon1' : (255, 52, 179, 255) ,
colordict.py(143): 'gray13' : (33, 33, 33, 255) ,
colordict.py(144): 'gold3' : (205, 173, 0, 255) ,
colordict.py(145): 'gold2' : (238, 201, 0, 255) ,
colordict.py(146): 'gold1' : (255, 215, 0, 255) ,
colordict.py(147): 'grey79' : (201, 201, 201, 255) ,
colordict.py(148): 'palevioletred1' : (255, 130, 171, 255) ,
colordict.py(149): 'palevioletred2' : (238, 121, 159, 255) ,
colordict.py(150): 'gold4' : (139, 117, 0, 255) ,
colordict.py(151): 'gray41' : (105, 105, 105, 255) ,
colordict.py(152): 'gray84' : (214, 214, 214, 255) ,
colordict.py(153): 'mediumpurple' : (147, 112, 219, 255) ,
colordict.py(154): 'rosybrown1' : (255, 193, 193, 255) ,
colordict.py(155): 'lightblue2' : (178, 223, 238, 255) ,
colordict.py(156): 'lightblue3' : (154, 192, 205, 255) ,
colordict.py(157): 'grey57' : (145, 145, 145, 255) ,
colordict.py(158): 'lightblue1' : (191, 239, 255, 255) ,
colordict.py(159): 'lightblue4' : (104, 131, 139, 255) ,
colordict.py(160): 'gray33' : (84, 84, 84, 255) ,
colordict.py(161): 'skyblue4' : (74, 112, 139, 255) ,
colordict.py(162): 'grey97' : (247, 247, 247, 255) ,
colordict.py(163): 'skyblue1' : (135, 206, 255, 255) ,
colordict.py(164): 'gray27' : (69, 69, 69, 255) ,
colordict.py(165): 'skyblue3' : (108, 166, 205, 255) ,
colordict.py(166): 'skyblue2' : (126, 192, 238, 255) ,
colordict.py(167): 'lavenderblush1' : (255, 240, 245, 255) ,
colordict.py(168): 'darkgrey' : (169, 169, 169, 255) ,
colordict.py(169): 'lavenderblush3' : (205, 193, 197, 255) ,
colordict.py(170): 'darkslategrey' : (47, 79, 79, 255) ,
colordict.py(171): 'lavenderblush4' : (139, 131, 134, 255) ,
colordict.py(172): 'deeppink4' : (139, 10, 80, 255) ,
colordict.py(173): 'grey99' : (252, 252, 252, 255) ,
colordict.py(174): 'gray36' : (92, 92, 92, 255) ,
colordict.py(175): 'coral4' : (139, 62, 47, 255) ,
colordict.py(176): 'magenta3' : (205, 0, 205, 255) ,
colordict.py(177): 'lightskyblue4' : (96, 123, 139, 255) ,
colordict.py(178): 'mediumturquoise' : (72, 209, 204, 255) ,
colordict.py(179): 'gray34' : (87, 87, 87, 255) ,
colordict.py(180): 'floralwhite' : (255, 250, 240, 255) ,
colordict.py(181): 'grey39' : (99, 99, 99, 255) ,
colordict.py(182): 'grey36' : (92, 92, 92, 255) ,
colordict.py(183): 'grey37' : (94, 94, 94, 255) ,
colordict.py(184): 'grey34' : (87, 87, 87, 255) ,
colordict.py(185): 'gray26' : (66, 66, 66, 255) ,
colordict.py(186): 'royalblue2' : (67, 110, 238, 255) ,
colordict.py(187): 'grey33' : (84, 84, 84, 255) ,
colordict.py(188): 'turquoise1' : (0, 245, 255, 255) ,
colordict.py(189): 'grey31' : (79, 79, 79, 255) ,
colordict.py(190): 'steelblue1' : (99, 184, 255, 255) ,
colordict.py(191): 'sienna4' : (139, 71, 38, 255) ,
colordict.py(192): 'steelblue3' : (79, 148, 205, 255) ,
colordict.py(193): 'lavenderblush2' : (238, 224, 229, 255) ,
colordict.py(194): 'sienna1' : (255, 130, 71, 255) ,
colordict.py(195): 'steelblue4' : (54, 100, 139, 255) ,
colordict.py(196): 'sienna3' : (205, 104, 57, 255) ,
colordict.py(197): 'aquamarine4' : (69, 139, 116, 255) ,
colordict.py(198): 'lightyellow1' : (255, 255, 224, 255) ,
colordict.py(199): 'lightyellow2' : (238, 238, 209, 255) ,
colordict.py(200): 'lightsteelblue' : (176, 196, 222, 255) ,
colordict.py(201): 'lightyellow4' : (139, 139, 122, 255) ,
colordict.py(202): 'magenta2' : (238, 0, 238, 255) ,
colordict.py(203): 'lightskyblue1' : (176, 226, 255, 255) ,
colordict.py(204): 'lightgoldenrod' : (238, 221, 130, 255) ,
colordict.py(205): 'magenta4' : (139, 0, 139, 255) ,
colordict.py(206): 'gray87' : (222, 222, 222, 255) ,
colordict.py(207): 'greenyellow' : (173, 255, 47, 255) ,
colordict.py(208): 'navajowhite4' : (139, 121, 94, 255) ,
colordict.py(209): 'darkslategray4' : (82, 139, 139, 255) ,
colordict.py(210): 'olivedrab' : (107, 142, 35, 255) ,
colordict.py(211): 'navajowhite1' : (255, 222, 173, 255) ,
colordict.py(212): 'navajowhite2' : (238, 207, 161, 255) ,
colordict.py(213): 'darkgoldenrod1' : (255, 185, 15, 255) ,
colordict.py(214): 'sienna' : (160, 82, 45, 255) ,
colordict.py(215): 'blue1' : (0, 0, 255, 255) ,
colordict.py(216): 'yellow1' : (255, 255, 0, 255) ,
colordict.py(217): 'gray61' : (156, 156, 156, 255) ,
colordict.py(218): 'magenta1' : (255, 0, 255, 255) ,
colordict.py(219): 'grey52' : (133, 133, 133, 255) ,
colordict.py(220): 'orangered4' : (139, 37, 0, 255) ,
colordict.py(221): 'palegreen' : (152, 251, 152, 255) ,
colordict.py(222): 'gray86' : (219, 219, 219, 255) ,
colordict.py(223): 'grey80' : (204, 204, 204, 255) ,
colordict.py(224): 'seashell' : (255, 245, 238, 255) ,
colordict.py(225): 'royalblue' : (65, 105, 225, 255) ,
colordict.py(226): 'firebrick3' : (205, 38, 38, 255) ,
colordict.py(227): 'blue4' : (0, 0, 139, 255) ,
colordict.py(228): 'peru' : (205, 133, 63, 255) ,
colordict.py(229): 'gray60' : (153, 153, 153, 255) ,
colordict.py(230): 'aquamarine' : (127, 255, 212, 255) ,
colordict.py(231): 'grey53' : (135, 135, 135, 255) ,
colordict.py(232): 'tan4' : (139, 90, 43, 255) ,
colordict.py(233): 'darkgoldenrod' : (184, 134, 11, 255) ,
colordict.py(234): 'tan2' : (238, 154, 73, 255) ,
colordict.py(235): 'tan1' : (255, 165, 79, 255) ,
colordict.py(236): 'darkslategray' : (47, 79, 79, 255) ,
colordict.py(237): 'royalblue3' : (58, 95, 205, 255) ,
colordict.py(238): 'red2' : (238, 0, 0, 255) ,
colordict.py(239): 'red1' : (255, 0, 0, 255) ,
colordict.py(240): 'dodgerblue' : (30, 144, 255, 255) ,
colordict.py(241): 'violetred4' : (139, 34, 82, 255) ,
colordict.py(242): 'lightyellow' : (255, 255, 224, 255) ,
colordict.py(243): 'paleturquoise1' : (187, 255, 255, 255) ,
colordict.py(244): 'firebrick2' : (238, 44, 44, 255) ,
colordict.py(245): 'mediumaquamarine' : (102, 205, 170, 255) ,
colordict.py(246): 'lemonchiffon' : (255, 250, 205, 255) ,
colordict.py(247): 'chocolate' : (210, 105, 30, 255) ,
colordict.py(248): 'orchid4' : (139, 71, 137, 255) ,
colordict.py(249): 'maroon' : (176, 48, 96, 255) ,
colordict.py(250): 'gray38' : (97, 97, 97, 255) ,
colordict.py(251): 'darkorange4' : (139, 69, 0, 255) ,
colordict.py(252): 'mintcream' : (245, 255, 250, 255) ,
colordict.py(253): 'darkorange1' : (255, 127, 0, 255) ,
colordict.py(254): 'antiquewhite' : (250, 235, 215, 255) ,
colordict.py(255): 'darkorange2' : (238, 118, 0, 255) ,
colordict.py(256): 'grey18' : (46, 46, 46, 255) ,
colordict.py(257): 'grey19' : (48, 48, 48, 255) ,
colordict.py(258): 'grey38' : (97, 97, 97, 255) ,
colordict.py(259): 'moccasin' : (255, 228, 181, 255) ,
colordict.py(260): 'grey10' : (26, 26, 26, 255) ,
colordict.py(261): 'chocolate1' : (255, 127, 36, 255) ,
colordict.py(262): 'chocolate2' : (238, 118, 33, 255) ,
colordict.py(263): 'chocolate3' : (205, 102, 29, 255) ,
colordict.py(264): 'saddlebrown' : (139, 69, 19, 255) ,
colordict.py(265): 'grey15' : (38, 38, 38, 255) ,
colordict.py(266): 'darkslateblue' : (72, 61, 139, 255) ,
colordict.py(267): 'lightskyblue' : (135, 206, 250, 255) ,
colordict.py(268): 'gray69' : (176, 176, 176, 255) ,
colordict.py(269): 'gray68' : (173, 173, 173, 255) ,
colordict.py(270): 'deeppink' : (255, 20, 147, 255) ,
colordict.py(271): 'gray65' : (166, 166, 166, 255) ,
colordict.py(272): 'gray64' : (163, 163, 163, 255) ,
colordict.py(273): 'gray67' : (171, 171, 171, 255) ,
colordict.py(274): 'gray66' : (168, 168, 168, 255) ,
colordict.py(275): 'gray25' : (64, 64, 64, 255) ,
colordict.py(276): 'coral' : (255, 127, 80, 255) ,
colordict.py(277): 'gray63' : (161, 161, 161, 255) ,
colordict.py(278): 'gray62' : (158, 158, 158, 255) ,
colordict.py(279): 'goldenrod4' : (139, 105, 20, 255) ,
colordict.py(280): 'grey35' : (89, 89, 89, 255) ,
colordict.py(281): 'gray89' : (227, 227, 227, 255) ,
colordict.py(282): 'goldenrod1' : (255, 193, 37, 255) ,
colordict.py(283): 'goldenrod2' : (238, 180, 34, 255) ,
colordict.py(284): 'goldenrod3' : (205, 155, 29, 255) ,
colordict.py(285): 'springgreen1' : (0, 255, 127, 255) ,
colordict.py(286): 'springgreen2' : (0, 238, 118, 255) ,
colordict.py(287): 'springgreen3' : (0, 205, 102, 255) ,
colordict.py(288): 'springgreen4' : (0, 139, 69, 255) ,
colordict.py(289): 'mistyrose1' : (255, 228, 225, 255) ,
colordict.py(290): 'sandybrown' : (244, 164, 96, 255) ,
colordict.py(291): 'grey30' : (77, 77, 77, 255) ,
colordict.py(292): 'seashell2' : (238, 229, 222, 255) ,
colordict.py(293): 'seashell3' : (205, 197, 191, 255) ,
colordict.py(294): 'tan' : (210, 180, 140, 255) ,
colordict.py(295): 'seashell1' : (255, 245, 238, 255) ,
colordict.py(296): 'mistyrose3' : (205, 183, 181, 255) ,
colordict.py(297): 'magenta' : (255, 0, 255, 255) ,
colordict.py(298): 'pink' : (255, 192, 203, 255) ,
colordict.py(299): 'ivory2' : (238, 238, 224, 255) ,
colordict.py(300): 'ivory1' : (255, 255, 240, 255) ,
colordict.py(301): 'lightcyan2' : (209, 238, 238, 255) ,
colordict.py(302): 'mediumseagreen' : (60, 179, 113, 255) ,
colordict.py(303): 'ivory4' : (139, 139, 131, 255) ,
colordict.py(304): 'darkorange' : (255, 140, 0, 255) ,
colordict.py(305): 'powderblue' : (176, 224, 230, 255) ,
colordict.py(306): 'dodgerblue1' : (30, 144, 255, 255) ,
colordict.py(307): 'gray95' : (242, 242, 242, 255) ,
colordict.py(308): 'firebrick1' : (255, 48, 48, 255) ,
colordict.py(309): 'gray7' : (18, 18, 18, 255) ,
colordict.py(310): 'mistyrose4' : (139, 125, 123, 255) ,
colordict.py(311): 'tomato' : (255, 99, 71, 255) ,
colordict.py(312): 'indianred2' : (238, 99, 99, 255) ,
colordict.py(313): 'steelblue2' : (92, 172, 238, 255) ,
colordict.py(314): 'gray100' : (255, 255, 255, 255) ,
colordict.py(315): 'seashell4' : (139, 134, 130, 255) ,
colordict.py(316): 'grey89' : (227, 227, 227, 255) ,
colordict.py(317): 'grey88' : (224, 224, 224, 255) ,
colordict.py(318): 'grey87' : (222, 222, 222, 255) ,
colordict.py(319): 'grey86' : (219, 219, 219, 255) ,
colordict.py(320): 'grey85' : (217, 217, 217, 255) ,
colordict.py(321): 'grey84' : (214, 214, 214, 255) ,
colordict.py(322): 'midnightblue' : (25, 25, 112, 255) ,
colordict.py(323): 'grey82' : (209, 209, 209, 255) ,
colordict.py(324): 'grey81' : (207, 207, 207, 255) ,
colordict.py(325): 'yellow3' : (205, 205, 0, 255) ,
colordict.py(326): 'ivory3' : (205, 205, 193, 255) ,
colordict.py(327): 'grey22' : (56, 56, 56, 255) ,
colordict.py(328): 'gray85' : (217, 217, 217, 255) ,
colordict.py(329): 'violetred3' : (205, 50, 120, 255) ,
colordict.py(330): 'dodgerblue2' : (28, 134, 238, 255) ,
colordict.py(331): 'gray42' : (107, 107, 107, 255) ,
colordict.py(332): 'sienna2' : (238, 121, 66, 255) ,
colordict.py(333): 'grey72' : (184, 184, 184, 255) ,
colordict.py(334): 'grey73' : (186, 186, 186, 255) ,
colordict.py(335): 'grey70' : (179, 179, 179, 255) ,
colordict.py(336): 'palevioletred' : (219, 112, 147, 255) ,
colordict.py(337): 'lightslategray' : (119, 136, 153, 255) ,
colordict.py(338): 'grey77' : (196, 196, 196, 255) ,
colordict.py(339): 'grey74' : (189, 189, 189, 255) ,
colordict.py(340): 'slategray1' : (198, 226, 255, 255) ,
colordict.py(341): 'pink1' : (255, 181, 197, 255) ,
colordict.py(342): 'mediumpurple1' : (171, 130, 255, 255) ,
colordict.py(343): 'pink3' : (205, 145, 158, 255) ,
colordict.py(344): 'antiquewhite4' : (139, 131, 120, 255) ,
colordict.py(345): 'lightpink1' : (255, 174, 185, 255) ,
colordict.py(346): 'honeydew2' : (224, 238, 224, 255) ,
colordict.py(347): 'khaki4' : (139, 134, 78, 255) ,
colordict.py(348): 'darkolivegreen4' : (110, 139, 61, 255) ,
colordict.py(349): 'gray45' : (115, 115, 115, 255) ,
colordict.py(350): 'slategray3' : (159, 182, 205, 255) ,
colordict.py(351): 'darkolivegreen1' : (202, 255, 112, 255) ,
colordict.py(352): 'khaki1' : (255, 246, 143, 255) ,
colordict.py(353): 'khaki2' : (238, 230, 133, 255) ,
colordict.py(354): 'khaki3' : (205, 198, 115, 255) ,
colordict.py(355): 'lavenderblush' : (255, 240, 245, 255) ,
colordict.py(356): 'honeydew4' : (131, 139, 131, 255) ,
colordict.py(357): 'salmon3' : (205, 112, 84, 255) ,
colordict.py(358): 'salmon2' : (238, 130, 98, 255) ,
colordict.py(359): 'gray92' : (235, 235, 235, 255) ,
colordict.py(360): 'salmon4' : (139, 76, 57, 255) ,
colordict.py(361): 'gray49' : (125, 125, 125, 255) ,
colordict.py(362): 'gray48' : (122, 122, 122, 255) ,
colordict.py(363): 'linen' : (250, 240, 230, 255) ,
colordict.py(364): 'burlywood1' : (255, 211, 155, 255) ,
colordict.py(365): 'green' : (0, 255, 0, 255) ,
colordict.py(366): 'gray47' : (120, 120, 120, 255) ,
colordict.py(367): 'blueviolet' : (138, 43, 226, 255) ,
colordict.py(368): 'brown2' : (238, 59, 59, 255) ,
colordict.py(369): 'brown3' : (205, 51, 51, 255) ,
colordict.py(370): 'peachpuff' : (255, 218, 185, 255) ,
colordict.py(371): 'brown4' : (139, 35, 35, 255) ,
colordict.py(372): 'firebrick4' : (139, 26, 26, 255) ,
colordict.py(373): 'azure1' : (240, 255, 255, 255) ,
colordict.py(374): 'azure3' : (193, 205, 205, 255) ,
colordict.py(375): 'azure2' : (224, 238, 238, 255) ,
colordict.py(376): 'azure4' : (131, 139, 139, 255) ,
colordict.py(377): 'tomato4' : (139, 54, 38, 255) ,
colordict.py(378): 'orange4' : (139, 90, 0, 255) ,
colordict.py(379): 'firebrick' : (178, 34, 34, 255) ,
colordict.py(380): 'indianred' : (205, 92, 92, 255) ,
colordict.py(381): 'orange1' : (255, 165, 0, 255) ,
colordict.py(382): 'orange3' : (205, 133, 0, 255) ,
colordict.py(383): 'orange2' : (238, 154, 0, 255) ,
colordict.py(384): 'darkolivegreen' : (85, 107, 47, 255) ,
colordict.py(385): 'gray2' : (5, 5, 5, 255) ,
colordict.py(386): 'slategrey' : (112, 128, 144, 255) ,
colordict.py(387): 'gray81' : (207, 207, 207, 255) ,
colordict.py(388): 'darkred' : (139, 0, 0, 255) ,
colordict.py(389): 'gray3' : (8, 8, 8, 255) ,
colordict.py(390): 'lightsteelblue1' : (202, 225, 255, 255) ,
colordict.py(391): 'lightsteelblue2' : (188, 210, 238, 255) ,
colordict.py(392): 'lightsteelblue3' : (162, 181, 205, 255) ,
colordict.py(393): 'lightsteelblue4' : (110, 123, 139, 255) ,
colordict.py(394): 'tomato3' : (205, 79, 57, 255) ,
colordict.py(395): 'gray43' : (110, 110, 110, 255) ,
colordict.py(396): 'darkgoldenrod4' : (139, 101, 8, 255) ,
colordict.py(397): 'grey50' : (127, 127, 127, 255) ,
colordict.py(398): 'yellow4' : (139, 139, 0, 255) ,
colordict.py(399): 'mediumorchid' : (186, 85, 211, 255) ,
colordict.py(400): 'yellow2' : (238, 238, 0, 255) ,
colordict.py(401): 'darkgoldenrod2' : (238, 173, 14, 255) ,
colordict.py(402): 'darkgoldenrod3' : (205, 149, 12, 255) ,
colordict.py(403): 'chartreuse' : (127, 255, 0, 255) ,
colordict.py(404): 'mediumblue' : (0, 0, 205, 255) ,
colordict.py(405): 'gray4' : (10, 10, 10, 255) ,
colordict.py(406): 'springgreen' : (0, 255, 127, 255) ,
colordict.py(407): 'orange' : (255, 165, 0, 255) ,
colordict.py(408): 'gray5' : (13, 13, 13, 255) ,
colordict.py(409): 'lightsalmon' : (255, 160, 122, 255) ,
colordict.py(410): 'gray19' : (48, 48, 48, 255) ,
colordict.py(411): 'turquoise' : (64, 224, 208, 255) ,
colordict.py(412): 'lightseagreen' : (32, 178, 170, 255) ,
colordict.py(413): 'grey8' : (20, 20, 20, 255) ,
colordict.py(414): 'grey9' : (23, 23, 23, 255) ,
colordict.py(415): 'grey6' : (15, 15, 15, 255) ,
colordict.py(416): 'grey7' : (18, 18, 18, 255) ,
colordict.py(417): 'grey4' : (10, 10, 10, 255) ,
colordict.py(418): 'grey5' : (13, 13, 13, 255) ,
colordict.py(419): 'grey2' : (5, 5, 5, 255) ,
colordict.py(420): 'grey3' : (8, 8, 8, 255) ,
colordict.py(421): 'grey0' : (0, 0, 0, 255) ,
colordict.py(422): 'grey1' : (3, 3, 3, 255) ,
colordict.py(423): 'gray50' : (127, 127, 127, 255) ,
colordict.py(424): 'goldenrod' : (218, 165, 32, 255) ,
colordict.py(425): 'grey58' : (148, 148, 148, 255) ,
colordict.py(426): 'grey59' : (150, 150, 150, 255) ,
colordict.py(427): 'gray51' : (130, 130, 130, 255) ,
colordict.py(428): 'grey54' : (138, 138, 138, 255) ,
colordict.py(429): 'mediumorchid4' : (122, 55, 139, 255) ,
colordict.py(430): 'grey56' : (143, 143, 143, 255) ,
colordict.py(431): 'navajowhite3' : (205, 179, 139, 255) ,
colordict.py(432): 'mediumorchid1' : (224, 102, 255, 255) ,
colordict.py(433): 'grey51' : (130, 130, 130, 255) ,
colordict.py(434): 'mediumorchid3' : (180, 82, 205, 255) ,
colordict.py(435): 'mediumorchid2' : (209, 95, 238, 255) ,
colordict.py(436): 'cyan2' : (0, 238, 238, 255) ,
colordict.py(437): 'cyan3' : (0, 205, 205, 255) ,
colordict.py(438): 'gray23' : (59, 59, 59, 255) ,
colordict.py(439): 'cyan1' : (0, 255, 255, 255) ,
colordict.py(440): 'darkgreen' : (0, 100, 0, 255) ,
colordict.py(441): 'gray24' : (61, 61, 61, 255) ,
colordict.py(442): 'cyan4' : (0, 139, 139, 255) ,
colordict.py(443): 'darkviolet' : (148, 0, 211, 255) ,
colordict.py(444): 'peachpuff4' : (139, 119, 101, 255) ,
colordict.py(445): 'gray28' : (71, 71, 71, 255) ,
colordict.py(446): 'slateblue4' : (71, 60, 139, 255) ,
colordict.py(447): 'slateblue3' : (105, 89, 205, 255) ,
colordict.py(448): 'peachpuff1' : (255, 218, 185, 255) ,
colordict.py(449): 'peachpuff2' : (238, 203, 173, 255) ,
colordict.py(450): 'peachpuff3' : (205, 175, 149, 255) ,
colordict.py(451): 'gray29' : (74, 74, 74, 255) ,
colordict.py(452): 'paleturquoise' : (175, 238, 238, 255) ,
colordict.py(453): 'darkgray' : (169, 169, 169, 255) ,
colordict.py(454): 'grey25' : (64, 64, 64, 255) ,
colordict.py(455): 'darkmagenta' : (139, 0, 139, 255) ,
colordict.py(456): 'palegoldenrod' : (238, 232, 170, 255) ,
colordict.py(457): 'grey64' : (163, 163, 163, 255) ,
colordict.py(458): 'grey12' : (31, 31, 31, 255) ,
colordict.py(459): 'deeppink3' : (205, 16, 118, 255) ,
colordict.py(460): 'gray79' : (201, 201, 201, 255) ,
colordict.py(461): 'gray83' : (212, 212, 212, 255) ,
colordict.py(462): 'deeppink2' : (238, 18, 137, 255) ,
colordict.py(463): 'burlywood4' : (139, 115, 85, 255) ,
colordict.py(464): 'palevioletred4' : (139, 71, 93, 255) ,
colordict.py(465): 'deeppink1' : (255, 20, 147, 255) ,
colordict.py(466): 'slateblue2' : (122, 103, 238, 255) ,
colordict.py(467): 'grey46' : (117, 117, 117, 255) ,
colordict.py(468): 'royalblue4' : (39, 64, 139, 255) ,
colordict.py(469): 'yellowgreen' : (154, 205, 50, 255) ,
colordict.py(470): 'royalblue1' : (72, 118, 255, 255) ,
colordict.py(471): 'slateblue1' : (131, 111, 255, 255) ,
colordict.py(472): 'lightgoldenrod3' : (205, 190, 112, 255) ,
colordict.py(473): 'lightgoldenrod2' : (238, 220, 130, 255) ,
colordict.py(474): 'navy' : (0, 0, 128, 255) ,
colordict.py(475): 'orchid' : (218, 112, 214, 255) ,
colordict.py(476): 'ghostwhite' : (248, 248, 255, 255) ,
colordict.py(477): 'purple' : (160, 32, 240, 255) ,
colordict.py(478): 'darkkhaki' : (189, 183, 107, 255) ,
colordict.py(479): 'grey45' : (115, 115, 115, 255) ,
colordict.py(480): 'gray94' : (240, 240, 240, 255) ,
colordict.py(481): 'wheat4' : (139, 126, 102, 255) ,
colordict.py(482): 'gray96' : (245, 245, 245, 255) ,
colordict.py(483): 'gray97' : (247, 247, 247, 255) ,
colordict.py(484): 'wheat1' : (255, 231, 186, 255) ,
colordict.py(485): 'gray91' : (232, 232, 232, 255) ,
colordict.py(486): 'wheat3' : (205, 186, 150, 255) ,
colordict.py(487): 'wheat2' : (238, 216, 174, 255) ,
colordict.py(488): 'indianred4' : (139, 58, 58, 255) ,
colordict.py(489): 'coral2' : (238, 106, 80, 255) ,
colordict.py(490): 'coral1' : (255, 114, 86, 255) ,
colordict.py(491): 'violetred' : (208, 32, 144, 255) ,
colordict.py(492): 'rosybrown3' : (205, 155, 155, 255) ,
colordict.py(493): 'deepskyblue2' : (0, 178, 238, 255) ,
colordict.py(494): 'deepskyblue1' : (0, 191, 255, 255) ,
colordict.py(495): 'bisque' : (255, 228, 196, 255) ,
colordict.py(496): 'grey49' : (125, 125, 125, 255) ,
colordict.py(497): 'khaki' : (240, 230, 140, 255) ,
colordict.py(498): 'wheat' : (245, 222, 179, 255) ,
colordict.py(499): 'lightslateblue' : (132, 112, 255, 255) ,
colordict.py(500): 'mediumpurple3' : (137, 104, 205, 255) ,
colordict.py(501): 'gray55' : (140, 140, 140, 255) ,
colordict.py(502): 'deepskyblue' : (0, 191, 255, 255) ,
colordict.py(503): 'gray98' : (250, 250, 250, 255) ,
colordict.py(504): 'steelblue' : (70, 130, 180, 255) ,
colordict.py(505): 'aliceblue' : (240, 248, 255, 255) ,
colordict.py(506): 'lightskyblue2' : (164, 211, 238, 255) ,
colordict.py(507): 'lightskyblue3' : (141, 182, 205, 255) ,
colordict.py(508): 'lightslategrey' : (119, 136, 153, 255) ,
colordict.py(509): 'blue3' : (0, 0, 205, 255) ,
colordict.py(510): 'blue2' : (0, 0, 238, 255) ,
colordict.py(511): 'gainsboro' : (220, 220, 220, 255) ,
colordict.py(512): 'grey76' : (194, 194, 194, 255) ,
colordict.py(513): 'purple3' : (125, 38, 205, 255) ,
colordict.py(514): 'plum4' : (139, 102, 139, 255) ,
colordict.py(515): 'gray56' : (143, 143, 143, 255) ,
colordict.py(516): 'plum3' : (205, 150, 205, 255) ,
colordict.py(517): 'plum' : (221, 160, 221, 255) ,
colordict.py(518): 'lightgrey' : (211, 211, 211, 255) ,
colordict.py(519): 'mediumslateblue' : (123, 104, 238, 255) ,
colordict.py(520): 'mistyrose' : (255, 228, 225, 255) ,
colordict.py(521): 'lightcyan1' : (224, 255, 255, 255) ,
colordict.py(522): 'grey71' : (181, 181, 181, 255) ,
colordict.py(523): 'darksalmon' : (233, 150, 122, 255) ,
colordict.py(524): 'beige' : (245, 245, 220, 255) ,
colordict.py(525): 'grey24' : (61, 61, 61, 255) ,
colordict.py(526): 'azure' : (240, 255, 255, 255) ,
colordict.py(527): 'honeydew1' : (240, 255, 240, 255) ,
colordict.py(528): 'slategray2' : (185, 211, 238, 255) ,
colordict.py(529): 'dodgerblue3' : (24, 116, 205, 255) ,
colordict.py(530): 'slategray4' : (108, 123, 139, 255) ,
colordict.py(531): 'grey27' : (69, 69, 69, 255) ,
colordict.py(532): 'lightcyan3' : (180, 205, 205, 255) ,
colordict.py(533): 'cornsilk' : (255, 248, 220, 255) ,
colordict.py(534): 'tomato1' : (255, 99, 71, 255) ,
colordict.py(535): 'gray57' : (145, 145, 145, 255) ,
colordict.py(536): 'mediumvioletred' : (199, 21, 133, 255) ,
colordict.py(537): 'tomato2' : (238, 92, 66, 255) ,
colordict.py(538): 'snow4' : (139, 137, 137, 255) ,
colordict.py(539): 'grey75' : (191, 191, 191, 255) ,
colordict.py(540): 'snow2' : (238, 233, 233, 255) ,
colordict.py(541): 'snow3' : (205, 201, 201, 255) ,
colordict.py(542): 'snow1' : (255, 250, 250, 255) ,
colordict.py(543): 'grey23' : (59, 59, 59, 255) ,
colordict.py(544): 'cornsilk3' : (205, 200, 177, 255) ,
colordict.py(545): 'lightcoral' : (240, 128, 128, 255) ,
colordict.py(546): 'orangered' : (255, 69, 0, 255) ,
colordict.py(547): 'navajowhite' : (255, 222, 173, 255) ,
colordict.py(548): 'mediumpurple2' : (159, 121, 238, 255) ,
colordict.py(549): 'slategray' : (112, 128, 144, 255) ,
colordict.py(550): 'pink2' : (238, 169, 184, 255) ,
colordict.py(551): 'grey29' : (74, 74, 74, 255) ,
colordict.py(552): 'grey28' : (71, 71, 71, 255) ,
colordict.py(553): 'gray82' : (209, 209, 209, 255) ,
colordict.py(554): 'burlywood' : (222, 184, 135, 255) ,
colordict.py(555): 'mediumpurple4' : (93, 71, 139, 255) ,
colordict.py(556): 'mediumspringgreen' : (0, 250, 154, 255) ,
colordict.py(557): 'grey26' : (66, 66, 66, 255) ,
colordict.py(558): 'grey21' : (54, 54, 54, 255) ,
colordict.py(559): 'grey20' : (51, 51, 51, 255) ,
colordict.py(560): 'blanchedalmond' : (255, 235, 205, 255) ,
colordict.py(561): 'pink4' : (139, 99, 108, 255) ,
colordict.py(562): 'gray78' : (199, 199, 199, 255) ,
colordict.py(563): 'tan3' : (205, 133, 63, 255) ,
colordict.py(564): 'gray76' : (194, 194, 194, 255) ,
colordict.py(565): 'gray77' : (196, 196, 196, 255) ,
colordict.py(566): 'white' : (255, 255, 255, 255) ,
colordict.py(567): 'gray75' : (191, 191, 191, 255) ,
colordict.py(568): 'gray72' : (184, 184, 184, 255) ,
colordict.py(569): 'gray73' : (186, 186, 186, 255) ,
colordict.py(570): 'gray70' : (179, 179, 179, 255) ,
colordict.py(571): 'gray71' : (181, 181, 181, 255) ,
colordict.py(572): 'lightgray' : (211, 211, 211, 255) ,
colordict.py(573): 'ivory' : (255, 255, 240, 255) ,
colordict.py(574): 'gray46' : (117, 117, 117, 255) ,
colordict.py(575): 'gray74' : (189, 189, 189, 255) ,
colordict.py(576): 'lightyellow3' : (205, 205, 180, 255) ,
colordict.py(577): 'lightpink2' : (238, 162, 173, 255) ,
colordict.py(578): 'lightpink3' : (205, 140, 149, 255) ,
colordict.py(579): 'paleturquoise4' : (102, 139, 139, 255) ,
colordict.py(580): 'lightpink4' : (139, 95, 101, 255) ,
colordict.py(581): 'paleturquoise3' : (150, 205, 205, 255) ,
colordict.py(582): 'seagreen4' : (46, 139, 87, 255) ,
colordict.py(583): 'seagreen3' : (67, 205, 128, 255) ,
colordict.py(584): 'seagreen2' : (78, 238, 148, 255) ,
colordict.py(585): 'seagreen1' : (84, 255, 159, 255) ,
colordict.py(586): 'paleturquoise2' : (174, 238, 238, 255) ,
colordict.py(587): 'gray52' : (133, 133, 133, 255) ,
colordict.py(588): 'cornsilk4' : (139, 136, 120, 255) ,
colordict.py(589): 'cornsilk2' : (238, 232, 205, 255) ,
colordict.py(590): 'darkolivegreen3' : (162, 205, 90, 255) ,
colordict.py(591): 'cornsilk1' : (255, 248, 220, 255) ,
colordict.py(592): 'limegreen' : (50, 205, 50, 255) ,
colordict.py(593): 'darkolivegreen2' : (188, 238, 104, 255) ,
colordict.py(594): 'grey' : (190, 190, 190, 255) ,
colordict.py(595): 'violetred2' : (238, 58, 140, 255) ,
colordict.py(596): 'salmon1' : (255, 140, 105, 255) ,
colordict.py(597): 'grey92' : (235, 235, 235, 255) ,
colordict.py(598): 'grey93' : (237, 237, 237, 255) ,
colordict.py(599): 'grey94' : (240, 240, 240, 255) ,
colordict.py(600): 'grey95' : (242, 242, 242, 255) ,
colordict.py(601): 'grey96' : (245, 245, 245, 255) ,
colordict.py(602): 'grey83' : (212, 212, 212, 255) ,
colordict.py(603): 'grey98' : (250, 250, 250, 255) ,
colordict.py(604): 'lightgoldenrod1' : (255, 236, 139, 255) ,
colordict.py(605): 'palegreen1' : (154, 255, 154, 255) ,
colordict.py(606): 'red3' : (205, 0, 0, 255) ,
colordict.py(607): 'palegreen3' : (124, 205, 124, 255) ,
colordict.py(608): 'palegreen2' : (144, 238, 144, 255) ,
colordict.py(609): 'palegreen4' : (84, 139, 84, 255) ,
colordict.py(610): 'cadetblue' : (95, 158, 160, 255) ,
colordict.py(611): 'violet' : (238, 130, 238, 255) ,
colordict.py(612): 'mistyrose2' : (238, 213, 210, 255) ,
colordict.py(613): 'slateblue' : (106, 90, 205, 255) ,
colordict.py(614): 'grey43' : (110, 110, 110, 255) ,
colordict.py(615): 'grey90' : (229, 229, 229, 255) ,
colordict.py(616): 'gray35' : (89, 89, 89, 255) ,
colordict.py(617): 'turquoise3' : (0, 197, 205, 255) ,
colordict.py(618): 'turquoise2' : (0, 229, 238, 255) ,
colordict.py(619): 'burlywood3' : (205, 170, 125, 255) ,
colordict.py(620): 'burlywood2' : (238, 197, 145, 255) ,
colordict.py(621): 'lightcyan4' : (122, 139, 139, 255) ,
colordict.py(622): 'rosybrown' : (188, 143, 143, 255) ,
colordict.py(623): 'turquoise4' : (0, 134, 139, 255) ,
colordict.py(624): 'whitesmoke' : (245, 245, 245, 255) ,
colordict.py(625): 'lightblue' : (173, 216, 230, 255) ,
colordict.py(626): 'grey40' : (102, 102, 102, 255) ,
colordict.py(627): 'gray40' : (102, 102, 102, 255) ,
colordict.py(628): 'honeydew3' : (193, 205, 193, 255) ,
colordict.py(629): 'dimgray' : (105, 105, 105, 255) ,
colordict.py(630): 'grey47' : (120, 120, 120, 255) ,
colordict.py(631): 'seagreen' : (46, 139, 87, 255) ,
colordict.py(632): 'red4' : (139, 0, 0, 255) ,
colordict.py(633): 'grey14' : (36, 36, 36, 255) ,
colordict.py(634): 'snow' : (255, 250, 250, 255) ,
colordict.py(635): 'darkorchid1' : (191, 62, 255, 255) ,
colordict.py(636): 'gray58' : (148, 148, 148, 255) ,
colordict.py(637): 'gray59' : (150, 150, 150, 255) ,
colordict.py(638): 'cadetblue4' : (83, 134, 139, 255) ,
colordict.py(639): 'cadetblue3' : (122, 197, 205, 255) ,
colordict.py(640): 'cadetblue2' : (142, 229, 238, 255) ,
colordict.py(641): 'cadetblue1' : (152, 245, 255, 255) ,
colordict.py(642): 'olivedrab4' : (105, 139, 34, 255) ,
colordict.py(643): 'purple4' : (85, 26, 139, 255) ,
colordict.py(644): 'gray20' : (51, 51, 51, 255) ,
colordict.py(645): 'grey44' : (112, 112, 112, 255) ,
colordict.py(646): 'purple1' : (155, 48, 255, 255) ,
colordict.py(647): 'olivedrab1' : (192, 255, 62, 255) ,
colordict.py(648): 'olivedrab2' : (179, 238, 58, 255) ,
colordict.py(649): 'olivedrab3' : (154, 205, 50, 255) ,
colordict.py(650): 'orangered3' : (205, 55, 0, 255) ,
colordict.py(651): 'orangered2' : (238, 64, 0, 255) ,
colordict.py(652): 'orangered1' : (255, 69, 0, 255) ,
colordict.py(653): 'darkorchid' : (153, 50, 204, 255) ,
colordict.py(654): 'thistle3' : (205, 181, 205, 255) ,
colordict.py(655): 'thistle2' : (238, 210, 238, 255) ,
colordict.py(656): 'thistle1' : (255, 225, 255, 255) ,
colordict.py(657): 'salmon' : (250, 128, 114, 255) ,
colordict.py(658): 'gray93' : (237, 237, 237, 255) ,
colordict.py(659): 'thistle4' : (139, 123, 139, 255) ,
colordict.py(660): 'gray39' : (99, 99, 99, 255) ,
colordict.py(661): 'lawngreen' : (124, 252, 0, 255) ,
colordict.py(662): 'hotpink3' : (205, 96, 144, 255) ,
colordict.py(663): 'hotpink2' : (238, 106, 167, 255) ,
colordict.py(664): 'hotpink1' : (255, 110, 180, 255) ,
colordict.py(665): 'lightgreen' : (144, 238, 144, 255) ,
colordict.py(666): 'hotpink4' : (139, 58, 98, 255) ,
colordict.py(667): 'darkseagreen4' : (105, 139, 105, 255) ,
colordict.py(668): 'darkseagreen3' : (155, 205, 155, 255) ,
colordict.py(669): 'darkseagreen2' : (180, 238, 180, 255) ,
colordict.py(670): 'darkseagreen1' : (193, 255, 193, 255) ,
colordict.py(671): 'deepskyblue4' : (0, 104, 139, 255) ,
colordict.py(672): 'gray44' : (112, 112, 112, 255) ,
colordict.py(673): 'navyblue' : (0, 0, 128, 255) ,
colordict.py(674): 'darkblue' : (0, 0, 139, 255) ,
colordict.py(675): 'forestgreen' : (34, 139, 34, 255) ,
colordict.py(676): 'gray53' : (135, 135, 135, 255) ,
colordict.py(677): 'grey100' : (255, 255, 255, 255) ,
colordict.py(678): 'brown1' : (255, 64, 64, 255) ,
__init__.py(107): Color = color.Color
__init__.py(108): __version__ = ver
__init__.py(112): try: import pygame.cdrom
__init__.py(115): try: import pygame.cursors
 --- modulename: cursors, funcname: <module>
cursors.py(32): """
cursors.py(35): arrow = ((16, 16), (0, 0),
cursors.py(37):      0x7F,0x80,0x7C,0x00,0x6C,0x00,0x46,0x00,0x06,0x00,0x03,0x00,0x03,0x00,0x00,0x00),
cursors.py(39):      0xFF,0xC0,0xFF,0x80,0xFE,0x00,0xEF,0x00,0x4F,0x00,0x07,0x80,0x07,0x80,0x03,0x00))
cursors.py(41): diamond = ((16, 16), (7, 7),
cursors.py(43):      56, 28, 112, 14, 224, 7, 192, 3, 128, 1, 0, 0, 0, 0, 0),
cursors.py(45):      124, 124, 62, 248, 31, 240, 15, 224, 7, 192, 3, 128, 1, 0, 0, 0))
cursors.py(47): ball = ((16, 16), (7, 7),
cursors.py(49):      127, 254, 127, 254, 63, 252, 63, 252, 31, 248, 15, 240, 3, 192, 0, 0),
cursors.py(52):      3, 192))
cursors.py(54): broken_x = ((16, 16), (7, 7),
cursors.py(56):      12, 48, 28, 56, 56, 28, 112, 14, 96, 6, 0, 0),
cursors.py(58):      0, 14, 112, 30, 120, 62, 124, 124, 62, 248, 31, 240, 15, 224, 7))
cursors.py(61): tri_left = ((16, 16), (1, 1),
cursors.py(63):      7, 128, 7, 128, 3, 128, 3, 128, 1, 128, 1, 128, 0, 0),
cursors.py(65):      31, 255, 15, 254, 15, 192, 7, 192, 7, 192, 3, 192, 3, 192, 1, 128))
cursors.py(67): tri_right = ((16, 16), (14, 1),
cursors.py(69):      1, 224, 1, 224, 1, 192, 1, 192, 1, 128, 1, 128, 0, 0),
cursors.py(71):      248, 127, 240, 3, 240, 3, 224, 3, 224, 3, 192, 3, 192, 1, 128))
cursors.py(103):   "                        ",
cursors.py(122):  "                        ",
cursors.py(148):  "                ",
cursors.py(166):  "                        ",
cursors.py(184):  "        ",
cursors.py(189): def compile(strings, black='X', white='.',xor='o'):
cursors.py(244): def load_xbm(curs, mask):
__init__.py(118): try: import pygame.display
__init__.py(121): try: import pygame.draw
__init__.py(124): try: import pygame.event
__init__.py(127): try: import pygame.image
__init__.py(130): try: import pygame.joystick
__init__.py(133): try: import pygame.key
__init__.py(136): try: import pygame.mouse
__init__.py(139): try: import pygame.sprite
 --- modulename: sprite, funcname: <module>
sprite.py(66): """
sprite.py(88): import pygame
sprite.py(89): from pygame import Rect
sprite.py(90): from pygame.time import get_ticks
sprite.py(93): try:
sprite.py(94):     from pygame.mask import from_surface
sprite.py(99): class Sprite(object):
 --- modulename: sprite, funcname: Sprite
sprite.py(99): class Sprite(object):
sprite.py(110):     """
sprite.py(112):     def __init__(self, *groups):
sprite.py(116):     def add(self, *groups):
sprite.py(131):     def remove(self, *groups):
sprite.py(146):     def add_internal(self, group):
sprite.py(149):     def remove_internal(self, group):
sprite.py(152):     def update(self, *args):
sprite.py(165):     def kill(self):
sprite.py(178):     def groups(self):
sprite.py(186):     def alive(self):
sprite.py(194):     def __repr__(self):
sprite.py(198): class DirtySprite(Sprite):
 --- modulename: sprite, funcname: DirtySprite
sprite.py(198): class DirtySprite(Sprite):
sprite.py(224):     """
sprite.py(226):     def __init__(self, *groups):
sprite.py(236):     def _set_visible(self, val):
sprite.py(242):     def _get_visible(self):
sprite.py(245):     visible = property(lambda self: self._get_visible(),\
sprite.py(246):                        lambda self, value:self._set_visible(value), \
sprite.py(247):                        doc="you can make this sprite disappear without removing it from the group,\n"+
sprite.py(248):                            "values 0 for invisible and 1 for visible")
sprite.py(250):     def __repr__(self):
sprite.py(255): class AbstractGroup(object):
 --- modulename: sprite, funcname: AbstractGroup
sprite.py(255): class AbstractGroup(object):
sprite.py(262):        and support iteration, len, and so on."""
sprite.py(265):     _spritegroup = True
sprite.py(267):     def __init__(self):
sprite.py(271):     def sprites(self):
sprite.py(281):     def add_internal(self, sprite):
sprite.py(284):     def remove_internal(self, sprite):
sprite.py(290):     def has_internal(self, sprite):
sprite.py(293):     def copy(self):
sprite.py(301):     def __iter__(self):
sprite.py(304):     def __contains__(self, sprite):
sprite.py(307):     def add(self, *sprites):
sprite.py(339):     def remove(self, *sprites):
sprite.py(366):     def has(self, *sprites):
sprite.py(393):     def update(self, *args):
sprite.py(401):     def draw(self, surface):
sprite.py(412):     def clear(self, surface, bgd):
sprite.py(437):     def empty(self):
sprite.py(446):     def __nonzero__(self):
sprite.py(449):     def __len__(self):
sprite.py(456):     def __repr__(self):
sprite.py(459): class Group(AbstractGroup):
 --- modulename: sprite, funcname: Group
sprite.py(459): class Group(AbstractGroup):
sprite.py(475):     """
sprite.py(477):     def __init__(self, *sprites):
sprite.py(481): RenderPlain = Group
sprite.py(482): RenderClear = Group
sprite.py(484): class RenderUpdates(Group):
 --- modulename: sprite, funcname: RenderUpdates
sprite.py(484): class RenderUpdates(Group):
sprite.py(490):     """
sprite.py(492):     def draw(self, surface):
sprite.py(512): class OrderedUpdates(RenderUpdates):
 --- modulename: sprite, funcname: OrderedUpdates
sprite.py(512): class OrderedUpdates(RenderUpdates):
sprite.py(520):     """
sprite.py(522):     def __init__(self, *sprites):
sprite.py(526):     def sprites(self): 
sprite.py(529):     def add_internal(self, sprite):
sprite.py(533):     def remove_internal(self, sprite):
sprite.py(538): class LayeredUpdates(AbstractGroup):
 --- modulename: sprite, funcname: LayeredUpdates
sprite.py(538): class LayeredUpdates(AbstractGroup):
sprite.py(545):     """
sprite.py(547):     def __init__(self, *sprites, **kwargs):
sprite.py(566):     def add_internal(self, sprite, layer=None):
sprite.py(603):     def add(self, *sprites, **kwargs):
sprite.py(645):     def remove_internal(self, sprite):
sprite.py(659):     def sprites(self):
sprite.py(665):     def draw(self, surface):
sprite.py(688):     def get_sprites_at(self, pos):
sprite.py(703):     def get_sprite(self, idx):
sprite.py(711):     def remove_sprites_of_layer(self, layer_nr):
sprite.py(721):     def layers(self):
sprite.py(730):     def change_layer(self, sprite, new_layer):
sprite.py(764):     def get_layer_of_sprite(self, sprite):
sprite.py(771):     def get_top_layer(self):
sprite.py(777):     def get_bottom_layer(self):
sprite.py(783):     def move_to_front(self, sprite):
sprite.py(792):     def move_to_back(self, sprite):
sprite.py(801):     def get_top_sprite(self):
sprite.py(807):     def get_sprites_from_layer(self, layer):
sprite.py(825):     def switch_layer(self, layer1_nr, layer2_nr):
sprite.py(837): class LayeredDirty(LayeredUpdates):
 --- modulename: sprite, funcname: LayeredDirty
sprite.py(837): class LayeredDirty(LayeredUpdates):
sprite.py(858):     """
sprite.py(860):     def __init__(self, *sprites, **kwargs):
sprite.py(885):     def add_internal(self, sprite, layer=None):
sprite.py(905):     def draw(self, surface, bgd=None):
sprite.py(1024):     def clear(self, surface, bgd):
sprite.py(1030):     def repaint_rect(self, screen_rect): 
sprite.py(1038):     def set_clip(self, screen_rect=None):
sprite.py(1048):     def get_clip(self):
sprite.py(1054):     def change_layer(self, sprite, new_layer):
sprite.py(1065):     def set_timing_treshold(self, time_ms):
sprite.py(1079): class GroupSingle(AbstractGroup):
 --- modulename: sprite, funcname: GroupSingle
sprite.py(1079): class GroupSingle(AbstractGroup):
sprite.py(1088):        sprite and then add the new one."""
sprite.py(1090):     def __init__(self, sprite = None):
sprite.py(1095):     def copy(self):
sprite.py(1098):     def sprites(self):
sprite.py(1102):     def add_internal(self, sprite):
sprite.py(1107):     def __nonzero__(self): return (self.__sprite is not None)
sprite.py(1109):     def _get_sprite(self):
sprite.py(1112):     def _set_sprite(self, sprite):
sprite.py(1117):     sprite = property(_get_sprite, _set_sprite, None,
sprite.py(1118):                       "The sprite contained in this group")
sprite.py(1120):     def remove_internal(self, sprite):
sprite.py(1123):     def has_internal(self, sprite):
sprite.py(1127):     def __contains__(self, sprite): return (self.__sprite is sprite)
sprite.py(1135): def collide_rect(left, right):
sprite.py(1149): class collide_rect_ratio:
 --- modulename: sprite, funcname: collide_rect_ratio
sprite.py(1149): class collide_rect_ratio:
sprite.py(1159):     """
sprite.py(1161):     def __init__( self, ratio ):
sprite.py(1170):     def __call__( self, left, right ):
sprite.py(1194): def collide_circle( left, right ):
sprite.py(1226): class collide_circle_ratio( object ):
 --- modulename: sprite, funcname: collide_circle_ratio
sprite.py(1226): class collide_circle_ratio( object ):
sprite.py(1235):     """
sprite.py(1237):     def __init__( self, ratio ):
sprite.py(1248):     def __call__( self, left, right ):
sprite.py(1291): def collide_mask(left, right):
sprite.py(1317): def spritecollide(sprite, group, dokill, collided = None):
sprite.py(1359): def groupcollide(groupa, groupb, dokilla, dokillb, collided = None):
sprite.py(1393): def spritecollideany(sprite, group, collided = None):
__init__.py(143): try: import pygame.threads
 --- modulename: __init__, funcname: <module>
__init__.py(9): """
__init__.py(11): __author__ = "Rene Dudfield"
__init__.py(12): __version__ = "0.3.0"
__init__.py(13): __license__ = 'Python license'
__init__.py(15): import traceback, sys
__init__.py(17): from pygame.compat import geterror
__init__.py(19): if sys.version_info[0] == 3:
__init__.py(22): elif (sys.version_info[0] == 2 and sys.version_info[1] < 5):
__init__.py(27):     from Queue import Queue
 --- modulename: Queue, funcname: <module>
Queue.py(1): """A multi-producer, multi-consumer queue."""
Queue.py(3): from time import time as _time
Queue.py(4): try:
Queue.py(5):     import threading as _threading
Queue.py(8): from collections import deque
Queue.py(9): import heapq
Queue.py(11): __all__ = ['Empty', 'Full', 'Queue', 'PriorityQueue', 'LifoQueue']
Queue.py(13): class Empty(Exception):
 --- modulename: Queue, funcname: Empty
Queue.py(13): class Empty(Exception):
Queue.py(14):     "Exception raised by Queue.get(block=0)/get_nowait()."
Queue.py(15):     pass
Queue.py(17): class Full(Exception):
 --- modulename: Queue, funcname: Full
Queue.py(17): class Full(Exception):
Queue.py(18):     "Exception raised by Queue.put(block=0)/put_nowait()."
Queue.py(19):     pass
Queue.py(21): class Queue:
 --- modulename: Queue, funcname: Queue
Queue.py(21): class Queue:
Queue.py(25):     """
Queue.py(26):     def __init__(self, maxsize=0):
Queue.py(45):     def task_done(self):
Queue.py(70):     def join(self):
Queue.py(86):     def qsize(self):
Queue.py(93):     def empty(self):
Queue.py(100):     def full(self):
Queue.py(107):     def put(self, item, block=True, timeout=None):
Queue.py(142):     def put_nowait(self, item):
Queue.py(150):     def get(self, block=True, timeout=None):
Queue.py(184):     def get_nowait(self):
Queue.py(197):     def _init(self, maxsize):
Queue.py(200):     def _qsize(self, len=len):
Queue.py(204):     def _put(self, item):
Queue.py(208):     def _get(self):
Queue.py(212): class PriorityQueue(Queue):
 --- modulename: Queue, funcname: PriorityQueue
Queue.py(212): class PriorityQueue(Queue):
Queue.py(216):     '''
Queue.py(218):     def _init(self, maxsize):
Queue.py(221):     def _qsize(self, len=len):
Queue.py(224):     def _put(self, item, heappush=heapq.heappush):
Queue.py(227):     def _get(self, heappop=heapq.heappop):
Queue.py(231): class LifoQueue(Queue):
 --- modulename: Queue, funcname: LifoQueue
Queue.py(231): class LifoQueue(Queue):
Queue.py(232):     '''Variant of Queue that retrieves most recently added entries first.'''
Queue.py(234):     def _init(self, maxsize):
Queue.py(237):     def _qsize(self, len=len):
Queue.py(240):     def _put(self, item):
Queue.py(243):     def _get(self):
__init__.py(28):     from Queue import Empty
__init__.py(30): import threading
__init__.py(31): Thread = threading.Thread
__init__.py(33): STOP = object()
__init__.py(34): FINISH = object()
__init__.py(40): _wq = None
__init__.py(43): _use_workers = 0
__init__.py(48): MAX_WORKERS_TO_TEST = 64
__init__.py(52): def init(number_of_workers = 0):
__init__.py(71): def quit():
__init__.py(80): def benchmark_workers(a_bench_func = None, the_data = None):
__init__.py(152): class WorkerQueue(object):
 --- modulename: __init__, funcname: WorkerQueue
__init__.py(152): class WorkerQueue(object):
__init__.py(154):     def __init__(self, num_workers = 20):
__init__.py(159):     def _setup_workers(self, num_workers):
__init__.py(173):     def do(self, f, *args, **kwArgs):
__init__.py(179):     def stop(self):
__init__.py(187):     def threadloop(self): #, finish = False):
__init__.py(205):     def wait(self):
__init__.py(210): class FuncResult:
 --- modulename: __init__, funcname: FuncResult
__init__.py(210): class FuncResult:
__init__.py(213):     """
__init__.py(214):     def __init__(self, f, callback = None, errback = None):
__init__.py(225):     def __call__(self, *args, **kwargs):
__init__.py(238): def tmap(f, seq_args, num_workers = 20, worker_queue = None, wait = True, stop_on_error = True):
__init__.py(147): def warn_unwanted_files():
__init__.py(205): try: from pygame.surface import *
__init__.py(209): try:
__init__.py(210):     import pygame.mask
__init__.py(211):     from pygame.mask import Mask
__init__.py(214): try: from pygame.pixelarray import *
__init__.py(217): try: from pygame.overlay import *
__init__.py(220): try: import pygame.time
__init__.py(223): try: import pygame.transform
__init__.py(227): try:
__init__.py(228):     import pygame.font
__init__.py(229):     import pygame.sysfont
 --- modulename: sysfont, funcname: <module>
sysfont.py(21): "sysfont, used in the font module to find system fonts"
sysfont.py(23): import os, sys
sysfont.py(26): try:
sysfont.py(27):     bytes
sysfont.py(32):     def toascii(raw):
sysfont.py(36): def _simplename(name):
sysfont.py(41): def _addfont(name, bold, italic, font, fontdict):
sysfont.py(54):     ('ahronbd.ttf', 'Aharoni', True, False),
sysfont.py(55):     ('andlso.ttf', 'Andalus', False, False),
sysfont.py(56):     ('angsa.ttf', 'Angsana New', False, False),
sysfont.py(57):     ('angsab.ttf', 'Angsana New', True, False),
sysfont.py(58):     ('angsai.ttf', 'Angsana New', False, True),
sysfont.py(59):     ('angsaz.ttf', 'Angsana New', True, True),
sysfont.py(60):     ('angsau.ttf', 'AngsanaUPC', False, False),
sysfont.py(61):     ('angsaub.ttf', 'AngsanaUPC', True, False),
sysfont.py(62):     ('angsaui.ttf', 'AngsanaUPC', False, True),
sysfont.py(63):     ('angsauz.ttf', 'AngsanaUPC', True, True),
sysfont.py(64):     ('artro.ttf', 'Arabic Transparent', False, False),
sysfont.py(65):     ('artrbdo.ttf', 'Arabic Transparent', True, False),
sysfont.py(66):     ('agatha.ttf', 'Agatha', False, False),
sysfont.py(67):     ('arial.ttf', 'Arial', False, False),
sysfont.py(68):     ('arialbd.ttf', 'Arial', True, False),
sysfont.py(69):     ('ariali.ttf', 'Arial', False, True),
sysfont.py(70):     ('arialbi.ttf', 'Arial', True, True),
sysfont.py(71):     ('ariblk.ttf', 'Arial Black', False, False),
sysfont.py(72):     ('browa.ttf', 'Browallia New', False, False),
sysfont.py(73):     ('browab.ttf', 'Browallia New', True, False),
sysfont.py(74):     ('browai.ttf', 'Browallia New', False, True),
sysfont.py(75):     ('browaz.ttf', 'Browallia New', True, True),
sysfont.py(76):     ('browau.ttf', 'BrowalliaUPC', False, False),
sysfont.py(77):     ('browaub.ttf', 'BrowalliaUPC', True, False),
sysfont.py(78):     ('browaui.ttf', 'BrowalliaUPC', False, True),
sysfont.py(79):     ('browauz.ttf', 'BrowalliaUPC', True, True),
sysfont.py(80):     ('comic.ttf', 'Comic Sans MS', False, False),
sysfont.py(81):     ('comicbd.ttf', 'Comic Sans MS', True, False),
sysfont.py(82):     ('cordia.ttf', 'Cordia New', False, False),
sysfont.py(83):     ('cordiab.ttf', 'Cordia New', True, False),
sysfont.py(84):     ('cordiai.ttf', 'Cordia New', False, True),
sysfont.py(85):     ('cordiaz.ttf', 'Cordia New', True, True),
sysfont.py(86):     ('cordiau.ttf', 'CordiaUPC', False, False),
sysfont.py(87):     ('cordiaub.ttf', 'CordiaUPC', True, False),
sysfont.py(88):     ('cordiaui.ttf', 'CordiaUPC', False, True),
sysfont.py(89):     ('cordiauz.ttf', 'CordiaUPC', True, True),
sysfont.py(90):     ('cour.ttf', 'Courier New', False, False),
sysfont.py(91):     ('courbd.ttf', 'Courier New', True, False),
sysfont.py(92):     ('couri.ttf', 'Courier New', False, True),
sysfont.py(93):     ('courbi.ttf', 'Courier New', True, True),
sysfont.py(94):     ('david.ttf', 'David', False, False),
sysfont.py(95):     ('davidbd.ttf', 'David', True, False),
sysfont.py(96):     ('davidtr.ttf', 'David Transparent', False, False),
sysfont.py(97):     ('upcdl.ttf', 'DilleniaUPC', False, False),
sysfont.py(98):     ('upcdb.ttf', 'DilleniaUPC', True, False),
sysfont.py(99):     ('upcdi.ttf', 'DilleniaUPC', False, True),
sysfont.py(100):     ('upcdbi.ttf', 'DilleniaUPC', True, True),
sysfont.py(101):     ('estre.ttf', 'Estrangelo Edessa', False, False),
sysfont.py(102):     ('upcel.ttf', 'EucrosialUPC', False, False),
sysfont.py(103):     ('upceb.ttf', 'EucrosialUPC', True, False),
sysfont.py(104):     ('upcei.ttf', 'EucrosialUPC', False, True),
sysfont.py(105):     ('upcebi.ttf', 'EucrosialUPC', True, True),
sysfont.py(106):     ('mriamfx.ttf', 'Fixed Miriam Transparent', False, False),
sysfont.py(107):     ('framd.ttf', 'Franklin Gothic Medium', False, False),
sysfont.py(108):     ('framdit.ttf', 'Franklin Gothic Medium', False, True),
sysfont.py(109):     ('frank.ttf', 'FrankRuehl', False, False),
sysfont.py(110):     ('upcfl.ttf', 'FreesialUPC', False, False),
sysfont.py(111):     ('upcfb.ttf', 'FreesialUPC', True, False),
sysfont.py(112):     ('upcfi.ttf', 'FreesialUPC', False, True),
sysfont.py(113):     ('upcfbi.ttf', 'FreesialUPC', True, True),
sysfont.py(114):     ('gautami.ttf', 'Gautami', False, False),
sysfont.py(115):     ('georgia.ttf', 'Georgia', False, False),
sysfont.py(116):     ('georgiab.ttf', 'Georgia', True, False),
sysfont.py(117):     ('georgiai.ttf', 'Georgia', False, True),
sysfont.py(118):     ('georgiaz.ttf', 'Georgia', True, True),
sysfont.py(119):     ('impact.ttf', 'Impact', False, False),
sysfont.py(120):     ('upcil.ttf', 'IrisUPC', False, False),
sysfont.py(121):     ('upcib.ttf', 'IrisUPC', True, False),
sysfont.py(122):     ('upcii.ttf', 'IrisUPC', False, True),
sysfont.py(123):     ('upcibi.ttf', 'IrisUPC', True, True),
sysfont.py(124):     ('upcjl.ttf', 'JasmineUPC', False, False),
sysfont.py(125):     ('upcjb.ttf', 'JasmineUPC', True, False),
sysfont.py(126):     ('upcji.ttf', 'JasmineUPC', False, True),
sysfont.py(127):     ('upcjbi.ttf', 'JasmineUPC', True, True),
sysfont.py(128):     ('upckl.ttf', 'KodchiangUPC', False, False),
sysfont.py(129):     ('upckb.ttf', 'KodchiangUPC', True, False),
sysfont.py(130):     ('upcki.ttf', 'KodchiangUPC', False, True),
sysfont.py(131):     ('upckbi.ttf', 'KodchiangUPC', True, True),
sysfont.py(132):     ('latha.ttf', 'Latha', False, False),
sysfont.py(133):     ('lvnm.ttf', 'Levenim MT', False, False),
sysfont.py(134):     ('lvnmbd.ttf', 'Levenim MT', True, False),
sysfont.py(135):     ('upcll.ttf', 'LilyUPC', False, False),
sysfont.py(136):     ('upclb.ttf', 'LilyUPC', True, False),
sysfont.py(137):     ('upcli.ttf', 'LilyUPC', False, True),
sysfont.py(138):     ('upclbi.ttf', 'LilyUPC', True, True),
sysfont.py(139):     ('lucon.ttf', 'Lucida Console', False, False),
sysfont.py(140):     ('l_10646.ttf', 'Lucida Sans Unicode', False, False),
sysfont.py(141):     ('mangal.ttf', 'Mangal', False, False),
sysfont.py(142):     ('marlett.ttf', 'Marlett', False, False),
sysfont.py(143):     ('micross.ttf', 'Microsoft Sans Serif', False, False),
sysfont.py(144):     ('mriam.ttf', 'Miriam', False, False),
sysfont.py(145):     ('mriamc.ttf', 'Miriam Fixed', False, False),
sysfont.py(146):     ('mriamtr.ttf', 'Miriam Transparent', False, False),
sysfont.py(147):     ('mvboli.ttf', 'MV Boli', False, False),
sysfont.py(148):     ('nrkis.ttf', 'Narkisim', False, False),
sysfont.py(149):     ('pala.ttf', 'Falatino Linotype', False, False),
sysfont.py(150):     ('palab.ttf', 'Falatino Linotype', True, False),
sysfont.py(151):     ('palai.ttf', 'Falatino Linotype', False, True),
sysfont.py(152):     ('palabi.ttf', 'Falatino Linotype', True, True),
sysfont.py(153):     ('raavi.ttf', 'Raavi', False, False),
sysfont.py(154):     ('rod.ttf', 'Rod', False, False),
sysfont.py(155):     ('rodtr.ttf', 'Rod Transparent', False, False),
sysfont.py(156):     ('shruti.ttf', 'Shruti', False, False),
sysfont.py(157):     ('simpo.ttf', 'Simplified Arabic', False, False),
sysfont.py(158):     ('simpbdo.ttf', 'Simplified Arabic', True, False),
sysfont.py(159):     ('simpfxo.ttf', 'Simplified Arabic Fixed', False, False),
sysfont.py(160):     ('sylfaen.ttf', 'Sylfaen', False, False),
sysfont.py(161):     ('symbol.ttf', 'Symbol', False, False),
sysfont.py(162):     ('tahoma.ttf', 'Tahoma', False, False),
sysfont.py(163):     ('tahomabd.ttf', 'Tahoma', True, False),
sysfont.py(164):     ('times.ttf', 'Times New Roman', False, False),
sysfont.py(165):     ('timesbd.ttf', 'Times New Roman', True, False),
sysfont.py(166):     ('timesi.ttf', 'Times New Roman', False, True),
sysfont.py(167):     ('timesbi.ttf', 'Times New Roman', True, True),
sysfont.py(168):     ('trado.ttf', 'Traditional Arabic', False, False),
sysfont.py(169):     ('tradbdo.ttf', 'Traditional Arabic', True, False),
sysfont.py(170):     ('Trebuc.ttf', 'Trebuchet MS', False, False),
sysfont.py(171):     ('Trebucbd.ttf', 'Trebuchet MS', True, False),
sysfont.py(172):     ('Trebucit.ttf', 'Trebuchet MS', False, True),
sysfont.py(173):     ('Trebucbi.ttf', 'Trebuchet MS', True, True),
sysfont.py(174):     ('tunga.ttf', 'Tunga', False, False),
sysfont.py(175):     ('verdana.ttf', 'Verdana', False, False),
sysfont.py(176):     ('verdanab.ttf', 'Verdana', True, False),
sysfont.py(177):     ('verdanai.ttf', 'Verdana', False, True),
sysfont.py(178):     ('verdanaz.ttf', 'Verdana', True, True),
sysfont.py(179):     ('webdings.ttf', 'Webdings', False, False),
sysfont.py(180):     ('wingding.ttf', 'Wingdings', False, False),
sysfont.py(181):     ('simhei.ttf', 'SimHei', False, False),
sysfont.py(182):     ('simfang.ttf', 'FangSong_GB2312', False, False),
sysfont.py(183):     ('kaiu.ttf', 'DFKai-SB', False, False),
sysfont.py(184):     ('simkai.ttf', 'KaiTi_GB2312', False, False),
sysfont.py(185):     ('msgothic.ttc', 'MS Gothic', False, False),
sysfont.py(186):     ('msmincho.ttc', 'MS Mincho', False, False),
sysfont.py(187):     ('gulim.ttc', 'Gulim', False, False),
sysfont.py(188):     ('mingliu.ttc', 'Mingliu', False, False),
sysfont.py(189):     ('simsun.ttc', 'Simsun', False, False),
sysfont.py(190):     ('batang.ttc', 'Batang', False, False),
sysfont.py(196): def initsysfonts_win32():
sysfont.py(307): _OSX_default_font_files = {
sysfont.py(308):  'albayan': {(False, False): '/Library/Fonts/AlBayan.ttf',
sysfont.py(309):              (True, False): '/Library/Fonts/AlBayanBold.ttf'},
sysfont.py(310):  'andalemono': {(False, False): '/Library/Fonts/Andale Mono.ttf'},
sysfont.py(311):  'applebraille': {(False, False): '/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf'},
sysfont.py(312):  'applegothic': {(False, False): '/System/Library/Fonts/AppleGothic.ttf'},
sysfont.py(313):  'applesymbols': {(False, False): '/System/Library/Fonts/Apple Symbols.ttf'},
sysfont.py(314):  'arial': {(False, False): '/Library/Fonts/Arial.ttf',
sysfont.py(315):            (False, True): '/Library/Fonts/Arial Italic.ttf',
sysfont.py(316):            (True, False): '/Library/Fonts/Arial Bold.ttf',
sysfont.py(317):            (True, True): '/Library/Fonts/Arial Bold Italic.ttf'},
sysfont.py(318):  'arialblack': {(False, False): '/Library/Fonts/Arial Black.ttf'},
sysfont.py(319):  'arialhebrew': {(False, False): '/Library/Fonts/ArialHB.ttf',
sysfont.py(320):                  (True, False): '/Library/Fonts/ArialHBBold.ttf'},
sysfont.py(321):  'arialnarrow': {(False, False): '/Library/Fonts/Arial Narrow.ttf',
sysfont.py(322):                  (False, True): '/Library/Fonts/Arial Narrow Italic.ttf',
sysfont.py(323):                  (True, False): '/Library/Fonts/Arial Narrow Bold.ttf',
sysfont.py(324):                  (True, True): '/Library/Fonts/Arial Narrow Bold Italic.ttf'},
sysfont.py(325):  'arialroundedmtbold': {(False, False): '/Library/Fonts/Arial Rounded Bold.ttf'},
sysfont.py(326):  'arialunicodems': {(False, False): '/Library/Fonts/Arial Unicode.ttf'},
sysfont.py(327):  'ayuthaya': {(False, False): '/Library/Fonts/Ayuthaya.ttf'},
sysfont.py(328):  'baghdad': {(False, False): '/Library/Fonts/Baghdad.ttf'},
sysfont.py(329):  'brushscriptmt': {(False, True): '/Library/Fonts/Brush Script.ttf'},
sysfont.py(330):  'chalkboard': {(False, False): '/Library/Fonts/Chalkboard.ttf',
sysfont.py(331):                 (True, False): '/Library/Fonts/ChalkboardBold.ttf'},
sysfont.py(332):  'comicsansms': {(False, False): '/Library/Fonts/Comic Sans MS.ttf',
sysfont.py(333):                  (True, False): '/Library/Fonts/Comic Sans MS Bold.ttf'},
sysfont.py(334):  'corsivahebrew': {(False, False): '/Library/Fonts/Corsiva.ttf',
sysfont.py(335):                    (True, False): '/Library/Fonts/CorsivaBold.ttf'},
sysfont.py(336):  'couriernew': {(False, False): '/Library/Fonts/Courier New.ttf',
sysfont.py(337):                 (False, True): '/Library/Fonts/Courier New Italic.ttf',
sysfont.py(338):                 (True, False): '/Library/Fonts/Courier New Bold.ttf',
sysfont.py(339):                 (True, True): '/Library/Fonts/Courier New Bold Italic.ttf'},
sysfont.py(340):  'decotypenaskh': {(False, False): '/Library/Fonts/DecoTypeNaskh.ttf'},
sysfont.py(341):  'devanagarimt': {(False, False): '/Library/Fonts/DevanagariMT.ttf',
sysfont.py(342):                   (True, False): '/Library/Fonts/DevanagariMTBold.ttf'},
sysfont.py(343):  'euphemiaucas': {(False, False): '/Library/Fonts/EuphemiaCASRegular.ttf',
sysfont.py(344):                   (False, True): '/Library/Fonts/EuphemiaCASItalic.ttf',
sysfont.py(345):                   (True, False): '/Library/Fonts/EuphemiaCASBold.ttf'},
sysfont.py(346):  'gb18030bitmap': {(False, False): '/Library/Fonts/NISC18030.ttf'},
sysfont.py(347):  'geezapro': {(False, False): '/System/Library/Fonts/Geeza Pro.ttf',
sysfont.py(348):               (True, False): '/System/Library/Fonts/Geeza Pro Bold.ttf'},
sysfont.py(349):  'georgia': {(False, False): '/Library/Fonts/Georgia.ttf',
sysfont.py(350):              (False, True): '/Library/Fonts/Georgia Italic.ttf',
sysfont.py(351):              (True, False): '/Library/Fonts/Georgia Bold.ttf',
sysfont.py(352):              (True, True): '/Library/Fonts/Georgia Bold Italic.ttf'},
sysfont.py(353):  'gujaratimt': {(False, False): '/Library/Fonts/GujaratiMT.ttf',
sysfont.py(354):                 (True, False): '/Library/Fonts/GujaratiMTBold.ttf'},
sysfont.py(355):  'gurmukhimt': {(False, False): '/Library/Fonts/Gurmukhi.ttf'},
sysfont.py(356):  'impact': {(False, False): '/Library/Fonts/Impact.ttf'},
sysfont.py(357):  'inaimathi': {(False, False): '/Library/Fonts/InaiMathi.ttf'},
sysfont.py(358):  'kailasa': {(False, False): '/Library/Fonts/Kailasa.ttf'},
sysfont.py(359):  'kokonor': {(False, False): '/Library/Fonts/Kokonor.ttf'},
sysfont.py(360):  'krungthep': {(False, False): '/Library/Fonts/Krungthep.ttf'},
sysfont.py(361):  'kufistandardgk': {(False, False): '/Library/Fonts/KufiStandardGK.ttf'},
sysfont.py(362):  'liheipro': {(False, False): '/System/Library/Fonts/ Pro.ttf'},
sysfont.py(363):  'lisongpro': {(False, False): '/Library/Fonts/ Pro.ttf'},
sysfont.py(364):  'microsoftsansserif': {(False, False): '/Library/Fonts/Microsoft Sans Serif.ttf'},
sysfont.py(365):  'mshtakan': {(False, False): '/Library/Fonts/MshtakanRegular.ttf',
sysfont.py(366):               (False, True): '/Library/Fonts/MshtakanOblique.ttf',
sysfont.py(367):               (True, False): '/Library/Fonts/MshtakanBold.ttf',
sysfont.py(368):               (True, True): '/Library/Fonts/MshtakanBoldOblique.ttf'},
sysfont.py(369):  'nadeem': {(False, False): '/Library/Fonts/Nadeem.ttf'},
sysfont.py(370):  'newpeninimmt': {(False, False): '/Library/Fonts/NewPeninimMT.ttf',
sysfont.py(371):                   (True, False): '/Library/Fonts/NewPeninimMTBoldInclined.ttf'},
sysfont.py(372):  'plantagenetcherokee': {(False, False): '/Library/Fonts/PlantagenetCherokee.ttf'},
sysfont.py(373):  'raanana': {(False, False): '/Library/Fonts/Raanana.ttf',
sysfont.py(374):              (True, False): '/Library/Fonts/RaananaBold.ttf'},
sysfont.py(375):  'sathu': {(False, False): '/Library/Fonts/Sathu.ttf'},
sysfont.py(376):  'silom': {(False, False): '/Library/Fonts/Silom.ttf'},
sysfont.py(377):  'stfangsong': {(False, False): '/Library/Fonts/.ttf'},
sysfont.py(378):  'stheiti': {(False, False): '/System/Library/Fonts/.ttf'},
sysfont.py(379):  'stkaiti': {(False, False): '/Library/Fonts/.ttf'},
sysfont.py(380):  'stsong': {(False, False): '/Library/Fonts/.ttf'},
sysfont.py(381):  'tahoma': {(False, False): '/Library/Fonts/Tahoma.ttf',
sysfont.py(382):             (True, False): '/Library/Fonts/Tahoma Bold.ttf'},
sysfont.py(383):  'thonburi': {(False, False): '/System/Library/Fonts/Thonburi.ttf',
sysfont.py(384):               (True, False): '/System/Library/Fonts/ThonburiBold.ttf'},
sysfont.py(385):  'timesnewroman': {(False, False): '/Library/Fonts/Times New Roman.ttf',
sysfont.py(386):                    (False, True): '/Library/Fonts/Times New Roman Italic.ttf',
sysfont.py(387):                    (True, False): '/Library/Fonts/Times New Roman Bold.ttf',
sysfont.py(388):                    (True, True): '/Library/Fonts/Times New Roman Bold Italic.ttf'},
sysfont.py(389):  'trebuchetms': {(False, False): '/Library/Fonts/Trebuchet MS.ttf',
sysfont.py(390):                  (False, True): '/Library/Fonts/Trebuchet MS Italic.ttf',
sysfont.py(391):                  (True, False): '/Library/Fonts/Trebuchet MS Bold.ttf',
sysfont.py(392):                  (True, True): '/Library/Fonts/Trebuchet MS Bold Italic.ttf'},
sysfont.py(393):  'verdana': {(False, False): '/Library/Fonts/Verdana.ttf',
sysfont.py(394):              (False, True): '/Library/Fonts/Verdana Italic.ttf',
sysfont.py(395):              (True, False): '/Library/Fonts/Verdana Bold.ttf',
sysfont.py(396):              (True, True): '/Library/Fonts/Verdana Bold Italic.ttf'},
sysfont.py(397):  'webdings': {(False, False): '/Library/Fonts/Webdings.ttf'},
sysfont.py(398):  'wingdings': {(False, False): '/Library/Fonts/Wingdings.ttf'},
sysfont.py(399):  'wingdings2': {(False, False): '/Library/Fonts/Wingdings 2.ttf'},
sysfont.py(400):  'wingdings3': {(False, False): '/Library/Fonts/Wingdings 3.ttf'}}
sysfont.py(403): def _search_osx_font_paths(fonts):
sysfont.py(412): def initsysfonts_darwin():
sysfont.py(445): def initsysfonts_unix():
sysfont.py(487): def create_aliases():
sysfont.py(514): Sysfonts = {}
sysfont.py(515): Sysalias = {}
sysfont.py(518): def initsysfonts():
sysfont.py(534): def SysFont(name, size, bold=False, italic=False):
sysfont.py(586): def get_fonts():
sysfont.py(600): def match_font(name, bold=0, italic=0):
__init__.py(230):     pygame.font.SysFont = pygame.sysfont.SysFont
__init__.py(231):     pygame.font.get_fonts = pygame.sysfont.get_fonts
__init__.py(232):     pygame.font.match_font = pygame.sysfont.match_font
__init__.py(236): try:
__init__.py(237):     import pygame.mixer_music
__init__.py(243): try: import pygame.mixer
__init__.py(246): try: import pygame.movie
__init__.py(252): try: import pygame.scrap
__init__.py(255): try: import pygame.surfarray
 --- modulename: surfarray, funcname: <module>
surfarray.py(60): """
surfarray.py(62): import pygame
surfarray.py(65): __arraytype = None
surfarray.py(68): try:
surfarray.py(69):     import pygame._numpysurfarray as numpysf
 --- modulename: _numpysurfarray, funcname: <module>
_numpysurfarray.py(45): """
_numpysurfarray.py(47): import pygame
_numpysurfarray.py(48): import numpy
 --- modulename: __init__, funcname: <module>
__init__.py(106): """
__init__.py(107): from __future__ import division, absolute_import, print_function
__init__.py(109): import sys
__init__.py(112): class ModuleDeprecationWarning(DeprecationWarning):
 --- modulename: __init__, funcname: ModuleDeprecationWarning
__init__.py(112): class ModuleDeprecationWarning(DeprecationWarning):
__init__.py(120):     """
__init__.py(121):     pass
__init__.py(124): class VisibleDeprecationWarning(UserWarning):
 --- modulename: __init__, funcname: VisibleDeprecationWarning
__init__.py(124): class VisibleDeprecationWarning(UserWarning):
__init__.py(131):     """
__init__.py(132):     pass
__init__.py(135): class _NoValue:
 --- modulename: __init__, funcname: _NoValue
__init__.py(135): class _NoValue:
__init__.py(141):     """
__init__.py(142):     pass
__init__.py(147): oldnumeric = 'removed'
__init__.py(148): numarray = 'removed'
__init__.py(153): try:
__init__.py(154):     __NUMPY_SETUP__
__init__.py(155): except NameError:
__init__.py(156):     __NUMPY_SETUP__ = False
__init__.py(159): if __NUMPY_SETUP__:
__init__.py(164):     try:
__init__.py(165):         from numpy.__config__ import show as show_config
 --- modulename: __config__, funcname: <module>
__config__.py(3): __all__ = ["get_info","show"]
__config__.py(5): atlas_3_10_blas_info={}
__config__.py(6): atlas_3_10_blas_threads_info={}
__config__.py(7): atlas_threads_info={}
__config__.py(8): blas_opt_info={'libraries': ['f77blas', 'cblas', 'atlas'], 'library_dirs': ['/usr/lib/atlas-base'], 'language': 'c', 'define_macros': [('HAVE_CBLAS', None), ('NO_ATLAS_INFO', -1)], 'include_dirs': ['/usr/include/atlas']}
__config__.py(9): atlas_blas_threads_info={}
__config__.py(10): openblas_info={}
__config__.py(11): lapack_opt_info={'libraries': ['lapack', 'f77blas', 'cblas', 'atlas'], 'library_dirs': ['/usr/lib/atlas-base/atlas', '/usr/lib/atlas-base'], 'language': 'f77', 'define_macros': [('NO_ATLAS_INFO', -1)], 'include_dirs': ['/usr/include/atlas']}
__config__.py(12): openblas_lapack_info={}
__config__.py(13): atlas_3_10_threads_info={}
__config__.py(14): atlas_info={'libraries': ['lapack', 'f77blas', 'cblas', 'atlas'], 'library_dirs': ['/usr/lib/atlas-base/atlas', '/usr/lib/atlas-base'], 'language': 'f77', 'define_macros': [('NO_ATLAS_INFO', -1)], 'include_dirs': ['/usr/include/atlas']}
__config__.py(15): atlas_3_10_info={}
__config__.py(16): lapack_mkl_info={}
__config__.py(17): blas_mkl_info={}
__config__.py(18): atlas_blas_info={'libraries': ['f77blas', 'cblas', 'atlas'], 'library_dirs': ['/usr/lib/atlas-base'], 'language': 'c', 'define_macros': [('HAVE_CBLAS', None), ('NO_ATLAS_INFO', -1)], 'include_dirs': ['/usr/include/atlas']}
__config__.py(19): mkl_info={}
__config__.py(21): def get_info(name):
__config__.py(25): def show():
__init__.py(171):     from .version import git_revision as __git_revision__
 --- modulename: version, funcname: <module>
version.py(3): short_version = '1.10.2'
version.py(4): version = '1.10.2'
version.py(5): full_version = '1.10.2'
version.py(6): git_revision = '5667fbafb5d84e3a412a07aac72c769baa590579'
version.py(7): release = True
version.py(9): if not release:
__init__.py(172):     from .version import version as __version__
__init__.py(174):     from ._import_tools import PackageLoader
 --- modulename: _import_tools, funcname: <module>
_import_tools.py(1): from __future__ import division, absolute_import, print_function
_import_tools.py(3): import os
_import_tools.py(4): import sys
_import_tools.py(5): import warnings
_import_tools.py(7): __all__ = ['PackageLoader']
_import_tools.py(9): class PackageLoader(object):
 --- modulename: _import_tools, funcname: PackageLoader
_import_tools.py(9): class PackageLoader(object):
_import_tools.py(10):     def __init__(self, verbose=False, infunc=False):
_import_tools.py(32):     def _get_info_files(self, package_dir, parent_path, parent_package=None):
_import_tools.py(52):     def _init_info_modules(self, packages=None):
_import_tools.py(105):     def _get_sorted_names(self):
_import_tools.py(131):     def __call__(self,*packages, **options):
_import_tools.py(246):     def _execcmd(self, cmdstr):
_import_tools.py(258):     def _obj2repr(self, obj):
_import_tools.py(268):     def log(self, mess):
_import_tools.py(271):     def warn(self, mess):
_import_tools.py(274):     def error(self, mess):
_import_tools.py(278):     def _get_doc_title(self, info_module):
_import_tools.py(290):     def _format_titles(self,titles,colsep='---'):
_import_tools.py(311):     def get_pkgdocs(self):
_import_tools.py(341): class PackageLoaderDebug(PackageLoader):
 --- modulename: _import_tools, funcname: PackageLoaderDebug
_import_tools.py(341): class PackageLoaderDebug(PackageLoader):
_import_tools.py(342):     def _execcmd(self, cmdstr):
_import_tools.py(352): if int(os.environ.get('NUMPY_IMPORT_DEBUG', '0')):
 --- modulename: UserDict, funcname: get
UserDict.py(92):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(104):         return key in self.data
UserDict.py(93):             return failobj
__init__.py(176):     def pkgload(*packages, **options):
__init__.py(180):     from . import add_newdocs
 --- modulename: add_newdocs, funcname: <module>
add_newdocs.py(10): """
add_newdocs.py(11): from __future__ import division, absolute_import, print_function
add_newdocs.py(13): from numpy.lib import add_newdoc
 --- modulename: __init__, funcname: <module>
__init__.py(1): from __future__ import division, absolute_import, print_function
__init__.py(3): import math
__init__.py(5): from .info import __doc__
 --- modulename: info, funcname: <module>
info.py(148): """
info.py(149): from __future__ import division, absolute_import, print_function
info.py(151): depends = ['core', 'testing']
info.py(152): global_symbols = ['*']
__init__.py(6): from numpy.version import version as __version__
__init__.py(8): from .type_check import *
 --- modulename: type_check, funcname: <module>
type_check.py(3): """
type_check.py(4): from __future__ import division, absolute_import, print_function
type_check.py(6): __all__ = ['iscomplexobj', 'isrealobj', 'imag', 'iscomplex',
type_check.py(7):            'isreal', 'nan_to_num', 'real', 'real_if_close',
type_check.py(8):            'typename', 'asfarray', 'mintypecode', 'asscalar',
type_check.py(9):            'common_type']
type_check.py(11): import numpy.core.numeric as _nx
 --- modulename: __init__, funcname: <module>
__init__.py(1): from __future__ import division, absolute_import, print_function
__init__.py(3): from .info import __doc__
 --- modulename: info, funcname: <module>
info.py(83): """
info.py(84): from __future__ import division, absolute_import, print_function
info.py(86): depends = ['testing']
info.py(87): global_symbols = ['*']
__init__.py(4): from numpy.version import version as __version__
__init__.py(8): import os
__init__.py(9): env_added = []
__init__.py(10): for envkey in ['OPENBLAS_MAIN_FREE', 'GOTOBLAS_MAIN_FREE']:
__init__.py(11):     if envkey not in os.environ:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(104):         return key in self.data
__init__.py(12):         os.environ[envkey] = '1'
 --- modulename: os, funcname: __setitem__
os.py(473):                 putenv(key, item)
os.py(474):                 self.data[key] = item
__init__.py(13):         env_added.append(envkey)
__init__.py(10): for envkey in ['OPENBLAS_MAIN_FREE', 'GOTOBLAS_MAIN_FREE']:
__init__.py(11):     if envkey not in os.environ:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(104):         return key in self.data
__init__.py(12):         os.environ[envkey] = '1'
 --- modulename: os, funcname: __setitem__
os.py(473):                 putenv(key, item)
os.py(474):                 self.data[key] = item
__init__.py(13):         env_added.append(envkey)
__init__.py(10): for envkey in ['OPENBLAS_MAIN_FREE', 'GOTOBLAS_MAIN_FREE']:
__init__.py(14): from . import multiarray
__init__.py(15): for envkey in env_added:
__init__.py(16):     del os.environ[envkey]
 --- modulename: os, funcname: __delitem__
os.py(497):                     unsetenv(key)
os.py(498):                     del self.data[key]
__init__.py(15): for envkey in env_added:
__init__.py(16):     del os.environ[envkey]
 --- modulename: os, funcname: __delitem__
os.py(497):                     unsetenv(key)
os.py(498):                     del self.data[key]
__init__.py(15): for envkey in env_added:
__init__.py(17): del envkey
__init__.py(18): del env_added
__init__.py(19): del os
__init__.py(21): from . import umath
__init__.py(22): from . import _internal  # for freeze programs
 --- modulename: _internal, funcname: <module>
_internal.py(6): """
_internal.py(7): from __future__ import division, absolute_import, print_function
_internal.py(9): import re
_internal.py(10): import sys
_internal.py(12): from numpy.compat import asbytes, basestring
 --- modulename: __init__, funcname: <module>
__init__.py(10): """
__init__.py(11): from __future__ import division, absolute_import, print_function
__init__.py(13): from . import _inspect
 --- modulename: _inspect, funcname: <module>
_inspect.py(7): """
_inspect.py(8): from __future__ import division, absolute_import, print_function
_inspect.py(10): import types
_inspect.py(12): __all__ = ['getargspec', 'formatargspec']
_inspect.py(15): def ismethod(object):
_inspect.py(28): def isfunction(object):
_inspect.py(43): def iscode(object):
_inspect.py(65): CO_OPTIMIZED, CO_NEWLOCALS, CO_VARARGS, CO_VARKEYWORDS = 1, 2, 4, 8
_inspect.py(67): def getargs(co):
_inspect.py(98): def getargspec(func):
_inspect.py(115): def getargvalues(frame):
_inspect.py(127): def joinseq(seq):
_inspect.py(133): def strseq(object, convert, join=joinseq):
_inspect.py(142): def formatargspec(args, varargs=None, varkw=None, defaults=None,
_inspect.py(143):                   formatarg=str,
_inspect.py(144):                   formatvarargs=lambda name: '*' + name,
_inspect.py(145):                   formatvarkw=lambda name: '**' + name,
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(147):                   join=joinseq):
_inspect.py(171):                     formatarg=str,
_inspect.py(172):                     formatvarargs=lambda name: '*' + name,
_inspect.py(173):                     formatvarkw=lambda name: '**' + name,
_inspect.py(174):                     formatvalue=lambda value: '=' + repr(value),
_inspect.py(175):                     join=joinseq):
__init__.py(14): from . import py3k
 --- modulename: py3k, funcname: <module>
py3k.py(4): """
py3k.py(5): from __future__ import division, absolute_import, print_function
py3k.py(7): __all__ = ['bytes', 'asbytes', 'isfileobj', 'getexception', 'strchar',
py3k.py(8):            'unicode', 'asunicode', 'asbytes_nested', 'asunicode_nested',
py3k.py(9):            'asstr', 'open_latin1', 'long', 'basestring', 'sixu',
py3k.py(10):            'integer_types']
py3k.py(12): import sys
py3k.py(14): if sys.version_info[0] >= 3:
py3k.py(51):     bytes = str
py3k.py(52):     long = long
py3k.py(53):     basestring = basestring
py3k.py(54):     unicode = unicode
py3k.py(55):     integer_types = (int, long)
py3k.py(56):     asbytes = str
py3k.py(57):     asstr = str
py3k.py(58):     strchar = 'S'
py3k.py(60):     def isfileobj(f):
py3k.py(63):     def asunicode(s):
py3k.py(68):     def open_latin1(filename, mode='r'):
py3k.py(71):     def sixu(s):
py3k.py(75): def getexception():
py3k.py(78): def asbytes_nested(x):
py3k.py(84): def asunicode_nested(x):
__init__.py(15): from ._inspect import getargspec, formatargspec
__init__.py(16): from .py3k import *
__init__.py(18): __all__ = []
__init__.py(19): __all__.extend(_inspect.__all__)
__init__.py(20): __all__.extend(py3k.__all__)
_internal.py(13): from .multiarray import dtype, array, ndarray
_internal.py(14): import ctypes
 --- modulename: __init__, funcname: <module>
__init__.py(4): """create and manipulate C data types in Python"""
__init__.py(6): import os as _os, sys as _sys
__init__.py(8): __version__ = "1.1.0"
__init__.py(10): from _ctypes import Union, Structure, Array
__init__.py(11): from _ctypes import _Pointer
__init__.py(12): from _ctypes import CFuncPtr as _CFuncPtr
__init__.py(13): from _ctypes import __version__ as _ctypes_version
__init__.py(14): from _ctypes import RTLD_LOCAL, RTLD_GLOBAL
__init__.py(15): from _ctypes import ArgumentError
__init__.py(17): from struct import calcsize as _calcsize
 --- modulename: struct, funcname: <module>
struct.py(1): from _struct import *
struct.py(2): from _struct import _clearcache
struct.py(3): from _struct import __doc__
__init__.py(19): if __version__ != _ctypes_version:
__init__.py(22): if _os.name in ("nt", "ce"):
__init__.py(25): DEFAULT_MODE = RTLD_LOCAL
__init__.py(26): if _os.name == "posix" and _sys.platform == "darwin":
__init__.py(35): from _ctypes import FUNCFLAG_CDECL as _FUNCFLAG_CDECL, \
__init__.py(52): def create_string_buffer(init, size=None):
__init__.py(70): def c_buffer(init, size=None):
__init__.py(77): _c_functype_cache = {}
__init__.py(78): def CFUNCTYPE(restype, *argtypes, **kw):
__init__.py(111): if _os.name in ("nt", "ce"):
__init__.py(140): elif _os.name == "posix":
__init__.py(141):     from _ctypes import dlopen as _dlopen
__init__.py(143): from _ctypes import sizeof, byref, addressof, alignment, resize
__init__.py(144): from _ctypes import get_errno, set_errno
__init__.py(145): from _ctypes import _SimpleCData
__init__.py(147): def _check_size(typ, typecode=None):
__init__.py(159): class py_object(_SimpleCData):
 --- modulename: __init__, funcname: py_object
__init__.py(159): class py_object(_SimpleCData):
__init__.py(160):     _type_ = "O"
__init__.py(161):     def __repr__(self):
__init__.py(166): _check_size(py_object, "P")
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(168): class c_short(_SimpleCData):
 --- modulename: __init__, funcname: c_short
__init__.py(168): class c_short(_SimpleCData):
__init__.py(169):     _type_ = "h"
__init__.py(170): _check_size(c_short)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(172): class c_ushort(_SimpleCData):
 --- modulename: __init__, funcname: c_ushort
__init__.py(172): class c_ushort(_SimpleCData):
__init__.py(173):     _type_ = "H"
__init__.py(174): _check_size(c_ushort)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(176): class c_long(_SimpleCData):
 --- modulename: __init__, funcname: c_long
__init__.py(176): class c_long(_SimpleCData):
__init__.py(177):     _type_ = "l"
__init__.py(178): _check_size(c_long)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(180): class c_ulong(_SimpleCData):
 --- modulename: __init__, funcname: c_ulong
__init__.py(180): class c_ulong(_SimpleCData):
__init__.py(181):     _type_ = "L"
__init__.py(182): _check_size(c_ulong)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(184): if _calcsize("i") == _calcsize("l"):
__init__.py(189):     class c_int(_SimpleCData):
 --- modulename: __init__, funcname: c_int
__init__.py(189):     class c_int(_SimpleCData):
__init__.py(190):         _type_ = "i"
__init__.py(191):     _check_size(c_int)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(193):     class c_uint(_SimpleCData):
 --- modulename: __init__, funcname: c_uint
__init__.py(193):     class c_uint(_SimpleCData):
__init__.py(194):         _type_ = "I"
__init__.py(195):     _check_size(c_uint)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(197): class c_float(_SimpleCData):
 --- modulename: __init__, funcname: c_float
__init__.py(197): class c_float(_SimpleCData):
__init__.py(198):     _type_ = "f"
__init__.py(199): _check_size(c_float)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(201): class c_double(_SimpleCData):
 --- modulename: __init__, funcname: c_double
__init__.py(201): class c_double(_SimpleCData):
__init__.py(202):     _type_ = "d"
__init__.py(203): _check_size(c_double)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(205): class c_longdouble(_SimpleCData):
 --- modulename: __init__, funcname: c_longdouble
__init__.py(205): class c_longdouble(_SimpleCData):
__init__.py(206):     _type_ = "g"
__init__.py(207): if sizeof(c_longdouble) == sizeof(c_double):
__init__.py(210): if _calcsize("l") == _calcsize("q"):
__init__.py(212):     c_longlong = c_long
__init__.py(213):     c_ulonglong = c_ulong
__init__.py(226): class c_ubyte(_SimpleCData):
 --- modulename: __init__, funcname: c_ubyte
__init__.py(226): class c_ubyte(_SimpleCData):
__init__.py(227):     _type_ = "B"
__init__.py(228): c_ubyte.__ctype_le__ = c_ubyte.__ctype_be__ = c_ubyte
__init__.py(231): _check_size(c_ubyte)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(233): class c_byte(_SimpleCData):
 --- modulename: __init__, funcname: c_byte
__init__.py(233): class c_byte(_SimpleCData):
__init__.py(234):     _type_ = "b"
__init__.py(235): c_byte.__ctype_le__ = c_byte.__ctype_be__ = c_byte
__init__.py(236): _check_size(c_byte)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(238): class c_char(_SimpleCData):
 --- modulename: __init__, funcname: c_char
__init__.py(238): class c_char(_SimpleCData):
__init__.py(239):     _type_ = "c"
__init__.py(240): c_char.__ctype_le__ = c_char.__ctype_be__ = c_char
__init__.py(241): _check_size(c_char)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(243): class c_char_p(_SimpleCData):
 --- modulename: __init__, funcname: c_char_p
__init__.py(243): class c_char_p(_SimpleCData):
__init__.py(244):     _type_ = "z"
__init__.py(245):     if _os.name == "nt":
__init__.py(251):         def __repr__(self):
__init__.py(253): _check_size(c_char_p, "P")
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(255): class c_void_p(_SimpleCData):
 --- modulename: __init__, funcname: c_void_p
__init__.py(255): class c_void_p(_SimpleCData):
__init__.py(256):     _type_ = "P"
__init__.py(257): c_voidp = c_void_p # backwards compatibility (to a bug)
__init__.py(258): _check_size(c_void_p)
 --- modulename: __init__, funcname: _check_size
__init__.py(150):     from struct import calcsize
__init__.py(151):     if typecode is None:
__init__.py(153):         typecode = typ._type_
__init__.py(154):     actual, required = sizeof(typ), calcsize(typecode)
__init__.py(155):     if actual != required:
__init__.py(260): class c_bool(_SimpleCData):
 --- modulename: __init__, funcname: c_bool
__init__.py(260): class c_bool(_SimpleCData):
__init__.py(261):     _type_ = "?"
__init__.py(263): from _ctypes import POINTER, pointer, _pointer_type_cache
__init__.py(265): def _reset_cache():
__init__.py(281): try:
__init__.py(282):     from _ctypes import set_conversion_mode
__init__.py(286):     if _os.name in ("nt", "ce"):
__init__.py(289):         set_conversion_mode("ascii", "strict")
__init__.py(291):     class c_wchar_p(_SimpleCData):
 --- modulename: __init__, funcname: c_wchar_p
__init__.py(291):     class c_wchar_p(_SimpleCData):
__init__.py(292):         _type_ = "Z"
__init__.py(294):     class c_wchar(_SimpleCData):
 --- modulename: __init__, funcname: c_wchar
__init__.py(294):     class c_wchar(_SimpleCData):
__init__.py(295):         _type_ = "u"
__init__.py(297):     def create_unicode_buffer(init, size=None):
__init__.py(316): def SetPointerType(pointer, cls):
__init__.py(326): def ARRAY(typ, len):
__init__.py(332): class CDLL(object):
 --- modulename: __init__, funcname: CDLL
__init__.py(332): class CDLL(object):
__init__.py(345):     """
__init__.py(346):     _func_flags_ = _FUNCFLAG_CDECL
__init__.py(347):     _func_restype_ = c_int
__init__.py(349):     def __init__(self, name, mode=DEFAULT_MODE, handle=None,
__init__.py(350):                  use_errno=False,
__init__.py(351):                  use_last_error=False):
__init__.py(369):     def __repr__(self):
__init__.py(375):     def __getattr__(self, name):
__init__.py(382):     def __getitem__(self, name_or_ordinal):
__init__.py(388): class PyDLL(CDLL):
 --- modulename: __init__, funcname: PyDLL
__init__.py(388): class PyDLL(CDLL):
__init__.py(392):     """
__init__.py(393):     _func_flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI
__init__.py(395): if _os.name in ("nt", "ce"):
__init__.py(428): class LibraryLoader(object):
 --- modulename: __init__, funcname: LibraryLoader
__init__.py(428): class LibraryLoader(object):
__init__.py(429):     def __init__(self, dlltype):
__init__.py(432):     def __getattr__(self, name):
__init__.py(439):     def __getitem__(self, name):
__init__.py(442):     def LoadLibrary(self, name):
__init__.py(445): cdll = LibraryLoader(CDLL)
 --- modulename: __init__, funcname: __init__
__init__.py(430):         self._dlltype = dlltype
__init__.py(446): pydll = LibraryLoader(PyDLL)
 --- modulename: __init__, funcname: __init__
__init__.py(430):         self._dlltype = dlltype
__init__.py(448): if _os.name in ("nt", "ce"):
__init__.py(450): elif _sys.platform == "cygwin":
__init__.py(453):     pythonapi = PyDLL(None)
 --- modulename: __init__, funcname: __init__
__init__.py(352):         self._name = name
__init__.py(353):         flags = self._func_flags_
__init__.py(354):         if use_errno:
__init__.py(356):         if use_last_error:
__init__.py(359):         class _FuncPtr(_CFuncPtr):
 --- modulename: __init__, funcname: _FuncPtr
__init__.py(359):         class _FuncPtr(_CFuncPtr):
__init__.py(360):             _flags_ = flags
__init__.py(361):             _restype_ = self._func_restype_
__init__.py(362):         self._FuncPtr = _FuncPtr
__init__.py(364):         if handle is None:
__init__.py(365):             self._handle = _dlopen(self._name, mode)
__init__.py(456): if _os.name in ("nt", "ce"):
__init__.py(473): if sizeof(c_uint) == sizeof(c_void_p):
__init__.py(476): elif sizeof(c_ulong) == sizeof(c_void_p):
__init__.py(477):     c_size_t = c_ulong
__init__.py(478):     c_ssize_t = c_long
__init__.py(485): from _ctypes import _memmove_addr, _memset_addr, _string_at_addr, _cast_addr
__init__.py(488): memmove = CFUNCTYPE(c_void_p, c_void_p, c_void_p, c_size_t)(_memmove_addr)
 --- modulename: __init__, funcname: CFUNCTYPE
__init__.py(94):     flags = _FUNCFLAG_CDECL
__init__.py(95):     if kw.pop("use_errno", False):
__init__.py(97):     if kw.pop("use_last_error", False):
__init__.py(99):     if kw:
__init__.py(101):     try:
__init__.py(102):         return _c_functype_cache[(restype, argtypes, flags)]
__init__.py(103):     except KeyError:
__init__.py(104):         class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(104):         class CFunctionType(_CFuncPtr):
__init__.py(105):             _argtypes_ = argtypes
__init__.py(106):             _restype_ = restype
__init__.py(107):             _flags_ = flags
__init__.py(108):         _c_functype_cache[(restype, argtypes, flags)] = CFunctionType
__init__.py(109):         return CFunctionType
__init__.py(491): memset = CFUNCTYPE(c_void_p, c_void_p, c_int, c_size_t)(_memset_addr)
 --- modulename: __init__, funcname: CFUNCTYPE
__init__.py(94):     flags = _FUNCFLAG_CDECL
__init__.py(95):     if kw.pop("use_errno", False):
__init__.py(97):     if kw.pop("use_last_error", False):
__init__.py(99):     if kw:
__init__.py(101):     try:
__init__.py(102):         return _c_functype_cache[(restype, argtypes, flags)]
__init__.py(103):     except KeyError:
__init__.py(104):         class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(104):         class CFunctionType(_CFuncPtr):
__init__.py(105):             _argtypes_ = argtypes
__init__.py(106):             _restype_ = restype
__init__.py(107):             _flags_ = flags
__init__.py(108):         _c_functype_cache[(restype, argtypes, flags)] = CFunctionType
__init__.py(109):         return CFunctionType
__init__.py(493): def PYFUNCTYPE(restype, *argtypes):
__init__.py(500): _cast = PYFUNCTYPE(py_object, c_void_p, py_object, py_object)(_cast_addr)
 --- modulename: __init__, funcname: PYFUNCTYPE
__init__.py(494):     class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(494):     class CFunctionType(_CFuncPtr):
__init__.py(495):         _argtypes_ = argtypes
__init__.py(496):         _restype_ = restype
__init__.py(497):         _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI
__init__.py(498):     return CFunctionType
__init__.py(501): def cast(obj, typ):
__init__.py(504): _string_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_string_at_addr)
 --- modulename: __init__, funcname: PYFUNCTYPE
__init__.py(494):     class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(494):     class CFunctionType(_CFuncPtr):
__init__.py(495):         _argtypes_ = argtypes
__init__.py(496):         _restype_ = restype
__init__.py(497):         _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI
__init__.py(498):     return CFunctionType
__init__.py(505): def string_at(ptr, size=-1):
__init__.py(511): try:
__init__.py(512):     from _ctypes import _wstring_at_addr
__init__.py(516):     _wstring_at = PYFUNCTYPE(py_object, c_void_p, c_int)(_wstring_at_addr)
 --- modulename: __init__, funcname: PYFUNCTYPE
__init__.py(494):     class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(494):     class CFunctionType(_CFuncPtr):
__init__.py(495):         _argtypes_ = argtypes
__init__.py(496):         _restype_ = restype
__init__.py(497):         _flags_ = _FUNCFLAG_CDECL | _FUNCFLAG_PYTHONAPI
__init__.py(498):     return CFunctionType
__init__.py(517):     def wstring_at(ptr, size=-1):
__init__.py(524): if _os.name in ("nt", "ce"): # COM stuff
__init__.py(540): from ctypes._endian import BigEndianStructure, LittleEndianStructure
 --- modulename: _endian, funcname: <module>
_endian.py(4): import sys
_endian.py(5): from ctypes import *
_endian.py(7): _array_type = type(Array)
_endian.py(9): def _other_endian(typ):
_endian.py(26): class _swapped_meta(type(Structure)):
 --- modulename: _endian, funcname: _swapped_meta
_endian.py(26): class _swapped_meta(type(Structure)):
_endian.py(27):     def __setattr__(self, attrname, value):
_endian.py(44): if sys.byteorder == "little":
_endian.py(45):     _OTHER_ENDIAN = "__ctype_be__"
_endian.py(47):     LittleEndianStructure = Structure
_endian.py(49):     class BigEndianStructure(Structure):
 --- modulename: _endian, funcname: BigEndianStructure
_endian.py(49):     class BigEndianStructure(Structure):
_endian.py(50):         """Structure with big endian byte order"""
_endian.py(51):         __metaclass__ = _swapped_meta
_endian.py(52):         _swappedbytes_ = None
__init__.py(543): c_int8 = c_byte
__init__.py(544): c_uint8 = c_ubyte
__init__.py(545): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(546):     if sizeof(kind) == 2: c_int16 = kind
__init__.py(545): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(546):     if sizeof(kind) == 2: c_int16 = kind
__init__.py(547):     elif sizeof(kind) == 4: c_int32 = kind
__init__.py(545): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(546):     if sizeof(kind) == 2: c_int16 = kind
__init__.py(547):     elif sizeof(kind) == 4: c_int32 = kind
__init__.py(548):     elif sizeof(kind) == 8: c_int64 = kind
__init__.py(545): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(546):     if sizeof(kind) == 2: c_int16 = kind
__init__.py(547):     elif sizeof(kind) == 4: c_int32 = kind
__init__.py(548):     elif sizeof(kind) == 8: c_int64 = kind
__init__.py(545): for kind in [c_short, c_int, c_long, c_longlong]:
__init__.py(549): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(550):     if sizeof(kind) == 2: c_uint16 = kind
__init__.py(549): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(550):     if sizeof(kind) == 2: c_uint16 = kind
__init__.py(551):     elif sizeof(kind) == 4: c_uint32 = kind
__init__.py(549): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(550):     if sizeof(kind) == 2: c_uint16 = kind
__init__.py(551):     elif sizeof(kind) == 4: c_uint32 = kind
__init__.py(552):     elif sizeof(kind) == 8: c_uint64 = kind
__init__.py(549): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(550):     if sizeof(kind) == 2: c_uint16 = kind
__init__.py(551):     elif sizeof(kind) == 4: c_uint32 = kind
__init__.py(552):     elif sizeof(kind) == 8: c_uint64 = kind
__init__.py(549): for kind in [c_ushort, c_uint, c_ulong, c_ulonglong]:
__init__.py(553): del(kind)
__init__.py(555): _reset_cache()
 --- modulename: __init__, funcname: _reset_cache
__init__.py(266):     _pointer_type_cache.clear()
__init__.py(267):     _c_functype_cache.clear()
__init__.py(268):     if _os.name in ("nt", "ce"):
__init__.py(271):     POINTER(c_wchar).from_param = c_wchar_p.from_param
__init__.py(273):     POINTER(c_char).from_param = c_char_p.from_param
__init__.py(274):     _pointer_type_cache[None] = c_void_p
__init__.py(279):     CFUNCTYPE(c_int)(lambda: None)
 --- modulename: __init__, funcname: CFUNCTYPE
__init__.py(94):     flags = _FUNCFLAG_CDECL
__init__.py(95):     if kw.pop("use_errno", False):
__init__.py(97):     if kw.pop("use_last_error", False):
__init__.py(99):     if kw:
__init__.py(101):     try:
__init__.py(102):         return _c_functype_cache[(restype, argtypes, flags)]
__init__.py(103):     except KeyError:
__init__.py(104):         class CFunctionType(_CFuncPtr):
 --- modulename: __init__, funcname: CFunctionType
__init__.py(104):         class CFunctionType(_CFuncPtr):
__init__.py(105):             _argtypes_ = argtypes
__init__.py(106):             _restype_ = restype
__init__.py(107):             _flags_ = flags
__init__.py(108):         _c_functype_cache[(restype, argtypes, flags)] = CFunctionType
__init__.py(109):         return CFunctionType
_internal.py(15): from .numerictypes import object_
 --- modulename: numerictypes, funcname: <module>
numerictypes.py(82): """
numerictypes.py(83): from __future__ import division, absolute_import, print_function
numerictypes.py(85): import types as _types
numerictypes.py(86): import sys
numerictypes.py(87): import numbers
 --- modulename: numbers, funcname: <module>
numbers.py(6): TODO: Fill out more detailed documentation on the operators."""
numbers.py(8): from __future__ import division
numbers.py(9): from abc import ABCMeta, abstractmethod, abstractproperty
numbers.py(11): __all__ = ["Number", "Complex", "Real", "Rational", "Integral"]
numbers.py(13): class Number(object):
 --- modulename: numbers, funcname: Number
numbers.py(13): class Number(object):
numbers.py(18):     """
numbers.py(19):     __metaclass__ = ABCMeta
numbers.py(20):     __slots__ = ()
numbers.py(23):     __hash__ = None
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
numbers.py(34): class Complex(Number):
 --- modulename: numbers, funcname: Complex
numbers.py(34): class Complex(Number):
numbers.py(43):     """
numbers.py(45):     __slots__ = ()
numbers.py(47):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(52):     def __nonzero__(self):
numbers.py(56):     @abstractproperty
numbers.py(64):     @abstractproperty
numbers.py(72):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(77):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(82):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(87):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(92):     def __sub__(self, other):
numbers.py(96):     def __rsub__(self, other):
numbers.py(100):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(105):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(110):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(118):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(123):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(131):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(136):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(141):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(146):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(151):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(156):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(161):     def __ne__(self, other):
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
numbers.py(166): Complex.register(complex)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(158):         elif subclass in cls._abc_negative_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
numbers.py(169): class Real(Complex):
 --- modulename: numbers, funcname: Real
numbers.py(169): class Real(Complex):
numbers.py(176):     """
numbers.py(178):     __slots__ = ()
numbers.py(180):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(187):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(200):     def __divmod__(self, other):
numbers.py(208):     def __rdivmod__(self, other):
numbers.py(216):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(221):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(226):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(231):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(236):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(243):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(249):     def __complex__(self):
numbers.py(253):     @property
numbers.py(258):     @property
numbers.py(263):     def conjugate(self):
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
numbers.py(267): Real.register(float)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(158):         elif subclass in cls._abc_negative_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
numbers.py(270): class Rational(Real):
 --- modulename: numbers, funcname: Rational
numbers.py(270): class Rational(Real):
numbers.py(271):     """.numerator and .denominator should be in lowest terms."""
numbers.py(273):     __slots__ = ()
numbers.py(275):     @abstractproperty
numbers.py(279):     @abstractproperty
numbers.py(284):     def __float__(self):
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
numbers.py(295): class Integral(Rational):
 --- modulename: numbers, funcname: Integral
numbers.py(295): class Integral(Rational):
numbers.py(296):     """Integral adds a conversion to long and the bit-string operations."""
numbers.py(298):     __slots__ = ()
numbers.py(300):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(305):     def __index__(self):
numbers.py(309):     @abstractmethod
numbers.py(310):     def __pow__(self, exponent, modulus=None):
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(320):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(325):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(330):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(335):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(340):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(345):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(350):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(355):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(360):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(365):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(370):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
numbers.py(376):     def __float__(self):
numbers.py(380):     @property
numbers.py(385):     @property
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(96):                     abstracts.add(name)
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
numbers.py(390): Integral.register(int)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(158):         elif subclass in cls._abc_negative_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
numbers.py(391): Integral.register(long)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
numerictypes.py(89): from numpy.compat import bytes, long
numerictypes.py(90): from numpy.core.multiarray import (
numerictypes.py(98): __all__ = ['sctypeDict', 'sctypeNA', 'typeDict', 'typeNA', 'sctypes',
numerictypes.py(99):            'ScalarType', 'obj2sctype', 'cast', 'nbytes', 'sctype2char',
numerictypes.py(100):            'maximum_sctype', 'issctype', 'typecodes', 'find_common_type',
numerictypes.py(101):            'issubdtype', 'datetime_data', 'datetime_as_string',
numerictypes.py(102):            'busday_offset', 'busday_count', 'is_busday', 'busdaycalendar',
numerictypes.py(108): if sys.version_info[0] >= 3:
numerictypes.py(112):     from __builtin__ import bool, int, float, complex, object, unicode, str
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(120): _all_chars = [chr(_m) for _m in range(256)]
numerictypes.py(121): _ascii_upper = _all_chars[65:65+26]
numerictypes.py(122): _ascii_lower = _all_chars[97:97+26]
numerictypes.py(123): LOWER_TABLE = "".join(_all_chars[:65] + _ascii_lower + _all_chars[65+26:])
numerictypes.py(124): UPPER_TABLE = "".join(_all_chars[:97] + _ascii_upper + _all_chars[97+26:])
numerictypes.py(127): def english_lower(s):
numerictypes.py(154): def english_upper(s):
numerictypes.py(181): def english_capitalize(s):
numerictypes.py(212): sctypeDict = {}      # Contains all leaf-node scalar types with aliases
numerictypes.py(213): sctypeNA = {}        # Contails all leaf-node types -> numarray type equivalences
numerictypes.py(214): allTypes = {}      # Collect the types we will add to the module here
numerictypes.py(216): def _evalname(name):
numerictypes.py(229): def bitname(obj):
numerictypes.py(285): def _add_types():
numerictypes.py(299): _add_types()
 --- modulename: numerictypes, funcname: _add_types
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(298):             allTypes[name] = typeinfo[a]
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(287):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(288):         if isinstance(typeinfo[a], tuple):
numerictypes.py(289):             typeobj = typeinfo[a][-1]
numerictypes.py(292):             allTypes[name] = typeobj
numerictypes.py(293):             sctypeDict[name] = typeobj
numerictypes.py(294):             sctypeDict[typeinfo[a][0]] = typeobj
numerictypes.py(295):             sctypeDict[typeinfo[a][1]] = typeobj
numerictypes.py(286):     for a in typeinfo.keys():
numerictypes.py(301): def _add_aliases():
numerictypes.py(332): _add_aliases()
 --- modulename: numerictypes, funcname: _add_aliases
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(240):         assert(info[-1] == obj)  # sanity check
numerictypes.py(241):         bits = info[2]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(251):         char = 'V'
numerictypes.py(252):         base = 'void'
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(314):                    myname not in allTypes.keys()):
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(236):             newname = name[:-1]
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(240):         assert(info[-1] == obj)  # sanity check
numerictypes.py(241):         bits = info[2]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(274):             char = 'U'
numerictypes.py(275):             base = 'unicode'
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(236):             newname = name[:-1]
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(240):         assert(info[-1] == obj)  # sanity check
numerictypes.py(241):         bits = info[2]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(254):         char = 'O'
numerictypes.py(255):         base = 'object'
numerictypes.py(256):         bits = 0
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(236):             newname = name[:-1]
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(240):         assert(info[-1] == obj)  # sanity check
numerictypes.py(241):         bits = info[2]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(271):             char = 'S'
numerictypes.py(272):             base = 'string'
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(318):                     na_name = '%s%d' % (english_capitalize(base), bit//2)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(258):         char = 'M'
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(318):                     na_name = '%s%d' % (english_capitalize(base), bit//2)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(260):         char = 'm'
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(323):                     na_name = "%s%d" % (english_capitalize(base), bit)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(324):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(236):             newname = name[:-1]
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(240):         assert(info[-1] == obj)  # sanity check
numerictypes.py(241):         bits = info[2]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(248):         char = 'b'
numerictypes.py(249):         base = 'bool'
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(319):                 elif base == 'bool':
numerictypes.py(320):                     na_name = english_capitalize(base)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(321):                     sctypeDict[na_name] = typeobj
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(305):             continue
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(303):         name = english_lower(a)
 --- modulename: numerictypes, funcname: english_lower
numerictypes.py(151):     lowered = s.translate(LOWER_TABLE)
numerictypes.py(152):     return lowered
numerictypes.py(304):         if not isinstance(typeinfo[a], tuple):
numerictypes.py(306):         typeobj = typeinfo[a][-1]
numerictypes.py(308):         base, bit, char = bitname(typeobj)
 --- modulename: numerictypes, funcname: bitname
numerictypes.py(231):     name = obj.__name__
numerictypes.py(232):     base = ''
numerictypes.py(233):     char = ''
numerictypes.py(234):     try:
numerictypes.py(235):         if name[-1] == '_':
numerictypes.py(238):             newname = name
numerictypes.py(239):         info = typeinfo[english_upper(newname)]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(243):     except KeyError:     # bit-width name
numerictypes.py(244):         base, bits = _evalname(name)
 --- modulename: numerictypes, funcname: _evalname
numerictypes.py(217):     k = 0
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(221):         k += 1
numerictypes.py(218):     for ch in name:
numerictypes.py(219):         if ch in '0123456789':
numerictypes.py(220):             break
numerictypes.py(222):     try:
numerictypes.py(223):         bits = int(name[k:])
numerictypes.py(226):     base = name[:k]
numerictypes.py(227):     return base, bits
numerictypes.py(245):         char = base[0]
numerictypes.py(247):     if name == 'bool_':
numerictypes.py(250):     elif name == 'void':
numerictypes.py(253):     elif name == 'object_':
numerictypes.py(257):     elif name == 'datetime64':
numerictypes.py(259):     elif name == 'timedelta64':
numerictypes.py(262):     if sys.version_info[0] >= 3:
numerictypes.py(270):         if name == 'string_':
numerictypes.py(273):         elif name == 'unicode_':
numerictypes.py(277):     bytes = bits // 8
numerictypes.py(279):     if char != '' and bytes != 0:
numerictypes.py(280):         char = "%s%d" % (char, bytes)
numerictypes.py(282):     return base, bits, char
numerictypes.py(309):         if base[-3:] == 'int' or char[0] in 'ui':
numerictypes.py(311):         if base != '':
numerictypes.py(312):             myname = "%s%d" % (base, bit)
numerictypes.py(313):             if ((name != 'longdouble' and name != 'clongdouble') or
numerictypes.py(314):                    myname not in allTypes.keys()):
numerictypes.py(315):                 allTypes[myname] = typeobj
numerictypes.py(316):                 sctypeDict[myname] = typeobj
numerictypes.py(317):                 if base == 'complex':
numerictypes.py(318):                     na_name = '%s%d' % (english_capitalize(base), bit//2)
 --- modulename: numerictypes, funcname: english_capitalize
numerictypes.py(206):     if s:
numerictypes.py(207):         return english_upper(s[0]) + s[1:]
 --- modulename: numerictypes, funcname: english_upper
numerictypes.py(178):     uppered = s.translate(UPPER_TABLE)
numerictypes.py(179):     return uppered
numerictypes.py(325):                 sctypeNA[na_name] = typeobj
numerictypes.py(326):                 sctypeDict[na_name] = typeobj
numerictypes.py(327):                 sctypeNA[typeobj] = na_name
numerictypes.py(328):                 sctypeNA[typeinfo[a][0]] = na_name
numerictypes.py(329):         if char != '':
numerictypes.py(330):             sctypeDict[char] = typeobj
numerictypes.py(331):             sctypeNA[char] = na_name
numerictypes.py(302):     for a in typeinfo.keys():
numerictypes.py(338): def _add_integer_aliases():
numerictypes.py(369): _add_integer_aliases()
 --- modulename: numerictypes, funcname: _add_integer_aliases
numerictypes.py(339):     _ctypes = ['LONG', 'LONGLONG', 'INT', 'SHORT', 'BYTE']
numerictypes.py(340):     for ctype in _ctypes:
numerictypes.py(341):         val = typeinfo[ctype]
numerictypes.py(342):         bits = val[2]
numerictypes.py(343):         charname = 'i%d' % (bits//8,)
numerictypes.py(344):         ucharname = 'u%d' % (bits//8,)
numerictypes.py(345):         intname = 'int%d' % bits
numerictypes.py(346):         UIntname = 'UInt%d' % bits
numerictypes.py(347):         Intname = 'Int%d' % bits
numerictypes.py(348):         uval = typeinfo['U'+ctype]
numerictypes.py(349):         typeobj = val[-1]
numerictypes.py(350):         utypeobj = uval[-1]
numerictypes.py(351):         if intname not in allTypes.keys():
numerictypes.py(352):             uintname = 'uint%d' % bits
numerictypes.py(353):             allTypes[intname] = typeobj
numerictypes.py(354):             allTypes[uintname] = utypeobj
numerictypes.py(355):             sctypeDict[intname] = typeobj
numerictypes.py(356):             sctypeDict[uintname] = utypeobj
numerictypes.py(357):             sctypeDict[Intname] = typeobj
numerictypes.py(358):             sctypeDict[UIntname] = utypeobj
numerictypes.py(359):             sctypeDict[charname] = typeobj
numerictypes.py(360):             sctypeDict[ucharname] = utypeobj
numerictypes.py(361):             sctypeNA[Intname] = typeobj
numerictypes.py(362):             sctypeNA[UIntname] = utypeobj
numerictypes.py(363):             sctypeNA[charname] = typeobj
numerictypes.py(364):             sctypeNA[ucharname] = utypeobj
numerictypes.py(365):         sctypeNA[typeobj] = Intname
numerictypes.py(366):         sctypeNA[utypeobj] = UIntname
numerictypes.py(367):         sctypeNA[val[0]] = Intname
numerictypes.py(368):         sctypeNA[uval[0]] = UIntname
numerictypes.py(340):     for ctype in _ctypes:
numerictypes.py(341):         val = typeinfo[ctype]
numerictypes.py(342):         bits = val[2]
numerictypes.py(343):         charname = 'i%d' % (bits//8,)
numerictypes.py(344):         ucharname = 'u%d' % (bits//8,)
numerictypes.py(345):         intname = 'int%d' % bits
numerictypes.py(346):         UIntname = 'UInt%d' % bits
numerictypes.py(347):         Intname = 'Int%d' % bits
numerictypes.py(348):         uval = typeinfo['U'+ctype]
numerictypes.py(349):         typeobj = val[-1]
numerictypes.py(350):         utypeobj = uval[-1]
numerictypes.py(351):         if intname not in allTypes.keys():
numerictypes.py(365):         sctypeNA[typeobj] = Intname
numerictypes.py(366):         sctypeNA[utypeobj] = UIntname
numerictypes.py(367):         sctypeNA[val[0]] = Intname
numerictypes.py(368):         sctypeNA[uval[0]] = UIntname
numerictypes.py(340):     for ctype in _ctypes:
numerictypes.py(341):         val = typeinfo[ctype]
numerictypes.py(342):         bits = val[2]
numerictypes.py(343):         charname = 'i%d' % (bits//8,)
numerictypes.py(344):         ucharname = 'u%d' % (bits//8,)
numerictypes.py(345):         intname = 'int%d' % bits
numerictypes.py(346):         UIntname = 'UInt%d' % bits
numerictypes.py(347):         Intname = 'Int%d' % bits
numerictypes.py(348):         uval = typeinfo['U'+ctype]
numerictypes.py(349):         typeobj = val[-1]
numerictypes.py(350):         utypeobj = uval[-1]
numerictypes.py(351):         if intname not in allTypes.keys():
numerictypes.py(352):             uintname = 'uint%d' % bits
numerictypes.py(353):             allTypes[intname] = typeobj
numerictypes.py(354):             allTypes[uintname] = utypeobj
numerictypes.py(355):             sctypeDict[intname] = typeobj
numerictypes.py(356):             sctypeDict[uintname] = utypeobj
numerictypes.py(357):             sctypeDict[Intname] = typeobj
numerictypes.py(358):             sctypeDict[UIntname] = utypeobj
numerictypes.py(359):             sctypeDict[charname] = typeobj
numerictypes.py(360):             sctypeDict[ucharname] = utypeobj
numerictypes.py(361):             sctypeNA[Intname] = typeobj
numerictypes.py(362):             sctypeNA[UIntname] = utypeobj
numerictypes.py(363):             sctypeNA[charname] = typeobj
numerictypes.py(364):             sctypeNA[ucharname] = utypeobj
numerictypes.py(365):         sctypeNA[typeobj] = Intname
numerictypes.py(366):         sctypeNA[utypeobj] = UIntname
numerictypes.py(367):         sctypeNA[val[0]] = Intname
numerictypes.py(368):         sctypeNA[uval[0]] = UIntname
numerictypes.py(340):     for ctype in _ctypes:
numerictypes.py(341):         val = typeinfo[ctype]
numerictypes.py(342):         bits = val[2]
numerictypes.py(343):         charname = 'i%d' % (bits//8,)
numerictypes.py(344):         ucharname = 'u%d' % (bits//8,)
numerictypes.py(345):         intname = 'int%d' % bits
numerictypes.py(346):         UIntname = 'UInt%d' % bits
numerictypes.py(347):         Intname = 'Int%d' % bits
numerictypes.py(348):         uval = typeinfo['U'+ctype]
numerictypes.py(349):         typeobj = val[-1]
numerictypes.py(350):         utypeobj = uval[-1]
numerictypes.py(351):         if intname not in allTypes.keys():
numerictypes.py(352):             uintname = 'uint%d' % bits
numerictypes.py(353):             allTypes[intname] = typeobj
numerictypes.py(354):             allTypes[uintname] = utypeobj
numerictypes.py(355):             sctypeDict[intname] = typeobj
numerictypes.py(356):             sctypeDict[uintname] = utypeobj
numerictypes.py(357):             sctypeDict[Intname] = typeobj
numerictypes.py(358):             sctypeDict[UIntname] = utypeobj
numerictypes.py(359):             sctypeDict[charname] = typeobj
numerictypes.py(360):             sctypeDict[ucharname] = utypeobj
numerictypes.py(361):             sctypeNA[Intname] = typeobj
numerictypes.py(362):             sctypeNA[UIntname] = utypeobj
numerictypes.py(363):             sctypeNA[charname] = typeobj
numerictypes.py(364):             sctypeNA[ucharname] = utypeobj
numerictypes.py(365):         sctypeNA[typeobj] = Intname
numerictypes.py(366):         sctypeNA[utypeobj] = UIntname
numerictypes.py(367):         sctypeNA[val[0]] = Intname
numerictypes.py(368):         sctypeNA[uval[0]] = UIntname
numerictypes.py(340):     for ctype in _ctypes:
numerictypes.py(341):         val = typeinfo[ctype]
numerictypes.py(342):         bits = val[2]
numerictypes.py(343):         charname = 'i%d' % (bits//8,)
numerictypes.py(344):         ucharname = 'u%d' % (bits//8,)
numerictypes.py(345):         intname = 'int%d' % bits
numerictypes.py(346):         UIntname = 'UInt%d' % bits
numerictypes.py(347):         Intname = 'Int%d' % bits
numerictypes.py(348):         uval = typeinfo['U'+ctype]
numerictypes.py(349):         typeobj = val[-1]
numerictypes.py(350):         utypeobj = uval[-1]
numerictypes.py(351):         if intname not in allTypes.keys():
numerictypes.py(352):             uintname = 'uint%d' % bits
numerictypes.py(353):             allTypes[intname] = typeobj
numerictypes.py(354):             allTypes[uintname] = utypeobj
numerictypes.py(355):             sctypeDict[intname] = typeobj
numerictypes.py(356):             sctypeDict[uintname] = utypeobj
numerictypes.py(357):             sctypeDict[Intname] = typeobj
numerictypes.py(358):             sctypeDict[UIntname] = utypeobj
numerictypes.py(359):             sctypeDict[charname] = typeobj
numerictypes.py(360):             sctypeDict[ucharname] = utypeobj
numerictypes.py(361):             sctypeNA[Intname] = typeobj
numerictypes.py(362):             sctypeNA[UIntname] = utypeobj
numerictypes.py(363):             sctypeNA[charname] = typeobj
numerictypes.py(364):             sctypeNA[ucharname] = utypeobj
numerictypes.py(365):         sctypeNA[typeobj] = Intname
numerictypes.py(366):         sctypeNA[utypeobj] = UIntname
numerictypes.py(367):         sctypeNA[val[0]] = Intname
numerictypes.py(368):         sctypeNA[uval[0]] = UIntname
numerictypes.py(340):     for ctype in _ctypes:
numerictypes.py(372): void = allTypes['void']
numerictypes.py(373): generic = allTypes['generic']
numerictypes.py(379): def _set_up_aliases():
numerictypes.py(424): _set_up_aliases()
 --- modulename: numerictypes, funcname: _set_up_aliases
numerictypes.py(380):     type_pairs = [('complex_', 'cdouble'),
numerictypes.py(381):                   ('int0', 'intp'),
numerictypes.py(382):                   ('uint0', 'uintp'),
numerictypes.py(383):                   ('single', 'float'),
numerictypes.py(384):                   ('csingle', 'cfloat'),
numerictypes.py(385):                   ('singlecomplex', 'cfloat'),
numerictypes.py(386):                   ('float_', 'double'),
numerictypes.py(387):                   ('intc', 'int'),
numerictypes.py(388):                   ('uintc', 'uint'),
numerictypes.py(389):                   ('int_', 'long'),
numerictypes.py(390):                   ('uint', 'ulong'),
numerictypes.py(391):                   ('cfloat', 'cdouble'),
numerictypes.py(392):                   ('longfloat', 'longdouble'),
numerictypes.py(393):                   ('clongfloat', 'clongdouble'),
numerictypes.py(394):                   ('longcomplex', 'clongdouble'),
numerictypes.py(395):                   ('bool_', 'bool'),
numerictypes.py(396):                   ('unicode_', 'unicode'),
numerictypes.py(397):                   ('object_', 'object')]
numerictypes.py(398):     if sys.version_info[0] >= 3:
numerictypes.py(403):         type_pairs.extend([('str_', 'string'),
numerictypes.py(404):                            ('string_', 'string'),
numerictypes.py(405):                            ('bytes_', 'string')])
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(407):         allTypes[alias] = allTypes[t]
numerictypes.py(408):         sctypeDict[alias] = sctypeDict[t]
numerictypes.py(406):     for alias, t in type_pairs:
numerictypes.py(410):     to_remove = ['ulong', 'object', 'unicode', 'int', 'long', 'float',
numerictypes.py(411):                  'complex', 'bool', 'string', 'datetime', 'timedelta']
numerictypes.py(412):     if sys.version_info[0] >= 3:
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(422):         except KeyError:
numerictypes.py(423):             pass
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(419):         try:
numerictypes.py(420):             del allTypes[t]
numerictypes.py(421):             del sctypeDict[t]
numerictypes.py(418):     for t in to_remove:
numerictypes.py(427): _sctype2char_dict = {}
numerictypes.py(428): def _construct_char_code_lookup():
numerictypes.py(434): _construct_char_code_lookup()
 --- modulename: numerictypes, funcname: _construct_char_code_lookup
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(430):         tup = typeinfo[name]
numerictypes.py(431):         if isinstance(tup, tuple):
numerictypes.py(432):             if tup[0] not in ['p', 'P']:
numerictypes.py(433):                 _sctype2char_dict[tup[-1]] = tup[0]
numerictypes.py(429):     for name in typeinfo.keys():
numerictypes.py(437): sctypes = {'int': [],
numerictypes.py(438):            'uint':[],
numerictypes.py(439):            'float':[],
numerictypes.py(440):            'complex':[],
numerictypes.py(441):            'others':[bool, object, str, unicode, void]}
numerictypes.py(443): def _add_array_type(typename, bits):
numerictypes.py(451): def _set_array_types():
numerictypes.py(471): _set_array_types()
 --- modulename: numerictypes, funcname: _set_array_types
numerictypes.py(452):     ibytes = [1, 2, 4, 8, 16, 32, 64]
numerictypes.py(453):     fbytes = [2, 4, 8, 10, 12, 16, 32, 64]
numerictypes.py(454):     for bytes in ibytes:
numerictypes.py(455):         bits = 8*bytes
numerictypes.py(456):         _add_array_type('int', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(457):         _add_array_type('uint', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(454):     for bytes in ibytes:
numerictypes.py(455):         bits = 8*bytes
numerictypes.py(456):         _add_array_type('int', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(457):         _add_array_type('uint', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(454):     for bytes in ibytes:
numerictypes.py(455):         bits = 8*bytes
numerictypes.py(456):         _add_array_type('int', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(457):         _add_array_type('uint', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(454):     for bytes in ibytes:
numerictypes.py(455):         bits = 8*bytes
numerictypes.py(456):         _add_array_type('int', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(457):         _add_array_type('uint', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(454):     for bytes in ibytes:
numerictypes.py(455):         bits = 8*bytes
numerictypes.py(456):         _add_array_type('int', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(457):         _add_array_type('uint', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(454):     for bytes in ibytes:
numerictypes.py(455):         bits = 8*bytes
numerictypes.py(456):         _add_array_type('int', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(457):         _add_array_type('uint', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(454):     for bytes in ibytes:
numerictypes.py(455):         bits = 8*bytes
numerictypes.py(456):         _add_array_type('int', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(457):         _add_array_type('uint', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(454):     for bytes in ibytes:
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(459):         bits = 8*bytes
numerictypes.py(460):         _add_array_type('float', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(461):         _add_array_type('complex', 2*bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(459):         bits = 8*bytes
numerictypes.py(460):         _add_array_type('float', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(461):         _add_array_type('complex', 2*bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(459):         bits = 8*bytes
numerictypes.py(460):         _add_array_type('float', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(461):         _add_array_type('complex', 2*bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(459):         bits = 8*bytes
numerictypes.py(460):         _add_array_type('float', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(461):         _add_array_type('complex', 2*bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(459):         bits = 8*bytes
numerictypes.py(460):         _add_array_type('float', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(461):         _add_array_type('complex', 2*bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(459):         bits = 8*bytes
numerictypes.py(460):         _add_array_type('float', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(461):         _add_array_type('complex', 2*bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(449):         sctypes[typename].append(t)
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(459):         bits = 8*bytes
numerictypes.py(460):         _add_array_type('float', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(461):         _add_array_type('complex', 2*bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(459):         bits = 8*bytes
numerictypes.py(460):         _add_array_type('float', bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(461):         _add_array_type('complex', 2*bits)
 --- modulename: numerictypes, funcname: _add_array_type
numerictypes.py(444):     try:
numerictypes.py(445):         t = allTypes['%s%d' % (typename, bits)]
numerictypes.py(446):     except KeyError:
numerictypes.py(447):         pass
numerictypes.py(458):     for bytes in fbytes:
numerictypes.py(462):     _gi = dtype('p')
numerictypes.py(463):     if _gi.type not in sctypes['int']:
numerictypes.py(474): genericTypeRank = ['bool', 'int8', 'uint8', 'int16', 'uint16',
numerictypes.py(475):                    'int32', 'uint32', 'int64', 'uint64', 'int128',
numerictypes.py(476):                    'uint128', 'float16',
numerictypes.py(477):                    'float32', 'float64', 'float80', 'float96', 'float128',
numerictypes.py(478):                    'float256',
numerictypes.py(479):                    'complex32', 'complex64', 'complex128', 'complex160',
numerictypes.py(480):                    'complex192', 'complex256', 'complex512', 'object']
numerictypes.py(482): def maximum_sctype(t):
numerictypes.py(531): try:
numerictypes.py(532):     buffer_type = _types.BufferType
numerictypes.py(537): _python_types = {int: 'int_',
numerictypes.py(538):                  float: 'float_',
numerictypes.py(539):                  complex: 'complex_',
numerictypes.py(540):                  bool: 'bool_',
numerictypes.py(541):                  bytes: 'bytes_',
numerictypes.py(542):                  unicode: 'unicode_',
numerictypes.py(543):                  buffer_type: 'void',
numerictypes.py(546): if sys.version_info[0] >= 3:
numerictypes.py(553):     def _python_type(t):
numerictypes.py(559): def issctype(rep):
numerictypes.py(603): def obj2sctype(rep, default=None):
numerictypes.py(660): def issubclass_(arg1, arg2):
numerictypes.py(698): def issubsctype(arg1, arg2):
numerictypes.py(728): def issubdtype(arg1, arg2):
numerictypes.py(765): class _typedict(dict):
 --- modulename: numerictypes, funcname: _typedict
numerictypes.py(765): class _typedict(dict):
numerictypes.py(772):     """
numerictypes.py(774):     def __getitem__(self, obj):
numerictypes.py(777): nbytes = _typedict()
numerictypes.py(778): _alignment = _typedict()
numerictypes.py(779): _maxvals = _typedict()
numerictypes.py(780): _minvals = _typedict()
numerictypes.py(781): def _construct_lookups():
numerictypes.py(795): _construct_lookups()
 --- modulename: numerictypes, funcname: _construct_lookups
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(789):             _maxvals[obj] = val[4]
numerictypes.py(790):             _minvals[obj] = val[5]
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(784):             continue
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(783):         if not isinstance(val, tuple):
numerictypes.py(785):         obj = val[-1]
numerictypes.py(786):         nbytes[obj] = val[2] // 8
numerictypes.py(787):         _alignment[obj] = val[3]
numerictypes.py(788):         if (len(val) > 5):
numerictypes.py(792):             _maxvals[obj] = None
numerictypes.py(793):             _minvals[obj] = None
numerictypes.py(782):     for name, val in typeinfo.items():
numerictypes.py(797): def sctype2char(sctype):
numerictypes.py(848): cast = _typedict()
numerictypes.py(849): try:
numerictypes.py(850):     ScalarType = [_types.IntType, _types.FloatType, _types.ComplexType,
numerictypes.py(851):                   _types.LongType, _types.BooleanType,
numerictypes.py(852):                    _types.StringType, _types.UnicodeType, _types.BufferType]
numerictypes.py(857): ScalarType.extend(_sctype2char_dict.keys())
numerictypes.py(858): ScalarType = tuple(ScalarType)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(860):     cast[key] = lambda x, k=key: array(x, copy=False).astype(k)
numerictypes.py(859): for key in _sctype2char_dict.keys():
numerictypes.py(863): _typestr = _typedict()
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(866):         _typestr[key] = _sctype2char_dict[key]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(866):         _typestr[key] = _sctype2char_dict[key]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(866):         _typestr[key] = _sctype2char_dict[key]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(865):     if issubclass(key, allTypes['flexible']):
numerictypes.py(868):         _typestr[key] = empty((1,), key).dtype.str[1:]
numerictypes.py(864): for key in _sctype2char_dict.keys():
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(872):     if val not in sctypeDict:
numerictypes.py(871): for key, val in _typestr.items():
numerictypes.py(877): if sys.version_info[0] >= 3:
numerictypes.py(881):     _toadd = ['int', 'float', 'complex', 'bool', 'object', 'string',
numerictypes.py(882):               ('str', allTypes['string_']),
numerictypes.py(883):               'unicode', 'object', ('a', allTypes['string_'])]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(889):         sctypeDict[name] = allTypes['%s_' % name]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(889):         sctypeDict[name] = allTypes['%s_' % name]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(889):         sctypeDict[name] = allTypes['%s_' % name]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(889):         sctypeDict[name] = allTypes['%s_' % name]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(889):         sctypeDict[name] = allTypes['%s_' % name]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(889):         sctypeDict[name] = allTypes['%s_' % name]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(887):         sctypeDict[name[0]] = name[1]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(889):         sctypeDict[name] = allTypes['%s_' % name]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(889):         sctypeDict[name] = allTypes['%s_' % name]
numerictypes.py(885): for name in _toadd:
numerictypes.py(886):     if isinstance(name, tuple):
numerictypes.py(887):         sctypeDict[name[0]] = name[1]
numerictypes.py(885): for name in _toadd:
numerictypes.py(891): del _toadd, name
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(895):     globals()[key] = allTypes[key]
numerictypes.py(896):     __all__.append(key)
numerictypes.py(894): for key in allTypes:
numerictypes.py(898): del key
numerictypes.py(900): typecodes = {'Character':'c',
numerictypes.py(901):              'Integer':'bhilqp',
numerictypes.py(902):              'UnsignedInteger':'BHILQP',
numerictypes.py(903):              'Float':'efdg',
numerictypes.py(904):              'Complex':'FDG',
numerictypes.py(905):              'AllInteger':'bBhHiIlLqQpP',
numerictypes.py(906):              'AllFloat':'efdgFDG',
numerictypes.py(907):              'Datetime': 'Mm',
numerictypes.py(908):              'All':'?bhilqpBHILQPefdgFDGSUVOMm'}
numerictypes.py(911): typeDict = sctypeDict
numerictypes.py(912): typeNA = sctypeNA
numerictypes.py(925): _kind_list = ['b', 'u', 'i', 'f', 'c', 'S', 'U', 'V', 'O', 'M', 'm']
numerictypes.py(927): __test_types = '?'+typecodes['AllInteger'][:-2]+typecodes['AllFloat']+'O'
numerictypes.py(928): __len_test_types = len(__test_types)
numerictypes.py(932): def _find_common_coerce(a, b):
numerictypes.py(942): def _can_coerce_all(dtypelist, start=0):
numerictypes.py(957): def _register_types():
numerictypes.py(962): _register_types()
 --- modulename: numerictypes, funcname: _register_types
numerictypes.py(958):     numbers.Integral.register(integer)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
numerictypes.py(959):     numbers.Complex.register(inexact)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(180):             if issubclass(subclass, scls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(180):             if issubclass(subclass, scls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(180):             if issubclass(subclass, scls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
numerictypes.py(960):     numbers.Real.register(floating)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(180):             if issubclass(subclass, scls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(180):             if issubclass(subclass, scls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
numerictypes.py(964): def find_common_type(array_types, scalar_types):
_internal.py(17): if (sys.byteorder == 'little'):
_internal.py(18):     _nbo = asbytes('<')
_internal.py(22): def _makenames_list(adict, align):
_internal.py(55): def _usefields(adict, align):
_internal.py(87): def _array_descr(descriptor):
_internal.py(131): def _reconstruct(subtype, shape, dtype):
_internal.py(137): format_re = re.compile(asbytes(
_internal.py(138):                            r'(?P<order1>[<>|=]?)'
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(553):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(555):                         name = ""
sre_parse.py(556):                         while 1:
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(561):                                 break
sre_parse.py(563):                         group = 1
sre_parse.py(564):                         if not name:
sre_parse.py(566):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
sre_parse.py(229):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
 --- modulename: sre_parse, funcname: isdigit
sre_parse.py(225):     return "0" <= char <= "9"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(234):     return True
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(78):             ogid = self.groupdict.get(name, None)
sre_parse.py(79):             if ogid is not None:
sre_parse.py(82):             self.groupdict[name] = gid
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(553):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(555):                         name = ""
sre_parse.py(556):                         while 1:
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(561):                                 break
sre_parse.py(563):                         group = 1
sre_parse.py(564):                         if not name:
sre_parse.py(566):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
sre_parse.py(229):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(234):     return True
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(78):             ogid = self.groupdict.get(name, None)
sre_parse.py(79):             if ogid is not None:
sre_parse.py(82):             self.groupdict[name] = gid
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(481):                 subpatternappend(set[0]) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(481):                 subpatternappend(set[0]) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(553):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(555):                         name = ""
sre_parse.py(556):                         while 1:
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(561):                                 break
sre_parse.py(563):                         group = 1
sre_parse.py(564):                         if not name:
sre_parse.py(566):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
sre_parse.py(229):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
 --- modulename: sre_parse, funcname: isdigit
sre_parse.py(225):     return "0" <= char <= "9"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(234):     return True
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(78):             ogid = self.groupdict.get(name, None)
sre_parse.py(79):             if ogid is not None:
sre_parse.py(82):             self.groupdict[name] = gid
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(553):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(555):                         name = ""
sre_parse.py(556):                         while 1:
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(562):                             name = name + char
sre_parse.py(557):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(558):                             if char is None:
sre_parse.py(560):                             if char == ">":
sre_parse.py(561):                                 break
sre_parse.py(563):                         group = 1
sre_parse.py(564):                         if not name:
sre_parse.py(566):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
sre_parse.py(229):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(232):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(222):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(231):     for char in name[1:]:
sre_parse.py(234):     return True
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(78):             ogid = self.groupdict.get(name, None)
sre_parse.py(79):             if ogid is not None:
sre_parse.py(82):             self.groupdict[name] = gid
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(549):                 group = 0
sre_parse.py(551):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(600):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(602):                     group = 2
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(670):                     group = None
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(439):         return # not worth it
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(337):             return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(320):             runs = None
sre_compile.py(321):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(342):     if len(charmap) == 256:
sre_compile.py(343):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(412):     s = bytes(bits).translate(_BITS_TRANS)[::-1]
sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(344):         out.append((CHARSET, data))
sre_compile.py(345):         out += tail
sre_compile.py(346):         return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(242):             code.extend(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(337):             return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(320):             runs = None
sre_compile.py(321):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(342):     if len(charmap) == 256:
sre_compile.py(343):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(412):     s = bytes(bits).translate(_BITS_TRANS)[::-1]
sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(344):         out.append((CHARSET, data))
sre_compile.py(345):         out += tail
sre_compile.py(346):         return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(242):             code.extend(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(136):                 emit(OPCODES[REPEAT])
sre_compile.py(137):                 skip = _len(code); emit(0)
sre_compile.py(138):                 emit(av[0])
sre_compile.py(139):                 emit(av[1])
sre_compile.py(140):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(272):                         charmap[av] = 1
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(320):             runs = None
sre_compile.py(321):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(342):     if len(charmap) == 256:
sre_compile.py(343):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(412):     s = bytes(bits).translate(_BITS_TRANS)[::-1]
sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(344):         out.append((CHARSET, data))
sre_compile.py(345):         out += tail
sre_compile.py(346):         return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(242):             code.extend(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(141):                 code[skip] = _len(code) - skip
sre_compile.py(142):                 if op is MAX_REPEAT:
sre_compile.py(143):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(590):         indexgroup[i] = k
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(590):         indexgroup[i] = k
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(590):         indexgroup[i] = k
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(590):         indexgroup[i] = k
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
_internal.py(142): sep_re = re.compile(asbytes(r'\s*,\s*'))
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
sre_compile.py(481):             elif op is BRANCH:
sre_compile.py(494):             elif op is IN:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(522):         emit(0)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
_internal.py(143): space_re = re.compile(asbytes(r'\s+$'))
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(695):             subpattern.append((AT, AT_END))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(183):             elif op == SUCCESS:
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(460):                 break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(463):             op, av = pattern.data[0]
sre_compile.py(464):             if op is SUBPATTERN and av[1]:
sre_compile.py(481):             elif op is BRANCH:
sre_compile.py(494):             elif op is IN:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(522):         emit(0)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(155):         elif op in SUCCESS_CODES:
sre_compile.py(157):         elif op in ASSERT_CODES:
sre_compile.py(170):         elif op is CALL:
sre_compile.py(176):         elif op is AT:
sre_compile.py(177):             emit(OPCODES[op])
sre_compile.py(178):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(180):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(182):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(184):             emit(ATCODES[av])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
_internal.py(147): _convorder = {asbytes('='): _nbo}
_internal.py(149): def _commastring(astr):
_internal.py(196): def _getintp_ctype():
_internal.py(211): _getintp_ctype.cache = None
_internal.py(215): class _missing_ctypes(object):
 --- modulename: _internal, funcname: _missing_ctypes
_internal.py(215): class _missing_ctypes(object):
_internal.py(216):     def cast(self, num, obj):
_internal.py(219):     def c_void_p(self, num):
_internal.py(222): class _ctypes(object):
 --- modulename: _internal, funcname: _ctypes
_internal.py(222): class _ctypes(object):
_internal.py(223):     def __init__(self, array, ptr=None):
_internal.py(235):     def data_as(self, obj):
_internal.py(238):     def shape_as(self, obj):
_internal.py(243):     def strides_as(self, obj):
_internal.py(248):     def get_data(self):
_internal.py(251):     def get_shape(self):
_internal.py(256):     def get_strides(self):
_internal.py(261):     def get_as_parameter(self):
_internal.py(264):     data = property(get_data, None, doc="c-types data")
_internal.py(265):     shape = property(get_shape, None, doc="c-types shape")
_internal.py(266):     strides = property(get_strides, None, doc="c-types strides")
_internal.py(267):     _as_parameter_ = property(get_as_parameter, None, doc="_as parameter_")
_internal.py(273): def _newnames(datatype, order):
_internal.py(287): def _copy_fields(ary):
_internal.py(305): def _getfield_is_safe(oldtype, newtype, offset):
_internal.py(337): def _view_is_safe(oldtype, newtype):
_internal.py(369): _pep3118_native_map = {
_internal.py(370):     '?': '?',
_internal.py(371):     'b': 'b',
_internal.py(372):     'B': 'B',
_internal.py(373):     'h': 'h',
_internal.py(374):     'H': 'H',
_internal.py(375):     'i': 'i',
_internal.py(376):     'I': 'I',
_internal.py(377):     'l': 'l',
_internal.py(378):     'L': 'L',
_internal.py(379):     'q': 'q',
_internal.py(380):     'Q': 'Q',
_internal.py(381):     'e': 'e',
_internal.py(382):     'f': 'f',
_internal.py(383):     'd': 'd',
_internal.py(384):     'g': 'g',
_internal.py(385):     'Zf': 'F',
_internal.py(386):     'Zd': 'D',
_internal.py(387):     'Zg': 'G',
_internal.py(388):     's': 'S',
_internal.py(389):     'w': 'U',
_internal.py(390):     'O': 'O',
_internal.py(391):     'x': 'V',  # padding
_internal.py(393): _pep3118_native_typechars = ''.join(_pep3118_native_map.keys())
_internal.py(395): _pep3118_standard_map = {
_internal.py(396):     '?': '?',
_internal.py(397):     'b': 'b',
_internal.py(398):     'B': 'B',
_internal.py(399):     'h': 'i2',
_internal.py(400):     'H': 'u2',
_internal.py(401):     'i': 'i4',
_internal.py(402):     'I': 'u4',
_internal.py(403):     'l': 'i4',
_internal.py(404):     'L': 'u4',
_internal.py(405):     'q': 'i8',
_internal.py(406):     'Q': 'u8',
_internal.py(407):     'e': 'f2',
_internal.py(408):     'f': 'f',
_internal.py(409):     'd': 'd',
_internal.py(410):     'Zf': 'F',
_internal.py(411):     'Zd': 'D',
_internal.py(412):     's': 'S',
_internal.py(413):     'w': 'U',
_internal.py(414):     'O': 'O',
_internal.py(415):     'x': 'V',  # padding
_internal.py(417): _pep3118_standard_typechars = ''.join(_pep3118_standard_map.keys())
_internal.py(419): def _dtype_from_pep3118(spec, byteorder='@', is_subdtype=False):
_internal.py(583): def _add_trailing_padding(value, padding):
_internal.py(614): def _prod(a):
_internal.py(620): def _gcd(a, b):
__init__.py(23): from . import numerictypes as nt
__init__.py(24): multiarray.set_typeDict(nt.sctypeDict)
__init__.py(25): from . import numeric
 --- modulename: numeric, funcname: <module>
numeric.py(1): from __future__ import division, absolute_import, print_function
numeric.py(3): import sys
numeric.py(4): import warnings
numeric.py(5): import collections
numeric.py(6): from numpy.core import multiarray
numeric.py(7): from . import umath
numeric.py(8): from .umath import (invert, sin, UFUNC_BUFSIZE_DEFAULT, ERR_IGNORE,
numeric.py(11): from . import numerictypes
numeric.py(12): from .numerictypes import longlong, intc, int_, float_, complex_, bool_
numeric.py(14): if sys.version_info[0] >= 3:
numeric.py(18):     import cPickle as pickle
numeric.py(20): loads = pickle.loads
numeric.py(24):     'newaxis', 'ndarray', 'flatiter', 'nditer', 'nested_iters', 'ufunc',
numeric.py(25):     'arange', 'array', 'zeros', 'count_nonzero', 'empty', 'broadcast',
numeric.py(26):     'dtype', 'fromstring', 'fromfile', 'frombuffer', 'int_asbuffer',
numeric.py(27):     'where', 'argwhere', 'copyto', 'concatenate', 'fastCopyAndTranspose',
numeric.py(28):     'lexsort', 'set_numeric_ops', 'can_cast', 'promote_types',
numeric.py(29):     'min_scalar_type', 'result_type', 'asarray', 'asanyarray',
numeric.py(30):     'ascontiguousarray', 'asfortranarray', 'isfortran', 'empty_like',
numeric.py(31):     'zeros_like', 'ones_like', 'correlate', 'convolve', 'inner', 'dot',
numeric.py(32):     'einsum', 'outer', 'vdot', 'alterdot', 'restoredot', 'roll',
numeric.py(33):     'rollaxis', 'cross', 'tensordot', 'array2string', 'get_printoptions',
numeric.py(34):     'set_printoptions', 'array_repr', 'array_str', 'set_string_function',
numeric.py(35):     'little_endian', 'require', 'fromiter', 'array_equal', 'array_equiv',
numeric.py(36):     'indices', 'fromfunction', 'isclose', 'load', 'loads', 'isscalar',
numeric.py(37):     'binary_repr', 'base_repr', 'ones', 'identity', 'allclose',
numeric.py(38):     'compare_chararrays', 'putmask', 'seterr', 'geterr', 'setbufsize',
numeric.py(39):     'getbufsize', 'seterrcall', 'geterrcall', 'errstate', 'flatnonzero',
numeric.py(40):     'Inf', 'inf', 'infty', 'Infinity', 'nan', 'NaN', 'False_', 'True_',
numeric.py(41):     'bitwise_not', 'CLIP', 'RAISE', 'WRAP', 'MAXDIMS', 'BUFSIZE',
numeric.py(42):     'ALLOW_THREADS', 'ComplexWarning', 'may_share_memory', 'full',
numeric.py(43):     'full_like', 'matmul',
numeric.py(46): if sys.version_info[0] < 3:
numeric.py(47):     __all__.extend(['getbuffer', 'newbuffer'])
numeric.py(50): class ComplexWarning(RuntimeWarning):
 --- modulename: numeric, funcname: ComplexWarning
numeric.py(50): class ComplexWarning(RuntimeWarning):
numeric.py(57):     """
numeric.py(58):     pass
numeric.py(60): bitwise_not = invert
numeric.py(62): CLIP = multiarray.CLIP
numeric.py(63): WRAP = multiarray.WRAP
numeric.py(64): RAISE = multiarray.RAISE
numeric.py(65): MAXDIMS = multiarray.MAXDIMS
numeric.py(66): ALLOW_THREADS = multiarray.ALLOW_THREADS
numeric.py(67): BUFSIZE = multiarray.BUFSIZE
numeric.py(69): ndarray = multiarray.ndarray
numeric.py(70): flatiter = multiarray.flatiter
numeric.py(71): nditer = multiarray.nditer
numeric.py(72): nested_iters = multiarray.nested_iters
numeric.py(73): broadcast = multiarray.broadcast
numeric.py(74): dtype = multiarray.dtype
numeric.py(75): copyto = multiarray.copyto
numeric.py(76): ufunc = type(sin)
numeric.py(79): def zeros_like(a, dtype=None, order='K', subok=True):
numeric.py(141): def ones(shape, dtype=None, order='C'):
numeric.py(187): def ones_like(a, dtype=None, order='K', subok=True):
numeric.py(247): def full(shape, fill_value, dtype=None, order='C'):
numeric.py(298): def full_like(a, fill_value, dtype=None, order='K', subok=True):
numeric.py(358): def extend_all(module):
numeric.py(370): newaxis = None
numeric.py(373): arange = multiarray.arange
numeric.py(374): array = multiarray.array
numeric.py(375): zeros = multiarray.zeros
numeric.py(376): count_nonzero = multiarray.count_nonzero
numeric.py(377): empty = multiarray.empty
numeric.py(378): empty_like = multiarray.empty_like
numeric.py(379): fromstring = multiarray.fromstring
numeric.py(380): fromiter = multiarray.fromiter
numeric.py(381): fromfile = multiarray.fromfile
numeric.py(382): frombuffer = multiarray.frombuffer
numeric.py(383): may_share_memory = multiarray.may_share_memory
numeric.py(384): if sys.version_info[0] < 3:
numeric.py(385):     newbuffer = multiarray.newbuffer
numeric.py(386):     getbuffer = multiarray.getbuffer
numeric.py(387): int_asbuffer = multiarray.int_asbuffer
numeric.py(388): where = multiarray.where
numeric.py(389): concatenate = multiarray.concatenate
numeric.py(390): fastCopyAndTranspose = multiarray._fastCopyAndTranspose
numeric.py(391): set_numeric_ops = multiarray.set_numeric_ops
numeric.py(392): can_cast = multiarray.can_cast
numeric.py(393): promote_types = multiarray.promote_types
numeric.py(394): min_scalar_type = multiarray.min_scalar_type
numeric.py(395): result_type = multiarray.result_type
numeric.py(396): lexsort = multiarray.lexsort
numeric.py(397): compare_chararrays = multiarray.compare_chararrays
numeric.py(398): putmask = multiarray.putmask
numeric.py(399): einsum = multiarray.einsum
numeric.py(400): dot = multiarray.dot
numeric.py(401): inner = multiarray.inner
numeric.py(402): vdot = multiarray.vdot
numeric.py(403): matmul = multiarray.matmul
numeric.py(406): def asarray(a, dtype=None, order=None):
numeric.py(476): def asanyarray(a, dtype=None, order=None):
numeric.py(527): def ascontiguousarray(a, dtype=None):
numeric.py(563): def asfortranarray(a, dtype=None):
numeric.py(599): def require(a, dtype=None, requirements=None):
numeric.py(694): def isfortran(a):
numeric.py(755): def argwhere(a):
numeric.py(795): def flatnonzero(a):
numeric.py(834): _mode_from_name_dict = {'v': 0,
numeric.py(835):                         's': 1,
numeric.py(836):                         'f': 2}
numeric.py(838): def _mode_from_name(mode):
numeric.py(843): def correlate(a, v, mode='valid'):
numeric.py(910): def convolve(a,v,mode='full'):
numeric.py(1007): def outer(a, b, out=None):
numeric.py(1088): def alterdot():
numeric.py(1118): def restoredot():
numeric.py(1142): def tensordot(a, b, axes=2):
numeric.py(1327): def roll(a, shift, axis=None):
numeric.py(1396): def rollaxis(a, axis, start=0):
numeric.py(1456): def _move_axis_to_0(a, axis):
numeric.py(1459): def cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None):
numeric.py(1660): from .arrayprint import array2string, get_printoptions, set_printoptions
 --- modulename: arrayprint, funcname: <module>
arrayprint.py(5): """
arrayprint.py(6): from __future__ import division, absolute_import, print_function
arrayprint.py(8): __all__ = ["array2string", "set_printoptions", "get_printoptions"]
arrayprint.py(9): __docformat__ = 'restructuredtext'
arrayprint.py(18): import sys
arrayprint.py(19): from functools import reduce
 --- modulename: functools, funcname: <module>
functools.py(2): """
functools.py(10): from _functools import partial, reduce
functools.py(15): WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__doc__')
functools.py(16): WRAPPER_UPDATES = ('__dict__',)
functools.py(19):                    assigned = WRAPPER_ASSIGNMENTS,
functools.py(20):                    updated = WRAPPER_UPDATES):
functools.py(40):           assigned = WRAPPER_ASSIGNMENTS,
functools.py(41):           updated = WRAPPER_UPDATES):
functools.py(53): def total_ordering(cls):
functools.py(80): def cmp_to_key(mycmp):
arrayprint.py(20): from . import numerictypes as _nt
arrayprint.py(21): from .umath import maximum, minimum, absolute, not_equal, isnan, isinf
arrayprint.py(22): from .multiarray import (array, format_longfloat, datetime_as_string,
arrayprint.py(24): from .fromnumeric import ravel
 --- modulename: fromnumeric, funcname: <module>
fromnumeric.py(3): """
fromnumeric.py(4): from __future__ import division, absolute_import, print_function
fromnumeric.py(6): import types
fromnumeric.py(7): import warnings
fromnumeric.py(9): import numpy as np
fromnumeric.py(10): from .. import VisibleDeprecationWarning
fromnumeric.py(11): from . import multiarray as mu
fromnumeric.py(12): from . import umath as um
fromnumeric.py(13): from . import numerictypes as nt
fromnumeric.py(14): from .numeric import asarray, array, asanyarray, concatenate
fromnumeric.py(15): from . import _methods
 --- modulename: _methods, funcname: <module>
_methods.py(5): """
_methods.py(6): from __future__ import division, absolute_import, print_function
_methods.py(8): import warnings
_methods.py(10): from numpy.core import multiarray as mu
_methods.py(11): from numpy.core import umath as um
_methods.py(12): from numpy.core.numeric import asanyarray
_methods.py(13): from numpy.core import numerictypes as nt
_methods.py(16): umr_maximum = um.maximum.reduce
_methods.py(17): umr_minimum = um.minimum.reduce
_methods.py(18): umr_sum = um.add.reduce
_methods.py(19): umr_prod = um.multiply.reduce
_methods.py(20): umr_any = um.logical_or.reduce
_methods.py(21): umr_all = um.logical_and.reduce
_methods.py(25): def _amax(a, axis=None, out=None, keepdims=False):
_methods.py(28): def _amin(a, axis=None, out=None, keepdims=False):
_methods.py(31): def _sum(a, axis=None, dtype=None, out=None, keepdims=False):
_methods.py(34): def _prod(a, axis=None, dtype=None, out=None, keepdims=False):
_methods.py(37): def _any(a, axis=None, dtype=None, out=None, keepdims=False):
_methods.py(40): def _all(a, axis=None, dtype=None, out=None, keepdims=False):
_methods.py(43): def _count_reduce_items(arr, axis):
_methods.py(53): def _mean(a, axis=None, dtype=None, out=None, keepdims=False):
_methods.py(76): def _var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
_methods.py(122): def _std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
fromnumeric.py(18): _dt_ = nt.sctype2char
fromnumeric.py(23):     'alen', 'all', 'alltrue', 'amax', 'amin', 'any', 'argmax',
fromnumeric.py(24):     'argmin', 'argpartition', 'argsort', 'around', 'choose', 'clip',
fromnumeric.py(25):     'compress', 'cumprod', 'cumproduct', 'cumsum', 'diagonal', 'mean',
fromnumeric.py(26):     'ndim', 'nonzero', 'partition', 'prod', 'product', 'ptp', 'put',
fromnumeric.py(27):     'rank', 'ravel', 'repeat', 'reshape', 'resize', 'round_',
fromnumeric.py(28):     'searchsorted', 'shape', 'size', 'sometrue', 'sort', 'squeeze',
fromnumeric.py(29):     'std', 'sum', 'swapaxes', 'take', 'trace', 'transpose', 'var',
fromnumeric.py(33): try:
fromnumeric.py(34):     _gentype = types.GeneratorType
fromnumeric.py(39): _sum_ = sum
fromnumeric.py(43): def _wrapit(obj, method, *args, **kwds):
fromnumeric.py(56): def take(a, indices, axis=None, out=None, mode='raise'):
fromnumeric.py(128): def reshape(a, newshape, order='C'):
fromnumeric.py(228): def choose(a, choices, out=None, mode='raise'):
fromnumeric.py(354): def repeat(a, repeats, axis=None):
fromnumeric.py(400): def put(a, ind, v, mode='raise'):
fromnumeric.py(451): def swapaxes(a, axis1, axis2):
fromnumeric.py(501): def transpose(a, axes=None):
fromnumeric.py(554): def partition(a, kth, axis=-1, kind='introselect', order=None):
fromnumeric.py(642): def argpartition(a, kth, axis=-1, kind='introselect', order=None):
fromnumeric.py(712): def sort(a, axis=-1, kind='quicksort', order=None):
fromnumeric.py(823): def argsort(a, axis=-1, kind='quicksort', order=None):
fromnumeric.py(911): def argmax(a, axis=None, out=None):
fromnumeric.py(971): def argmin(a, axis=None, out=None):
fromnumeric.py(1031): def searchsorted(a, v, side='left', sorter=None):
fromnumeric.py(1091): def resize(a, new_shape):
fromnumeric.py(1156): def squeeze(a, axis=None):
fromnumeric.py(1201): def diagonal(a, offset=0, axis1=0, axis2=1):
fromnumeric.py(1314): def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
fromnumeric.py(1373): def ravel(a, order='C'):
fromnumeric.py(1480): def nonzero(a):
fromnumeric.py(1564): def shape(a):
fromnumeric.py(1609): def compress(condition, a, axis=None, out=None):
fromnumeric.py(1676): def clip(a, a_min, a_max, out=None):
fromnumeric.py(1733): def sum(a, axis=None, dtype=None, out=None, keepdims=False):
fromnumeric.py(1834): def product(a, axis=None, dtype=None, out=None, keepdims=False):
fromnumeric.py(1847): def sometrue(a, axis=None, out=None, keepdims=False):
fromnumeric.py(1866): def alltrue(a, axis=None, out=None, keepdims=False):
fromnumeric.py(1883): def any(a, axis=None, out=None, keepdims=False):
fromnumeric.py(1964): def all(a, axis=None, out=None, keepdims=False):
fromnumeric.py(2038): def cumsum(a, axis=None, dtype=None, out=None):
fromnumeric.py(2109): def cumproduct(a, axis=None, dtype=None, out=None):
fromnumeric.py(2126): def ptp(a, axis=None, out=None):
fromnumeric.py(2171): def amax(a, axis=None, out=None, keepdims=False):
fromnumeric.py(2262): def amin(a, axis=None, out=None, keepdims=False):
fromnumeric.py(2353): def alen(a):
fromnumeric.py(2386): def prod(a, axis=None, dtype=None, out=None, keepdims=False):
fromnumeric.py(2488): def cumprod(a, axis=None, dtype=None, out=None):
fromnumeric.py(2555): def ndim(a):
fromnumeric.py(2592): def rank(a):
fromnumeric.py(2648): def size(a, axis=None):
fromnumeric.py(2694): def around(a, decimals=0, out=None):
fromnumeric.py(2767): def round_(a, decimals=0, out=None):
fromnumeric.py(2785): def mean(a, axis=None, dtype=None, out=None, keepdims=False):
fromnumeric.py(2877): def std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
fromnumeric.py(2984): def var(a, axis=None, dtype=None, out=None, ddof=0,
fromnumeric.py(2985):         keepdims=False):
arrayprint.py(25): from .numeric import asarray
arrayprint.py(27): if sys.version_info[0] >= 3:
arrayprint.py(31):     _MAXINT = sys.maxint
arrayprint.py(32):     _MININT = -sys.maxint - 1
arrayprint.py(34): def product(x, y):
arrayprint.py(37): _summaryEdgeItems = 3     # repr N leading and trailing items of each dimension
arrayprint.py(38): _summaryThreshold = 1000  # total items > triggers array summarization
arrayprint.py(40): _float_output_precision = 8
arrayprint.py(41): _float_output_suppress_small = False
arrayprint.py(42): _line_width = 75
arrayprint.py(43): _nan_str = 'nan'
arrayprint.py(44): _inf_str = 'inf'
arrayprint.py(45): _formatter = None  # formatting function for array elements
arrayprint.py(48): def set_printoptions(precision=None, threshold=None, edgeitems=None,
arrayprint.py(49):                      linewidth=None, suppress=None,
arrayprint.py(50):                      nanstr=None, infstr=None,
arrayprint.py(51):                      formatter=None):
arrayprint.py(173): def get_printoptions():
arrayprint.py(208): def _leading_trailing(a):
arrayprint.py(227): def _boolFormatter(x):
arrayprint.py(234): def repr_format(x):
arrayprint.py(237): def _array2string(a, max_line_width, precision, suppress_small, separator=' ',
arrayprint.py(238):                   prefix="", formatter=None):
arrayprint.py(328): def _convert_arrays(obj):
arrayprint.py(340): def array2string(a, max_line_width=None, precision=None,
arrayprint.py(341):                  suppress_small=None, separator=' ', prefix="",
arrayprint.py(342):                  style=repr, formatter=None):
arrayprint.py(450): def _extendLine(s, line, word, max_line_len, next_line_prefix):
arrayprint.py(458): def _formatArray(a, format_function, rank, max_line_len,
arrayprint.py(528): class FloatFormat(object):
 --- modulename: arrayprint, funcname: FloatFormat
arrayprint.py(528): class FloatFormat(object):
arrayprint.py(529):     def __init__(self, data, precision, suppress_small, sign=False):
arrayprint.py(543):     def fillFormat(self, data):
arrayprint.py(594):     def __call__(self, x, strip_zeros=True):
arrayprint.py(628): def _digits(x, precision, format):
arrayprint.py(634): class IntegerFormat(object):
 --- modulename: arrayprint, funcname: IntegerFormat
arrayprint.py(634): class IntegerFormat(object):
arrayprint.py(635):     def __init__(self, data):
arrayprint.py(648):     def __call__(self, x):
arrayprint.py(654): class LongFloatFormat(object):
 --- modulename: arrayprint, funcname: LongFloatFormat
arrayprint.py(654): class LongFloatFormat(object):
arrayprint.py(657):     def __init__(self, precision, sign=False):
arrayprint.py(661):     def __call__(self, x):
arrayprint.py(684): class LongComplexFormat(object):
 --- modulename: arrayprint, funcname: LongComplexFormat
arrayprint.py(684): class LongComplexFormat(object):
arrayprint.py(685):     def __init__(self, precision):
arrayprint.py(689):     def __call__(self, x):
arrayprint.py(695): class ComplexFormat(object):
 --- modulename: arrayprint, funcname: ComplexFormat
arrayprint.py(695): class ComplexFormat(object):
arrayprint.py(696):     def __init__(self, x, precision, suppress_small):
arrayprint.py(701):     def __call__(self, x):
arrayprint.py(711): class DatetimeFormat(object):
 --- modulename: arrayprint, funcname: DatetimeFormat
arrayprint.py(711): class DatetimeFormat(object):
arrayprint.py(712):     def __init__(self, x, unit=None,
arrayprint.py(713):                 timezone=None, casting='same_kind'):
arrayprint.py(733):     def __call__(self, x):
arrayprint.py(739): class TimedeltaFormat(object):
 --- modulename: arrayprint, funcname: TimedeltaFormat
arrayprint.py(739): class TimedeltaFormat(object):
arrayprint.py(740):     def __init__(self, data):
arrayprint.py(756):     def __call__(self, x):
numeric.py(1662): _typelessdata = [int_, float_, complex_]
numeric.py(1663): if issubclass(intc, int):
numeric.py(1666): if issubclass(longlong, int):
numeric.py(1667):     _typelessdata.append(longlong)
numeric.py(1669): def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):
numeric.py(1741): def array_str(a, max_line_width=None, precision=None, suppress_small=None):
numeric.py(1777): def set_string_function(f, repr=True):
numeric.py(1836): set_string_function(array_str, 0)
 --- modulename: numeric, funcname: set_string_function
numeric.py(1828):     if f is None:
numeric.py(1834):         return multiarray.set_string_function(f, repr)
numeric.py(1837): set_string_function(array_repr, 1)
 --- modulename: numeric, funcname: set_string_function
numeric.py(1828):     if f is None:
numeric.py(1834):         return multiarray.set_string_function(f, repr)
numeric.py(1839): little_endian = (sys.byteorder == 'little')
numeric.py(1842): def indices(dimensions, dtype=int):
numeric.py(1915): def fromfunction(function, shape, **kwargs):
numeric.py(1970): def isscalar(num):
numeric.py(1999): _lkup = {
numeric.py(2000):     '0':'0000',
numeric.py(2001):     '1':'0001',
numeric.py(2002):     '2':'0010',
numeric.py(2003):     '3':'0011',
numeric.py(2004):     '4':'0100',
numeric.py(2005):     '5':'0101',
numeric.py(2006):     '6':'0110',
numeric.py(2007):     '7':'0111',
numeric.py(2008):     '8':'1000',
numeric.py(2009):     '9':'1001',
numeric.py(2010):     'a':'1010',
numeric.py(2011):     'b':'1011',
numeric.py(2012):     'c':'1100',
numeric.py(2013):     'd':'1101',
numeric.py(2014):     'e':'1110',
numeric.py(2015):     'f':'1111',
numeric.py(2016):     'A':'1010',
numeric.py(2017):     'B':'1011',
numeric.py(2018):     'C':'1100',
numeric.py(2019):     'D':'1101',
numeric.py(2020):     'E':'1110',
numeric.py(2021):     'F':'1111',
numeric.py(2022):     'L':''}
numeric.py(2024): def binary_repr(num, width=None):
numeric.py(2100): def base_repr(number, base=2, padding=0):
numeric.py(2154): def load(file):
numeric.py(2175): def _maketup(descr, val):
numeric.py(2185): def identity(n, dtype=None):
numeric.py(2216): def allclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):
numeric.py(2281): def isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):
numeric.py(2378): def array_equal(a1, a2):
numeric.py(2419): def array_equiv(a1, a2):
numeric.py(2466): _errdict = {"ignore":ERR_IGNORE,
numeric.py(2467):             "warn":ERR_WARN,
numeric.py(2468):             "raise":ERR_RAISE,
numeric.py(2469):             "call":ERR_CALL,
numeric.py(2470):             "print":ERR_PRINT,
numeric.py(2471):             "log":ERR_LOG}
numeric.py(2473): _errdict_rev = {}
numeric.py(2474): for key in _errdict.keys():
numeric.py(2475):     _errdict_rev[_errdict[key]] = key
numeric.py(2474): for key in _errdict.keys():
numeric.py(2475):     _errdict_rev[_errdict[key]] = key
numeric.py(2474): for key in _errdict.keys():
numeric.py(2475):     _errdict_rev[_errdict[key]] = key
numeric.py(2474): for key in _errdict.keys():
numeric.py(2475):     _errdict_rev[_errdict[key]] = key
numeric.py(2474): for key in _errdict.keys():
numeric.py(2475):     _errdict_rev[_errdict[key]] = key
numeric.py(2474): for key in _errdict.keys():
numeric.py(2475):     _errdict_rev[_errdict[key]] = key
numeric.py(2474): for key in _errdict.keys():
numeric.py(2476): del key
numeric.py(2478): def seterr(all=None, divide=None, over=None, under=None, invalid=None):
numeric.py(2578): def geterr():
numeric.py(2628): def setbufsize(size):
numeric.py(2651): def getbufsize():
numeric.py(2663): def seterrcall(func):
numeric.py(2754): def geterrcall():
numeric.py(2798): class _unspecified(object):
 --- modulename: numeric, funcname: _unspecified
numeric.py(2798): class _unspecified(object):
numeric.py(2799):     pass
numeric.py(2800): _Unspecified = _unspecified()
numeric.py(2802): class errstate(object):
 --- modulename: numeric, funcname: errstate
numeric.py(2802): class errstate(object):
numeric.py(2861):     """
numeric.py(2865):     def __init__(self, **kwargs):
numeric.py(2869):     def __enter__(self):
numeric.py(2874):     def __exit__(self, *exc_info):
numeric.py(2880): def _setdef():
numeric.py(2885): _setdef()
 --- modulename: numeric, funcname: _setdef
numeric.py(2881):     defval = [UFUNC_BUFSIZE_DEFAULT, ERR_DEFAULT, None]
numeric.py(2882):     umath.seterrobj(defval)
numeric.py(2887): Inf = inf = infty = Infinity = PINF
numeric.py(2888): nan = NaN = NAN
numeric.py(2889): False_ = bool_(False)
numeric.py(2890): True_ = bool_(True)
numeric.py(2892): from .umath import *
numeric.py(2893): from .numerictypes import *
numeric.py(2894): from . import fromnumeric
numeric.py(2895): from .fromnumeric import *
numeric.py(2896): extend_all(fromnumeric)
 --- modulename: numeric, funcname: extend_all
numeric.py(359):     adict = {}
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(362):     try:
numeric.py(363):         mall = getattr(module, '__all__')
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(2897): extend_all(umath)
 --- modulename: numeric, funcname: extend_all
numeric.py(359):     adict = {}
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(362):     try:
numeric.py(363):         mall = getattr(module, '__all__')
numeric.py(364):     except AttributeError:
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(365):         mall = [k for k in module.__dict__.keys() if not k.startswith('_')]
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(2898): extend_all(numerictypes)
 --- modulename: numeric, funcname: extend_all
numeric.py(359):     adict = {}
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(361):         adict[a] = 1
numeric.py(360):     for a in __all__:
numeric.py(362):     try:
numeric.py(363):         mall = getattr(module, '__all__')
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
numeric.py(367):         if a not in adict:
numeric.py(368):             __all__.append(a)
numeric.py(366):     for a in mall:
__init__.py(26): from .numeric import *
__init__.py(27): from . import fromnumeric
__init__.py(28): from .fromnumeric import *
__init__.py(29): from . import defchararray as char
 --- modulename: defchararray, funcname: <module>
defchararray.py(17): """
defchararray.py(18): from __future__ import division, absolute_import, print_function
defchararray.py(20): import sys
defchararray.py(21): from .numerictypes import string_, unicode_, integer, object_, bool_, character
defchararray.py(22): from .numeric import ndarray, compare_chararrays
defchararray.py(23): from .numeric import array as narray
defchararray.py(24): from numpy.core.multiarray import _vec_string
defchararray.py(25): from numpy.compat import asbytes, long
defchararray.py(26): import numpy
defchararray.py(29):     'chararray', 'equal', 'not_equal', 'greater_equal', 'less_equal',
defchararray.py(30):     'greater', 'less', 'str_len', 'add', 'multiply', 'mod', 'capitalize',
defchararray.py(31):     'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs',
defchararray.py(32):     'find', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace',
defchararray.py(33):     'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition',
defchararray.py(34):     'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit',
defchararray.py(35):     'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase',
defchararray.py(36):     'title', 'translate', 'upper', 'zfill', 'isnumeric', 'isdecimal',
defchararray.py(37):     'array', 'asarray'
defchararray.py(41): _globalvar = 0
defchararray.py(42): if sys.version_info[0] >= 3:
defchararray.py(46):     _unicode = unicode
defchararray.py(47):     _bytes = str
defchararray.py(48): _len = len
defchararray.py(50): def _use_unicode(*args):
defchararray.py(64): def _to_string_or_unicode_array(result):
defchararray.py(71): def _clean_args(*args):
defchararray.py(87): def _get_num_chars(a):
defchararray.py(98): def equal(x1, x2):
defchararray.py(122): def not_equal(x1, x2):
defchararray.py(146): def greater_equal(x1, x2):
defchararray.py(171): def less_equal(x1, x2):
defchararray.py(195): def greater(x1, x2):
defchararray.py(219): def less(x1, x2):
defchararray.py(243): def str_len(a):
defchararray.py(262): def add(x1, x2):
defchararray.py(288): def multiply(a, i):
defchararray.py(316): def mod(a, values):
defchararray.py(342): def capitalize(a):
defchararray.py(380): def center(a, width, fillchar=' '):
defchararray.py(416): def count(a, sub, start=0, end=None):
defchararray.py(462): def decode(a, encoding=None, errors=None):
defchararray.py(508): def encode(a, encoding=None, errors=None):
defchararray.py(543): def endswith(a, suffix, start=0, end=None):
defchararray.py(587): def expandtabs(a, tabsize=8):
defchararray.py(622): def find(a, sub, start=0, end=None):
defchararray.py(657): def index(a, sub, start=0, end=None):
defchararray.py(684): def isalnum(a):
defchararray.py(708): def isalpha(a):
defchararray.py(732): def isdigit(a):
defchararray.py(756): def islower(a):
defchararray.py(781): def isspace(a):
defchararray.py(806): def istitle(a):
defchararray.py(830): def isupper(a):
defchararray.py(855): def join(sep, seq):
defchararray.py(880): def ljust(a, width, fillchar=' '):
defchararray.py(915): def lower(a):
defchararray.py(951): def lstrip(a, chars=None):
defchararray.py(1008): def partition(a, sep):
defchararray.py(1043): def replace(a, old, new, count=None):
defchararray.py(1075): def rfind(a, sub, start=0, end=None):
defchararray.py(1107): def rindex(a, sub, start=0, end=None):
defchararray.py(1136): def rjust(a, width, fillchar=' '):
defchararray.py(1171): def rpartition(a, sep):
defchararray.py(1206): def rsplit(a, sep=None, maxsplit=None):
defchararray.py(1243): def rstrip(a, chars=None):
defchararray.py(1287): def split(a, sep=None, maxsplit=None):
defchararray.py(1321): def splitlines(a, keepends=None):
defchararray.py(1350): def startswith(a, prefix, start=0, end=None):
defchararray.py(1381): def strip(a, chars=None):
defchararray.py(1429): def swapcase(a):
defchararray.py(1466): def title(a):
defchararray.py(1505): def translate(a, table, deletechars=None):
defchararray.py(1541): def upper(a):
defchararray.py(1577): def zfill(a, width):
defchararray.py(1607): def isnumeric(a):
defchararray.py(1638): def isdecimal(a):
defchararray.py(1669): class chararray(ndarray):
 --- modulename: defchararray, funcname: chararray
defchararray.py(1669): class chararray(ndarray):
defchararray.py(1810):     """
defchararray.py(1811):     def __new__(subtype, shape, itemsize=1, unicode=False, buffer=None,
defchararray.py(1812):                 offset=0, strides=None, order='C'):
defchararray.py(1846):     def __array_finalize__(self, obj):
defchararray.py(1851):     def __getitem__(self, obj):
defchararray.py(1868):     def __eq__(self, other):
defchararray.py(1878):     def __ne__(self, other):
defchararray.py(1888):     def __ge__(self, other):
defchararray.py(1898):     def __le__(self, other):
defchararray.py(1908):     def __gt__(self, other):
defchararray.py(1918):     def __lt__(self, other):
defchararray.py(1928):     def __add__(self, other):
defchararray.py(1939):     def __radd__(self, other):
defchararray.py(1950):     def __mul__(self, i):
defchararray.py(1961):     def __rmul__(self, i):
defchararray.py(1972):     def __mod__(self, i):
defchararray.py(1984):     def __rmod__(self, other):
defchararray.py(1987):     def argsort(self, axis=-1, kind='quicksort', order=None):
defchararray.py(2006):     argsort.__doc__ = ndarray.argsort.__doc__
defchararray.py(2008):     def capitalize(self):
defchararray.py(2020):     def center(self, width, fillchar=' '):
defchararray.py(2031):     def count(self, sub, start=0, end=None):
defchararray.py(2043):     def decode(self, encoding=None, errors=None):
defchararray.py(2054):     def encode(self, encoding=None, errors=None):
defchararray.py(2065):     def endswith(self, suffix, start=0, end=None):
defchararray.py(2077):     def expandtabs(self, tabsize=8):
defchararray.py(2089):     def find(self, sub, start=0, end=None):
defchararray.py(2101):     def index(self, sub, start=0, end=None):
defchararray.py(2112):     def isalnum(self):
defchararray.py(2125):     def isalpha(self):
defchararray.py(2138):     def isdigit(self):
defchararray.py(2150):     def islower(self):
defchararray.py(2163):     def isspace(self):
defchararray.py(2176):     def istitle(self):
defchararray.py(2188):     def isupper(self):
defchararray.py(2201):     def join(self, seq):
defchararray.py(2213):     def ljust(self, width, fillchar=' '):
defchararray.py(2225):     def lower(self):
defchararray.py(2237):     def lstrip(self, chars=None):
defchararray.py(2249):     def partition(self, sep):
defchararray.py(2259):     def replace(self, old, new, count=None):
defchararray.py(2271):     def rfind(self, sub, start=0, end=None):
defchararray.py(2284):     def rindex(self, sub, start=0, end=None):
defchararray.py(2296):     def rjust(self, width, fillchar=' '):
defchararray.py(2308):     def rpartition(self, sep):
defchararray.py(2318):     def rsplit(self, sep=None, maxsplit=None):
defchararray.py(2330):     def rstrip(self, chars=None):
defchararray.py(2342):     def split(self, sep=None, maxsplit=None):
defchararray.py(2354):     def splitlines(self, keepends=None):
defchararray.py(2366):     def startswith(self, prefix, start=0, end=None):
defchararray.py(2378):     def strip(self, chars=None):
defchararray.py(2390):     def swapcase(self):
defchararray.py(2402):     def title(self):
defchararray.py(2415):     def translate(self, table, deletechars=None):
defchararray.py(2429):     def upper(self):
defchararray.py(2441):     def zfill(self, width):
defchararray.py(2453):     def isnumeric(self):
defchararray.py(2465):     def isdecimal(self):
defchararray.py(2478): def array(obj, itemsize=None, copy=True, unicode=None, order=None):
defchararray.py(2640): def asarray(obj, itemsize=None, unicode=None, order=None):
__init__.py(30): from . import records as rec
 --- modulename: records, funcname: <module>
records.py(36): """
records.py(37): from __future__ import division, absolute_import, print_function
records.py(39): import sys
records.py(40): import os
records.py(42): from . import numeric as sb
records.py(43): from . import numerictypes as nt
records.py(44): from numpy.compat import isfileobj, bytes, long
records.py(47): __all__ = ['record', 'recarray', 'format_parser']
records.py(50): ndarray = sb.ndarray
records.py(52): _byteorderconv = {'b':'>',
records.py(53):                   'l':'<',
records.py(54):                   'n':'=',
records.py(55):                   'B':'>',
records.py(56):                   'L':'<',
records.py(57):                   'N':'=',
records.py(58):                   'S':'s',
records.py(59):                   's':'s',
records.py(60):                   '>':'>',
records.py(61):                   '<':'<',
records.py(62):                   '=':'=',
records.py(63):                   '|':'|',
records.py(64):                   'I':'|',
records.py(65):                   'i':'|'}
records.py(72): numfmt = nt.typeDict
records.py(74): def find_duplicate(list):
records.py(83): class format_parser:
 --- modulename: records, funcname: format_parser
records.py(83): class format_parser:
records.py(141):     """
records.py(143):     def __init__(self, formats, names, titles, aligned=False, byteorder=None):
records.py(149):     def _parseFormats(self, formats, aligned=0):
records.py(168):     def _setfieldnames(self, names, titles):
records.py(204):     def _createdescr(self, byteorder):
records.py(215): class record(nt.void):
 --- modulename: records, funcname: record
records.py(215): class record(nt.void):
records.py(217):     """
records.py(221):     __name__ = 'record'
records.py(222):     __module__ = 'numpy'
records.py(224):     def __repr__(self):
records.py(227):     def __str__(self):
records.py(230):     def __getattribute__(self, attr):
records.py(255):     def __setattr__(self, attr, val):
records.py(269):     def __getitem__(self, indx):
records.py(279):     def pprint(self):
records.py(298): class recarray(ndarray):
 --- modulename: records, funcname: recarray
records.py(298): class recarray(ndarray):
records.py(402):     """
records.py(406):     __name__ = 'recarray'
records.py(407):     __module__ = 'numpy'
records.py(409):     def __new__(subtype, shape, dtype=None, buf=None, offset=0, strides=None,
records.py(410):                 formats=None, names=None, titles=None,
records.py(411):                 byteorder=None, aligned=False, order='C'):
records.py(426):     def __array_finalize__(self, obj):
records.py(432):     def __getattribute__(self, attr):
records.py(466):     def __setattr__(self, attr, val):
records.py(498):     def __getitem__(self, indx):
records.py(515):     def __repr__(self):
records.py(544):     def field(self, attr, val=None):
records.py(562): def fromarrays(arrayList, dtype=None, shape=None, formats=None,
records.py(563):                names=None, titles=None, aligned=False, byteorder=None):
records.py(628): def fromrecords(recList, dtype=None, shape=None, formats=None, names=None,
records.py(629):                 titles=None, aligned=False, byteorder=None):
records.py(692): def fromstring(datastring, dtype=None, shape=None, offset=0, formats=None,
records.py(693):                names=None, titles=None, aligned=False, byteorder=None):
records.py(712): def get_remaining_size(fd):
records.py(721): def fromfile(fd, dtype=None, shape=None, offset=0, formats=None,
records.py(722):              names=None, titles=None, aligned=False, byteorder=None):
records.py(789): def array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None,
records.py(790):           names=None, titles=None, aligned=False, byteorder=None, copy=True):
__init__.py(31): from .records import *
__init__.py(32): from .memmap import *
 --- modulename: memmap, funcname: <module>
memmap.py(1): from __future__ import division, absolute_import, print_function
memmap.py(3): import numpy as np
memmap.py(4): from .numeric import uint8, ndarray, dtype
memmap.py(5): from numpy.compat import long, basestring
memmap.py(7): __all__ = ['memmap']
memmap.py(9): dtypedescr = dtype
memmap.py(10): valid_filemodes = ["r", "c", "r+", "w+"]
memmap.py(11): writeable_filemodes = ["r+", "w+"]
memmap.py(13): mode_equivalents = {
memmap.py(14):     "readonly":"r",
memmap.py(15):     "copyonwrite":"c",
memmap.py(16):     "readwrite":"r+",
memmap.py(17):     "write":"w+"
memmap.py(20): class memmap(ndarray):
 --- modulename: memmap, funcname: memmap
memmap.py(20): class memmap(ndarray):
memmap.py(197):     """
memmap.py(199):     __array_priority__ = -100.0
memmap.py(201):     def __new__(subtype, filename, dtype=uint8, mode='r+', offset=0,
memmap.py(202):                 shape=None, order='C'):
memmap.py(283):     def __array_finalize__(self, obj):
memmap.py(295):     def flush(self):
__init__.py(33): from .defchararray import chararray
__init__.py(34): from . import function_base
 --- modulename: function_base, funcname: <module>
function_base.py(1): from __future__ import division, absolute_import, print_function
function_base.py(3): __all__ = ['logspace', 'linspace']
function_base.py(5): from . import numeric as _nx
function_base.py(6): from .numeric import result_type, NaN
function_base.py(9): def linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None):
function_base.py(123): def logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None):
__init__.py(35): from .function_base import *
__init__.py(36): from . import machar
 --- modulename: machar, funcname: <module>
machar.py(7): """
machar.py(8): from __future__ import division, absolute_import, print_function
machar.py(10): __all__ = ['MachAr']
machar.py(12): from numpy.core.fromnumeric import any
machar.py(13): from numpy.core.numeric import errstate
machar.py(17): class MachAr(object):
 --- modulename: machar, funcname: MachAr
machar.py(17): class MachAr(object):
machar.py(96):     """
machar.py(98):     def __init__(self, float_conv=float,int_conv=int,
machar.py(99):                  float_to_float=float,
machar.py(100):                  float_to_str=lambda v:'%24.16e' % v,
machar.py(101):                  title='Python floating point number'):
machar.py(116):     def _do_init(self, float_conv, int_conv, float_to_float, float_to_str, title):
machar.py(327):     def __str__(self):
machar.py(341): if __name__ == '__main__':
__init__.py(37): from .machar import *
__init__.py(38): from . import getlimits
 --- modulename: getlimits, funcname: <module>
getlimits.py(3): """
getlimits.py(4): from __future__ import division, absolute_import, print_function
getlimits.py(6): __all__ = ['finfo', 'iinfo']
getlimits.py(8): from .machar import MachAr
getlimits.py(9): from . import numeric
getlimits.py(10): from . import numerictypes as ntypes
getlimits.py(11): from .numeric import array
getlimits.py(13): def _frz(a):
getlimits.py(19): _convert_to_float = {
getlimits.py(20):     ntypes.csingle: ntypes.single,
getlimits.py(21):     ntypes.complex_: ntypes.float_,
getlimits.py(22):     ntypes.clongfloat: ntypes.longfloat
getlimits.py(25): class finfo(object):
 --- modulename: getlimits, funcname: finfo
getlimits.py(25): class finfo(object):
getlimits.py(90):     """
getlimits.py(92):     _finfo_cache = {}
getlimits.py(94):     def __new__(cls, dtype):
getlimits.py(127):     def _init(self, dtype):
getlimits.py(173):     def __str__(self):
getlimits.py(187):     def __repr__(self):
getlimits.py(195): class iinfo(object):
 --- modulename: getlimits, funcname: iinfo
getlimits.py(195): class iinfo(object):
getlimits.py(240):     """
getlimits.py(242):     _min_vals = {}
getlimits.py(243):     _max_vals = {}
getlimits.py(245):     def __init__(self, int_type):
getlimits.py(256):     def min(self):
getlimits.py(268):     min = property(min)
getlimits.py(270):     def max(self):
getlimits.py(282):     max = property(max)
getlimits.py(284):     def __str__(self):
getlimits.py(295):     def __repr__(self):
getlimits.py(299): if __name__ == '__main__':
__init__.py(39): from .getlimits import *
__init__.py(40): from . import shape_base
 --- modulename: shape_base, funcname: <module>
shape_base.py(1): from __future__ import division, absolute_import, print_function
shape_base.py(3): __all__ = ['atleast_1d', 'atleast_2d', 'atleast_3d', 'vstack', 'hstack',
shape_base.py(4):            'stack']
shape_base.py(6): from . import numeric as _nx
shape_base.py(7): from .numeric import asanyarray, newaxis
shape_base.py(9): def atleast_1d(*arys):
shape_base.py(61): def atleast_2d(*arys):
shape_base.py(113): def atleast_3d(*arys):
shape_base.py(180): def vstack(tup):
shape_base.py(232): def hstack(tup):
shape_base.py(282): def stack(arrays, axis=0):
__init__.py(41): from .shape_base import *
__init__.py(42): del nt
__init__.py(44): from .fromnumeric import amax as max, amin as min, round_ as round
__init__.py(45): from .numeric import absolute as abs
__init__.py(47): __all__ = ['char', 'rec', 'memmap']
__init__.py(48): __all__ += numeric.__all__
__init__.py(49): __all__ += fromnumeric.__all__
__init__.py(50): __all__ += rec.__all__
__init__.py(51): __all__ += ['chararray']
__init__.py(52): __all__ += function_base.__all__
__init__.py(53): __all__ += machar.__all__
__init__.py(54): __all__ += getlimits.__all__
__init__.py(55): __all__ += shape_base.__all__
__init__.py(58): from numpy.testing import Tester
 --- modulename: __init__, funcname: <module>
__init__.py(7): """
__init__.py(8): from __future__ import division, absolute_import, print_function
__init__.py(10): from unittest import TestCase
 --- modulename: __init__, funcname: <module>
__init__.py(45): """
__init__.py(47): __all__ = ['TestResult', 'TestCase', 'TestSuite',
__init__.py(48):            'TextTestRunner', 'TestLoader', 'FunctionTestCase', 'main',
__init__.py(49):            'defaultTestLoader', 'SkipTest', 'skip', 'skipIf', 'skipUnless',
__init__.py(50):            'expectedFailure', 'TextTestResult', 'installHandler',
__init__.py(51):            'registerResult', 'removeResult', 'removeHandler']
__init__.py(54): __all__.extend(['getTestCaseNames', 'makeSuite', 'findTestCases'])
__init__.py(56): __unittest = True
__init__.py(58): from .result import TestResult
 --- modulename: result, funcname: <module>
result.py(1): """Test result object"""
result.py(3): import os
result.py(4): import sys
result.py(5): import traceback
result.py(7): from StringIO import StringIO
 --- modulename: StringIO, funcname: <module>
StringIO.py(30): """
StringIO.py(31): try:
StringIO.py(32):     from errno import EINVAL
StringIO.py(36): __all__ = ["StringIO"]
StringIO.py(38): def _complain_ifclosed(closed):
StringIO.py(42): class StringIO:
 --- modulename: StringIO, funcname: StringIO
StringIO.py(42): class StringIO:
StringIO.py(53):     """
StringIO.py(54):     def __init__(self, buf = ''):
StringIO.py(65):     def __iter__(self):
StringIO.py(68):     def next(self):
StringIO.py(81):     def close(self):
StringIO.py(88):     def isatty(self):
StringIO.py(95):     def seek(self, pos, mode = 0):
StringIO.py(114):     def tell(self):
StringIO.py(119):     def read(self, n = -1):
StringIO.py(139):     def readline(self, length=None):
StringIO.py(168):     def readlines(self, sizehint = 0):
StringIO.py(187):     def truncate(self, size=None):
StringIO.py(208):     def write(self, s):
StringIO.py(241):     def writelines(self, iterable):
StringIO.py(253):     def flush(self):
StringIO.py(258):     def getvalue(self):
StringIO.py(278): def test():
StringIO.py(323): if __name__ == '__main__':
result.py(9): from . import util
 --- modulename: util, funcname: <module>
util.py(1): """Various utility functions."""
util.py(2): from collections import namedtuple, OrderedDict
util.py(5): __unittest = True
util.py(7): _MAX_LENGTH = 80
util.py(8): def safe_repr(obj, short=False):
util.py(18): def strclass(cls):
util.py(21): def sorted_list_difference(expected, actual):
util.py(62): def unorderable_list_difference(expected, actual, ignore_duplicate=False):
util.py(98): _Mismatch = namedtuple('Mismatch', 'actual expected value')
 --- modulename: collections, funcname: namedtuple
collections.py(319):     if isinstance(field_names, basestring):
collections.py(320):         field_names = field_names.replace(',', ' ').split()
collections.py(321):     field_names = map(str, field_names)
collections.py(322):     typename = str(typename)
collections.py(323):     if rename:
collections.py(334):     for name in [typename] + field_names:
collections.py(335):         if type(name) != str:
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
collections.py(340):         if _iskeyword(name):
collections.py(343):         if name[0].isdigit():
collections.py(334):     for name in [typename] + field_names:
collections.py(335):         if type(name) != str:
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
collections.py(340):         if _iskeyword(name):
collections.py(343):         if name[0].isdigit():
collections.py(334):     for name in [typename] + field_names:
collections.py(335):         if type(name) != str:
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
collections.py(340):         if _iskeyword(name):
collections.py(343):         if name[0].isdigit():
collections.py(334):     for name in [typename] + field_names:
collections.py(335):         if type(name) != str:
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
collections.py(340):         if _iskeyword(name):
collections.py(343):         if name[0].isdigit():
collections.py(334):     for name in [typename] + field_names:
collections.py(346):     seen = set()
collections.py(347):     for name in field_names:
collections.py(348):         if name.startswith('_') and not rename:
collections.py(351):         if name in seen:
collections.py(353):         seen.add(name)
collections.py(347):     for name in field_names:
collections.py(348):         if name.startswith('_') and not rename:
collections.py(351):         if name in seen:
collections.py(353):         seen.add(name)
collections.py(347):     for name in field_names:
collections.py(348):         if name.startswith('_') and not rename:
collections.py(351):         if name in seen:
collections.py(353):         seen.add(name)
collections.py(347):     for name in field_names:
collections.py(356):     class_definition = _class_template.format(
collections.py(357):         typename = typename,
collections.py(358):         field_names = tuple(field_names),
collections.py(359):         num_fields = len(field_names),
collections.py(360):         arg_list = repr(tuple(field_names)).replace("'", "")[1:-1],
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(362):                              for name in field_names),
 --- modulename: collections, funcname: <genexpr>
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(362):                              for name in field_names),
 --- modulename: collections, funcname: <genexpr>
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(362):                              for name in field_names),
 --- modulename: collections, funcname: <genexpr>
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(362):                              for name in field_names),
 --- modulename: collections, funcname: <genexpr>
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(364):                                for index, name in enumerate(field_names))
 --- modulename: collections, funcname: <genexpr>
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(364):                                for index, name in enumerate(field_names))
 --- modulename: collections, funcname: <genexpr>
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(364):                                for index, name in enumerate(field_names))
 --- modulename: collections, funcname: <genexpr>
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(364):                                for index, name in enumerate(field_names))
 --- modulename: collections, funcname: <genexpr>
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(366):     if verbose:
collections.py(371):     namespace = dict(_itemgetter=_itemgetter, __name__='namedtuple_%s' % typename,
collections.py(372):                      OrderedDict=OrderedDict, _property=property, _tuple=tuple)
collections.py(373):     try:
collections.py(374):         exec class_definition in namespace
collections.py(377):     result = namespace[typename]
collections.py(383):     try:
collections.py(384):         result.__module__ = _sys._getframe(1).f_globals.get('__name__', '__main__')
collections.py(388):     return result
util.py(100): def _count_diff_all_purpose(actual, expected):
util.py(135): def _ordered_count(iterable):
util.py(142): def _count_diff_hashable(actual, expected):
result.py(10): from functools import wraps
result.py(12): __unittest = True
result.py(14): def failfast(method):
result.py(22): STDOUT_LINE = '\nStdout:\n%s'
result.py(23): STDERR_LINE = '\nStderr:\n%s'
result.py(26): class TestResult(object):
 --- modulename: result, funcname: TestResult
result.py(26): class TestResult(object):
result.py(36):     """
result.py(37):     _previousTestClass = None
result.py(38):     _testRunEntered = False
result.py(39):     _moduleSetUpFailed = False
result.py(40):     def __init__(self, stream=None, descriptions=None, verbosity=None):
result.py(56):     def printErrors(self):
result.py(59):     def startTest(self, test):
result.py(65):     def _setupStdout(self):
result.py(73):     def startTestRun(self):
result.py(79):     def stopTest(self, test):
result.py(84):     def _restoreStdout(self):
result.py(105):     def stopTestRun(self):
result.py(111):     @failfast
 --- modulename: result, funcname: failfast
result.py(15):     @wraps(method)
 --- modulename: functools, funcname: wraps
functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(34):     for attr in updated:
functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
functools.py(34):     for attr in updated:
functools.py(37):     return wrapper
result.py(20):     return inner
result.py(119):     @failfast
 --- modulename: result, funcname: failfast
result.py(15):     @wraps(method)
 --- modulename: functools, funcname: wraps
functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(34):     for attr in updated:
functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
functools.py(34):     for attr in updated:
functools.py(37):     return wrapper
result.py(20):     return inner
result.py(126):     def addSuccess(self, test):
result.py(130):     def addSkip(self, test, reason):
result.py(134):     def addExpectedFailure(self, test, err):
result.py(139):     @failfast
 --- modulename: result, funcname: failfast
result.py(15):     @wraps(method)
 --- modulename: functools, funcname: wraps
functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(34):     for attr in updated:
functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
functools.py(34):     for attr in updated:
functools.py(37):     return wrapper
result.py(20):     return inner
result.py(144):     def wasSuccessful(self):
result.py(148):     def stop(self):
result.py(152):     def _exc_info_to_string(self, err, test):
result.py(180):     def _is_relevant_tb_level(self, tb):
result.py(183):     def _count_relevant_tb_levels(self, tb):
result.py(190):     def __repr__(self):
__init__.py(59): from .case import (TestCase, FunctionTestCase, SkipTest, skip, skipIf,
 --- modulename: case, funcname: <module>
case.py(1): """Test case implementation"""
case.py(3): import collections
case.py(4): import sys
case.py(5): import functools
case.py(6): import difflib
 --- modulename: difflib, funcname: <module>
difflib.py(27): """
difflib.py(29): __all__ = ['get_close_matches', 'ndiff', 'restore', 'SequenceMatcher',
difflib.py(30):            'Differ','IS_CHARACTER_JUNK', 'IS_LINE_JUNK', 'context_diff',
difflib.py(31):            'unified_diff', 'HtmlDiff', 'Match']
difflib.py(33): import heapq
difflib.py(34): from collections import namedtuple as _namedtuple
difflib.py(35): from functools import reduce
difflib.py(37): Match = _namedtuple('Match', 'a b size')
 --- modulename: collections, funcname: namedtuple
collections.py(319):     if isinstance(field_names, basestring):
collections.py(320):         field_names = field_names.replace(',', ' ').split()
collections.py(321):     field_names = map(str, field_names)
collections.py(322):     typename = str(typename)
collections.py(323):     if rename:
collections.py(334):     for name in [typename] + field_names:
collections.py(335):         if type(name) != str:
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
collections.py(340):         if _iskeyword(name):
collections.py(343):         if name[0].isdigit():
collections.py(334):     for name in [typename] + field_names:
collections.py(335):         if type(name) != str:
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
collections.py(340):         if _iskeyword(name):
collections.py(343):         if name[0].isdigit():
collections.py(334):     for name in [typename] + field_names:
collections.py(335):         if type(name) != str:
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
collections.py(340):         if _iskeyword(name):
collections.py(343):         if name[0].isdigit():
collections.py(334):     for name in [typename] + field_names:
collections.py(335):         if type(name) != str:
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
 --- modulename: collections, funcname: <genexpr>
collections.py(337):         if not all(c.isalnum() or c=='_' for c in name):
collections.py(340):         if _iskeyword(name):
collections.py(343):         if name[0].isdigit():
collections.py(334):     for name in [typename] + field_names:
collections.py(346):     seen = set()
collections.py(347):     for name in field_names:
collections.py(348):         if name.startswith('_') and not rename:
collections.py(351):         if name in seen:
collections.py(353):         seen.add(name)
collections.py(347):     for name in field_names:
collections.py(348):         if name.startswith('_') and not rename:
collections.py(351):         if name in seen:
collections.py(353):         seen.add(name)
collections.py(347):     for name in field_names:
collections.py(348):         if name.startswith('_') and not rename:
collections.py(351):         if name in seen:
collections.py(353):         seen.add(name)
collections.py(347):     for name in field_names:
collections.py(356):     class_definition = _class_template.format(
collections.py(357):         typename = typename,
collections.py(358):         field_names = tuple(field_names),
collections.py(359):         num_fields = len(field_names),
collections.py(360):         arg_list = repr(tuple(field_names)).replace("'", "")[1:-1],
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(362):                              for name in field_names),
 --- modulename: collections, funcname: <genexpr>
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(362):                              for name in field_names),
 --- modulename: collections, funcname: <genexpr>
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(362):                              for name in field_names),
 --- modulename: collections, funcname: <genexpr>
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(362):                              for name in field_names),
 --- modulename: collections, funcname: <genexpr>
collections.py(361):         repr_fmt = ', '.join(_repr_template.format(name=name)
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(364):                                for index, name in enumerate(field_names))
 --- modulename: collections, funcname: <genexpr>
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(364):                                for index, name in enumerate(field_names))
 --- modulename: collections, funcname: <genexpr>
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(364):                                for index, name in enumerate(field_names))
 --- modulename: collections, funcname: <genexpr>
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(364):                                for index, name in enumerate(field_names))
 --- modulename: collections, funcname: <genexpr>
collections.py(363):         field_defs = '\n'.join(_field_template.format(index=index, name=name)
collections.py(366):     if verbose:
collections.py(371):     namespace = dict(_itemgetter=_itemgetter, __name__='namedtuple_%s' % typename,
collections.py(372):                      OrderedDict=OrderedDict, _property=property, _tuple=tuple)
collections.py(373):     try:
collections.py(374):         exec class_definition in namespace
collections.py(377):     result = namespace[typename]
collections.py(383):     try:
collections.py(384):         result.__module__ = _sys._getframe(1).f_globals.get('__name__', '__main__')
collections.py(388):     return result
difflib.py(39): def _calculate_ratio(matches, length):
difflib.py(44): class SequenceMatcher:
 --- modulename: difflib, funcname: SequenceMatcher
difflib.py(44): class SequenceMatcher:
difflib.py(150):     """
difflib.py(152):     def __init__(self, isjunk=None, a='', b='', autojunk=True):
difflib.py(221):     def set_seqs(self, a, b):
difflib.py(233):     def set_seq1(self, a):
difflib.py(259):     def set_seq2(self, b):
difflib.py(304):     def __chain_b(self):
difflib.py(348):     def find_longest_match(self, alo, ahi, blo, bhi):
difflib.py(458):     def get_matching_blocks(self):
difflib.py(529):     def get_opcodes(self):
difflib.py(584):     def get_grouped_opcodes(self, n=3):
difflib.py(634):     def ratio(self):
difflib.py(660):     def quick_ratio(self):
difflib.py(689):     def real_quick_ratio(self):
difflib.py(701): def get_close_matches(word, possibilities, n=3, cutoff=0.6):
difflib.py(749): def _count_leading(line, ch):
difflib.py(764): class Differ:
 --- modulename: difflib, funcname: Differ
difflib.py(764): class Differ:
difflib.py(856):     """
difflib.py(858):     def __init__(self, linejunk=None, charjunk=None):
difflib.py(882):     def compare(self, a, b):
difflib.py(923):     def _dump(self, tag, x, lo, hi):
difflib.py(928):     def _plain_replace(self, a, alo, ahi, b, blo, bhi):
difflib.py(943):     def _fancy_replace(self, a, alo, ahi, b, blo, bhi):
difflib.py(1041):     def _fancy_helper(self, a, alo, ahi, b, blo, bhi):
difflib.py(1054):     def _qformat(self, aline, bline, atags, btags):
difflib.py(1104): import re
difflib.py(1106): def IS_LINE_JUNK(line, pat=re.compile(r"\s*#?\s*$").match):
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(491):                 min, max = 0, 1
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(695):             subpattern.append((AT, AT_END))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(183):             elif op == SUCCESS:
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(439):         return # not worth it
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(155):         elif op in SUCCESS_CODES:
sre_compile.py(157):         elif op in ASSERT_CODES:
sre_compile.py(170):         elif op is CALL:
sre_compile.py(176):         elif op is AT:
sre_compile.py(177):             emit(OPCODES[op])
sre_compile.py(178):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(180):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(182):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(184):             emit(ATCODES[av])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
difflib.py(1122): def IS_CHARACTER_JUNK(ch, ws=" \t"):
difflib.py(1145): def _format_range_unified(start, stop):
difflib.py(1156): def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',
difflib.py(1157):                  tofiledate='', n=3, lineterm='\n'):
difflib.py(1228): def _format_range_context(start, stop):
difflib.py(1240): def context_diff(a, b, fromfile='', tofile='',
difflib.py(1241):                  fromfiledate='', tofiledate='', n=3, lineterm='\n'):
difflib.py(1314): def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):
difflib.py(1350): def _mdiff(fromlines, tolines, context=None, linejunk=None,
difflib.py(1351):            charjunk=IS_CHARACTER_JUNK):
difflib.py(1632): </html>"""
difflib.py(1641):         .diff_sub {background-color:#ffaaaa}"""
difflib.py(1651):     </table>"""
difflib.py(1668):     </table>"""
difflib.py(1670): class HtmlDiff(object):
 --- modulename: difflib, funcname: HtmlDiff
difflib.py(1670): class HtmlDiff(object):
difflib.py(1684):     """
difflib.py(1686):     _file_template = _file_template
difflib.py(1687):     _styles = _styles
difflib.py(1688):     _table_template = _table_template
difflib.py(1689):     _legend = _legend
difflib.py(1690):     _default_prefix = 0
difflib.py(1692):     def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,
difflib.py(1693):                  charjunk=IS_CHARACTER_JUNK):
difflib.py(1709):     def make_file(self,fromlines,tolines,fromdesc='',todesc='',context=False,
difflib.py(1710):                   numlines=5):
difflib.py(1733):     def _tab_newline_replace(self,fromlines,tolines):
difflib.py(1756):     def _split_line(self,data_list,line_num,text):
difflib.py(1811):     def _line_wrapper(self,diffs):
difflib.py(1839):     def _collect_lines(self,diffs):
difflib.py(1860):     def _format_line(self,side,flag,linenum,text):
difflib.py(1883):     def _make_prefix(self):
difflib.py(1894):     def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):
difflib.py(1941):     def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,
difflib.py(1942):                    numlines=5):
difflib.py(2018): del re
difflib.py(2020): def restore(delta, which):
difflib.py(2052): def _test():
difflib.py(2056): if __name__ == "__main__":
case.py(7): import pprint
 --- modulename: pprint, funcname: <module>
pprint.py(35): """
pprint.py(37): import sys as _sys
pprint.py(38): import warnings
pprint.py(40): try:
pprint.py(41):     from cStringIO import StringIO as _StringIO
pprint.py(45): __all__ = ["pprint","pformat","isreadable","isrecursive","saferepr",
pprint.py(46):            "PrettyPrinter"]
pprint.py(49): _commajoin = ", ".join
pprint.py(50): _id = id
pprint.py(51): _len = len
pprint.py(52): _type = type
pprint.py(55): def pprint(object, stream=None, indent=1, width=80, depth=None):
pprint.py(61): def pformat(object, indent=1, width=80, depth=None):
pprint.py(65): def saferepr(object):
pprint.py(69): def isreadable(object):
pprint.py(73): def isrecursive(object):
pprint.py(77): def _sorted(iterable):
pprint.py(84): class PrettyPrinter:
 --- modulename: pprint, funcname: PrettyPrinter
pprint.py(84): class PrettyPrinter:
pprint.py(85):     def __init__(self, indent=1, width=80, depth=None, stream=None):
pprint.py(116):     def pprint(self, object):
pprint.py(120):     def pformat(self, object):
pprint.py(125):     def isrecursive(self, object):
pprint.py(128):     def isreadable(self, object):
pprint.py(132):     def _format(self, object, stream, indent, allowance, context, level):
pprint.py(224):     def _repr(self, object, context, level):
pprint.py(233):     def format(self, object, context, maxlevels, level):
pprint.py(243): def _safe_repr(object, context, maxlevels, level):
pprint.py(327): def _recursion(object):
pprint.py(332): def _perfcheck(object=None):
pprint.py(345): if __name__ == "__main__":
case.py(8): import re
case.py(9): import types
case.py(10): import warnings
case.py(12): from . import result
case.py(13): from .util import (
case.py(19): __unittest = True
case.py(22): DIFF_OMITTED = ('\nDiff is %s characters long. '
case.py(25): class SkipTest(Exception):
 --- modulename: case, funcname: SkipTest
case.py(25): class SkipTest(Exception):
case.py(31):     """
case.py(32):     pass
case.py(34): class _ExpectedFailure(Exception):
 --- modulename: case, funcname: _ExpectedFailure
case.py(34): class _ExpectedFailure(Exception):
case.py(39):     """
case.py(41):     def __init__(self, exc_info):
case.py(45): class _UnexpectedSuccess(Exception):
 --- modulename: case, funcname: _UnexpectedSuccess
case.py(45): class _UnexpectedSuccess(Exception):
case.py(48):     """
case.py(49):     pass
case.py(51): def _id(obj):
case.py(54): def skip(reason):
case.py(70): def skipIf(condition, reason):
case.py(78): def skipUnless(condition, reason):
case.py(87): def expectedFailure(func):
case.py(98): class _AssertRaisesContext(object):
 --- modulename: case, funcname: _AssertRaisesContext
case.py(98): class _AssertRaisesContext(object):
case.py(99):     """A context manager used to implement TestCase.assertRaises* methods."""
case.py(101):     def __init__(self, expected, test_case, expected_regexp=None):
case.py(106):     def __enter__(self):
case.py(109):     def __exit__(self, exc_type, exc_value, tb):
case.py(131): class TestCase(object):
 --- modulename: case, funcname: TestCase
case.py(131): class TestCase(object):
case.py(162):     """
case.py(164):     failureException = AssertionError
case.py(166):     longMessage = False
case.py(168):     maxDiff = 80*8
case.py(172):     _diffThreshold = 2**16
case.py(176):     _classSetupFailed = False
case.py(178):     def __init__(self, methodName='runTest'):
case.py(208):     def addTypeEqualityFunc(self, typeobj, function):
case.py(223):     def addCleanup(self, function, *args, **kwargs):
case.py(231):     def setUp(self):
case.py(235):     def tearDown(self):
case.py(239):     @classmethod
case.py(243):     @classmethod
case.py(247):     def countTestCases(self):
case.py(250):     def defaultTestResult(self):
case.py(253):     def shortDescription(self):
case.py(264):     def id(self):
case.py(267):     def __eq__(self, other):
case.py(273):     def __ne__(self, other):
case.py(276):     def __hash__(self):
case.py(279):     def __str__(self):
case.py(282):     def __repr__(self):
case.py(286):     def _addSkip(self, result, reason):
case.py(295):     def run(self, result=None):
case.py(376):     def doCleanups(self):
case.py(392):     def __call__(self, *args, **kwds):
case.py(395):     def debug(self):
case.py(404):     def skipTest(self, reason):
case.py(408):     def fail(self, msg=None):
case.py(412):     def assertFalse(self, expr, msg=None):
case.py(418):     def assertTrue(self, expr, msg=None):
case.py(424):     def _formatMessage(self, msg, standardMsg):
case.py(446):     def assertRaises(self, excClass, callableObj=None, *args, **kwargs):
case.py(475):     def _getAssertEqualityFunc(self, first, second):
case.py(501):     def _baseAssertEqual(self, first, second, msg=None):
case.py(508):     def assertEqual(self, first, second, msg=None):
case.py(515):     def assertNotEqual(self, first, second, msg=None):
case.py(525):     def assertAlmostEqual(self, first, second, places=None, msg=None, delta=None):
case.py(563):     def assertNotAlmostEqual(self, first, second, places=None, msg=None, delta=None):
case.py(599):     assertEquals = assertEqual
case.py(600):     assertNotEquals = assertNotEqual
case.py(601):     assertAlmostEquals = assertAlmostEqual
case.py(602):     assertNotAlmostEquals = assertNotAlmostEqual
case.py(603):     assert_ = assertTrue
case.py(607):     def _deprecate(original_func):
case.py(615):     failUnlessEqual = _deprecate(assertEqual)
 --- modulename: case, funcname: _deprecate
case.py(608):         def deprecated_func(*args, **kwargs):
case.py(613):         return deprecated_func
case.py(616):     failIfEqual = _deprecate(assertNotEqual)
 --- modulename: case, funcname: _deprecate
case.py(608):         def deprecated_func(*args, **kwargs):
case.py(613):         return deprecated_func
case.py(617):     failUnlessAlmostEqual = _deprecate(assertAlmostEqual)
 --- modulename: case, funcname: _deprecate
case.py(608):         def deprecated_func(*args, **kwargs):
case.py(613):         return deprecated_func
case.py(618):     failIfAlmostEqual = _deprecate(assertNotAlmostEqual)
 --- modulename: case, funcname: _deprecate
case.py(608):         def deprecated_func(*args, **kwargs):
case.py(613):         return deprecated_func
case.py(619):     failUnless = _deprecate(assertTrue)
 --- modulename: case, funcname: _deprecate
case.py(608):         def deprecated_func(*args, **kwargs):
case.py(613):         return deprecated_func
case.py(620):     failUnlessRaises = _deprecate(assertRaises)
 --- modulename: case, funcname: _deprecate
case.py(608):         def deprecated_func(*args, **kwargs):
case.py(613):         return deprecated_func
case.py(621):     failIf = _deprecate(assertFalse)
 --- modulename: case, funcname: _deprecate
case.py(608):         def deprecated_func(*args, **kwargs):
case.py(613):         return deprecated_func
case.py(623):     def assertSequenceEqual(self, seq1, seq2, msg=None, seq_type=None):
case.py(726):     def _truncateMessage(self, message, diff):
case.py(732):     def assertListEqual(self, list1, list2, msg=None):
case.py(744):     def assertTupleEqual(self, tuple1, tuple2, msg=None):
case.py(755):     def assertSetEqual(self, set1, set2, msg=None):
case.py(798):     def assertIn(self, member, container, msg=None):
case.py(805):     def assertNotIn(self, member, container, msg=None):
case.py(812):     def assertIs(self, expr1, expr2, msg=None):
case.py(819):     def assertIsNot(self, expr1, expr2, msg=None):
case.py(825):     def assertDictEqual(self, d1, d2, msg=None):
case.py(837):     def assertDictContainsSubset(self, expected, actual, msg=None):
case.py(863):     def assertItemsEqual(self, expected_seq, actual_seq, msg=None):
case.py(903):     def assertMultiLineEqual(self, first, second, msg=None):
case.py(926):     def assertLess(self, a, b, msg=None):
case.py(932):     def assertLessEqual(self, a, b, msg=None):
case.py(938):     def assertGreater(self, a, b, msg=None):
case.py(944):     def assertGreaterEqual(self, a, b, msg=None):
case.py(950):     def assertIsNone(self, obj, msg=None):
case.py(956):     def assertIsNotNone(self, obj, msg=None):
case.py(962):     def assertIsInstance(self, obj, cls, msg=None):
case.py(969):     def assertNotIsInstance(self, obj, cls, msg=None):
case.py(976):                            callable_obj=None, *args, **kwargs):
case.py(995):     def assertRegexpMatches(self, text, expected_regexp, msg=None):
case.py(1004):     def assertNotRegexpMatches(self, text, unexpected_regexp, msg=None):
case.py(1018): class FunctionTestCase(TestCase):
 --- modulename: case, funcname: FunctionTestCase
case.py(1018): class FunctionTestCase(TestCase):
case.py(1025):     """
case.py(1027):     def __init__(self, testFunc, setUp=None, tearDown=None, description=None):
case.py(1034):     def setUp(self):
case.py(1038):     def tearDown(self):
case.py(1042):     def runTest(self):
case.py(1045):     def id(self):
case.py(1048):     def __eq__(self, other):
case.py(1057):     def __ne__(self, other):
case.py(1060):     def __hash__(self):
case.py(1064):     def __str__(self):
case.py(1068):     def __repr__(self):
case.py(1072):     def shortDescription(self):
__init__.py(61): from .suite import BaseTestSuite, TestSuite
 --- modulename: suite, funcname: <module>
suite.py(1): """TestSuite"""
suite.py(3): import sys
suite.py(5): from . import case
suite.py(6): from . import util
suite.py(8): __unittest = True
suite.py(11): def _call_if_exists(parent, attr):
suite.py(16): class BaseTestSuite(object):
 --- modulename: suite, funcname: BaseTestSuite
suite.py(16): class BaseTestSuite(object):
suite.py(18):     """
suite.py(19):     def __init__(self, tests=()):
suite.py(23):     def __repr__(self):
suite.py(26):     def __eq__(self, other):
suite.py(31):     def __ne__(self, other):
suite.py(35):     __hash__ = None
suite.py(37):     def __iter__(self):
suite.py(40):     def countTestCases(self):
suite.py(46):     def addTest(self, test):
suite.py(56):     def addTests(self, tests):
suite.py(62):     def run(self, result):
suite.py(69):     def __call__(self, *args, **kwds):
suite.py(72):     def debug(self):
suite.py(78): class TestSuite(BaseTestSuite):
 --- modulename: suite, funcname: TestSuite
suite.py(78): class TestSuite(BaseTestSuite):
suite.py(86):     """
suite.py(88):     def run(self, result, debug=False):
suite.py(118):     def debug(self):
suite.py(125):     def _handleClassSetUp(self, test, result):
suite.py(157):     def _get_previous_module(self, result):
suite.py(165):     def _handleModuleFixture(self, test, result):
suite.py(192):     def _addClassOrModuleLevelException(self, result, exception, errorName):
suite.py(200):     def _handleModuleTearDown(self, result):
suite.py(225):     def _tearDownPreviousClass(self, test, result):
suite.py(252): class _ErrorHolder(object):
 --- modulename: suite, funcname: _ErrorHolder
suite.py(252): class _ErrorHolder(object):
suite.py(257):     """
suite.py(262):     failureException = None
suite.py(264):     def __init__(self, description):
suite.py(267):     def id(self):
suite.py(270):     def shortDescription(self):
suite.py(273):     def __repr__(self):
suite.py(276):     def __str__(self):
suite.py(279):     def run(self, result):
suite.py(284):     def __call__(self, result):
suite.py(287):     def countTestCases(self):
suite.py(290): def _isnotsuite(test):
suite.py(299): class _DebugResult(object):
 --- modulename: suite, funcname: _DebugResult
suite.py(299): class _DebugResult(object):
suite.py(300):     "Used by the TestSuite to hold previous class when running in debug."
suite.py(301):     _previousTestClass = None
suite.py(302):     _moduleSetUpFailed = False
suite.py(303):     shouldStop = False
__init__.py(62): from .loader import (TestLoader, defaultTestLoader, makeSuite, getTestCaseNames,
 --- modulename: loader, funcname: <module>
loader.py(1): """Loading unittests."""
loader.py(3): import os
loader.py(4): import re
loader.py(5): import sys
loader.py(6): import traceback
loader.py(7): import types
loader.py(9): from functools import cmp_to_key as _CmpToKey
loader.py(10): from fnmatch import fnmatch
 --- modulename: fnmatch, funcname: <module>
fnmatch.py(11): """
fnmatch.py(13): import re
fnmatch.py(15): __all__ = ["filter", "fnmatch", "fnmatchcase", "translate"]
fnmatch.py(17): _cache = {}
fnmatch.py(18): _MAXCACHE = 100
fnmatch.py(20): def _purge():
fnmatch.py(24): def fnmatch(name, pat):
fnmatch.py(45): def filter(names, pat):
fnmatch.py(69): def fnmatchcase(name, pat):
fnmatch.py(85): def translate(pat):
loader.py(12): from . import case, suite
loader.py(14): __unittest = True
loader.py(19): VALID_MODULE_NAME = re.compile(r'[_a-z]\w*\.py$', re.IGNORECASE)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(272):         return code
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(695):             subpattern.append((AT, AT_END))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(183):             elif op == SUCCESS:
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(522):         emit(0)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(100):                 emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(101):                 def fixup(literal, flags=flags):
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(266):                         i = fixup(av)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
sre_compile.py(267):                         charmap[i] = 1
sre_compile.py(268):                         if fixes and i in fixes:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(276):                         r = map(fixup, r)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(337):             return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(100):                 emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(101):                 def fixup(literal, flags=flags):
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(286):                 elif op is NEGATE:
sre_compile.py(289):                     tail.append((op, av))
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(337):             return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(243):         elif op is BIGCHARSET:
sre_compile.py(245):         elif op is CATEGORY:
sre_compile.py(246):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(248):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(251):                 emit(CHCODES[av])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(155):         elif op in SUCCESS_CODES:
sre_compile.py(157):         elif op in ASSERT_CODES:
sre_compile.py(170):         elif op is CALL:
sre_compile.py(176):         elif op is AT:
sre_compile.py(177):             emit(OPCODES[op])
sre_compile.py(178):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(180):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(182):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(184):             emit(ATCODES[av])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
loader.py(22): def _make_failed_import_test(name, suiteClass):
loader.py(27): def _make_failed_load_tests(name, exception, suiteClass):
loader.py(30): def _make_failed_test(classname, methodname, exception, suiteClass):
loader.py(38): class TestLoader(object):
 --- modulename: loader, funcname: TestLoader
loader.py(38): class TestLoader(object):
loader.py(42):     """
loader.py(43):     testMethodPrefix = 'test'
loader.py(44):     sortTestMethodsUsing = cmp
loader.py(45):     suiteClass = suite.TestSuite
loader.py(46):     _top_level_dir = None
loader.py(48):     def loadTestsFromTestCase(self, testCaseClass):
loader.py(59):     def loadTestsFromModule(self, module, use_load_tests=True):
loader.py(77):     def loadTestsFromName(self, name, module=None):
loader.py(126):     def loadTestsFromNames(self, names, module=None):
loader.py(133):     def getTestCaseNames(self, testCaseClass):
loader.py(145):     def discover(self, start_dir, pattern='test*.py', top_level_dir=None):
loader.py(209):     def _get_directory_containing_module(self, module_name):
loader.py(221):     def _get_name_from_path(self, path):
loader.py(231):     def _get_module_from_name(self, name):
loader.py(235):     def _match_path(self, path, full_path, pattern):
loader.py(239):     def _find_tests(self, start_dir, pattern):
loader.py(296): defaultTestLoader = TestLoader()
loader.py(299): def _makeLoader(prefix, sortUsing, suiteClass=None):
loader.py(307): def getTestCaseNames(testCaseClass, prefix, sortUsing=cmp):
loader.py(310): def makeSuite(testCaseClass, prefix='test', sortUsing=cmp,
loader.py(311):               suiteClass=suite.TestSuite):
loader.py(314): def findTestCases(module, prefix='test', sortUsing=cmp,
loader.py(315):                   suiteClass=suite.TestSuite):
__init__.py(64): from .main import TestProgram, main
 --- modulename: main, funcname: <module>
main.py(1): """Unittest main program"""
main.py(3): import sys
main.py(4): import os
main.py(5): import types
main.py(7): from . import loader, runner
 --- modulename: runner, funcname: <module>
runner.py(1): """Running tests"""
runner.py(3): import sys
runner.py(4): import time
runner.py(6): from . import result
runner.py(7): from .signals import registerResult
 --- modulename: signals, funcname: <module>
signals.py(1): import signal
signals.py(2): import weakref
 --- modulename: weakref, funcname: <module>
weakref.py(6): """
weakref.py(12): import UserDict
weakref.py(14): from _weakref import (
weakref.py(23): from _weakrefset import WeakSet, _IterationGuard
weakref.py(25): from exceptions import ReferenceError
weakref.py(28): ProxyTypes = (ProxyType, CallableProxyType)
weakref.py(30): __all__ = ["ref", "proxy", "getweakrefcount", "getweakrefs",
weakref.py(31):            "WeakKeyDictionary", "ReferenceError", "ReferenceType", "ProxyType",
weakref.py(32):            "CallableProxyType", "ProxyTypes", "WeakValueDictionary", 'WeakSet']
weakref.py(35): class WeakValueDictionary(UserDict.UserDict):
 --- modulename: weakref, funcname: WeakValueDictionary
weakref.py(35): class WeakValueDictionary(UserDict.UserDict):
weakref.py(40):     """
weakref.py(47):     def __init__(*args, **kw):
weakref.py(68):     def _commit_removals(self):
weakref.py(76):     def __getitem__(self, key):
weakref.py(83):     def __delitem__(self, key):
weakref.py(88):     def __contains__(self, key):
weakref.py(95):     def has_key(self, key):
weakref.py(102):     def __repr__(self):
weakref.py(105):     def __setitem__(self, key, value):
weakref.py(110):     def clear(self):
weakref.py(115):     def copy(self):
weakref.py(123):     __copy__ = copy
weakref.py(125):     def __deepcopy__(self, memo):
weakref.py(134):     def get(self, key, default=None):
weakref.py(147):     def items(self):
weakref.py(155):     def iteritems(self):
weakref.py(162):     def iterkeys(self):
weakref.py(167):     __iter__ = iterkeys
weakref.py(169):     def itervaluerefs(self):
weakref.py(183):     def itervalues(self):
weakref.py(190):     def popitem(self):
weakref.py(199):     def pop(self, key, *args):
weakref.py(213):     def setdefault(self, key, default=None):
weakref.py(224):     def update(*args, **kwargs):
weakref.py(244):     def valuerefs(self):
weakref.py(256):     def values(self):
weakref.py(265): class KeyedRef(ref):
 --- modulename: weakref, funcname: KeyedRef
weakref.py(265): class KeyedRef(ref):
weakref.py(273):     """
weakref.py(275):     __slots__ = "key",
weakref.py(277):     def __new__(type, ob, callback, key):
weakref.py(282):     def __init__(self, ob, callback, key):
weakref.py(286): class WeakKeyDictionary(UserDict.UserDict):
 --- modulename: weakref, funcname: WeakKeyDictionary
weakref.py(286): class WeakKeyDictionary(UserDict.UserDict):
weakref.py(295):     """
weakref.py(297):     def __init__(self, dict=None):
weakref.py(313):     def _commit_removals(self):
weakref.py(326):     def __delitem__(self, key):
weakref.py(329):     def __getitem__(self, key):
weakref.py(332):     def __repr__(self):
weakref.py(335):     def __setitem__(self, key, value):
weakref.py(338):     def copy(self):
weakref.py(346):     __copy__ = copy
weakref.py(348):     def __deepcopy__(self, memo):
weakref.py(357):     def get(self, key, default=None):
weakref.py(360):     def has_key(self, key):
weakref.py(367):     def __contains__(self, key):
weakref.py(374):     def items(self):
weakref.py(382):     def iteritems(self):
weakref.py(389):     def iterkeyrefs(self):
weakref.py(403):     def iterkeys(self):
weakref.py(410):     __iter__ = iterkeys
weakref.py(412):     def itervalues(self):
weakref.py(417):     def keyrefs(self):
weakref.py(429):     def keys(self):
weakref.py(437):     def popitem(self):
weakref.py(444):     def pop(self, key, *args):
weakref.py(447):     def setdefault(self, key, default=None):
weakref.py(450):     def update(self, dict=None, **kwargs):
signals.py(4): from functools import wraps
signals.py(6): __unittest = True
signals.py(9): class _InterruptHandler(object):
 --- modulename: signals, funcname: _InterruptHandler
signals.py(9): class _InterruptHandler(object):
signals.py(10):     def __init__(self, default_handler):
signals.py(28):     def __call__(self, signum, frame):
signals.py(41): _results = weakref.WeakKeyDictionary()
 --- modulename: weakref, funcname: __init__
weakref.py(298):         self.data = {}
weakref.py(299):         def remove(k, selfref=ref(self)):
weakref.py(306):         self._remove = remove
weakref.py(308):         self._pending_removals = []
weakref.py(309):         self._iterating = set()
weakref.py(310):         if dict is not None:
signals.py(42): def registerResult(result):
signals.py(45): def removeResult(result):
signals.py(48): _interrupt_handler = None
signals.py(49): def installHandler():
signals.py(57): def removeHandler(method=None):
runner.py(9): __unittest = True
runner.py(12): class _WritelnDecorator(object):
 --- modulename: runner, funcname: _WritelnDecorator
runner.py(12): class _WritelnDecorator(object):
runner.py(13):     """Used to decorate file-like objects with a handy 'writeln' method"""
runner.py(14):     def __init__(self,stream):
runner.py(17):     def __getattr__(self, attr):
runner.py(22):     def writeln(self, arg=None):
runner.py(28): class TextTestResult(result.TestResult):
 --- modulename: runner, funcname: TextTestResult
runner.py(28): class TextTestResult(result.TestResult):
runner.py(32):     """
runner.py(33):     separator1 = '=' * 70
runner.py(34):     separator2 = '-' * 70
runner.py(36):     def __init__(self, stream, descriptions, verbosity):
runner.py(43):     def getDescription(self, test):
runner.py(50):     def startTest(self, test):
runner.py(57):     def addSuccess(self, test):
runner.py(65):     def addError(self, test, err):
runner.py(73):     def addFailure(self, test, err):
runner.py(81):     def addSkip(self, test, reason):
runner.py(89):     def addExpectedFailure(self, test, err):
runner.py(97):     def addUnexpectedSuccess(self, test):
runner.py(105):     def printErrors(self):
runner.py(111):     def printErrorList(self, flavour, errors):
runner.py(119): class TextTestRunner(object):
 --- modulename: runner, funcname: TextTestRunner
runner.py(119): class TextTestRunner(object):
runner.py(124):     """
runner.py(125):     resultclass = TextTestResult
runner.py(127):     def __init__(self, stream=sys.stderr, descriptions=True, verbosity=1,
runner.py(128):                  failfast=False, buffer=False, resultclass=None):
runner.py(137):     def _makeResult(self):
runner.py(140):     def run(self, test):
main.py(8): from .signals import installHandler
main.py(10): __unittest = True
main.py(12): FAILFAST     = "  -f, --failfast   Stop on first failure\n"
main.py(13): CATCHBREAK   = "  -c, --catch      Catch control-C and display results\n"
main.py(14): BUFFEROUTPUT = "  -b, --buffer     Buffer stdout and stderr during test runs\n"
main.py(43): """
main.py(59): """
main.py(63): class TestProgram(object):
 --- modulename: main, funcname: TestProgram
main.py(63): class TestProgram(object):
main.py(66):     """
main.py(67):     USAGE = USAGE_FROM_MODULE
main.py(70):     failfast = catchbreak = buffer = progName = None
main.py(72):     def __init__(self, module='__main__', defaultTest=None, argv=None,
main.py(73):                     testRunner=None, testLoader=loader.defaultTestLoader,
main.py(74):                     exit=True, verbosity=1, failfast=None, catchbreak=None,
main.py(75):                     buffer=None):
main.py(97):     def usageExit(self, msg=None):
main.py(111):     def parseArgs(self, argv):
main.py(153):     def createTests(self):
main.py(160):     def _do_discovery(self, argv, Loader=None):
main.py(216):     def runTests(self):
main.py(236): main = TestProgram
__init__.py(65): from .runner import TextTestRunner, TextTestResult
__init__.py(66): from .signals import installHandler, registerResult, removeResult, removeHandler
__init__.py(69): _TextTestResult = TextTestResult
__init__.py(12): from . import decorators as dec
 --- modulename: decorators, funcname: <module>
decorators.py(15): """
decorators.py(16): from __future__ import division, absolute_import, print_function
decorators.py(18): import warnings
decorators.py(19): import collections
decorators.py(22): def slow(t):
decorators.py(57): def setastest(tf=True):
decorators.py(90): def skipif(skip_condition, msg=None):
decorators.py(167): def knownfailureif(fail_condition, msg=None):
decorators.py(221): def deprecated(conditional=True):
__init__.py(13): from .nosetester import run_module_suite, NoseTester as Tester
 --- modulename: nosetester, funcname: <module>
nosetester.py(6): """
nosetester.py(7): from __future__ import division, absolute_import, print_function
nosetester.py(9): import os
nosetester.py(10): import sys
nosetester.py(11): import warnings
nosetester.py(12): from numpy.compat import basestring
nosetester.py(13): import numpy as np
nosetester.py(16): def get_package_name(filepath):
nosetester.py(56): def import_nose():
nosetester.py(77): def run_module_suite(file_to_run=None, argv=None):
nosetester.py(128): class NoseTester(object):
 --- modulename: nosetester, funcname: NoseTester
nosetester.py(128): class NoseTester(object):
nosetester.py(171):     """
nosetester.py(173):     excludes = ['f2py_ext',
nosetester.py(174):                 'f2py_f90_ext',
nosetester.py(175):                 'gen_ext',
nosetester.py(176):                 'pyrex_ext',
nosetester.py(177):                 'swig_ext']
nosetester.py(179):     def __init__(self, package=None, raise_warnings=None):
nosetester.py(211):     def _test_argv(self, label, verbose, extra_argv):
nosetester.py(248):     def _show_system_info(self):
nosetester.py(268):     def _get_custom_doctester(self):
nosetester.py(278):     def prepare_test_args(self, label='fast', verbose=1, extra_argv=None,
nosetester.py(279):                           doctests=False, coverage=False):
nosetester.py(324):     def test(self, label='fast', verbose=1, extra_argv=None,
nosetester.py(325):             doctests=False, coverage=False,
nosetester.py(326):             raise_warnings=None):
nosetester.py(447):     def bench(self, label='fast', verbose=1, extra_argv=None):
__init__.py(14): from .utils import *
 --- modulename: utils, funcname: <module>
utils.py(4): """
utils.py(5): from __future__ import division, absolute_import, print_function
utils.py(7): import os
utils.py(8): import sys
utils.py(9): import re
utils.py(10): import operator
utils.py(11): import warnings
utils.py(12): from functools import partial
utils.py(13): import shutil
 --- modulename: shutil, funcname: <module>
shutil.py(5): """
shutil.py(7): import os
shutil.py(8): import sys
shutil.py(9): import stat
shutil.py(10): from os.path import abspath
shutil.py(11): import fnmatch
shutil.py(12): import collections
shutil.py(13): import errno
shutil.py(15): try:
shutil.py(16):     from pwd import getpwnam
shutil.py(20): try:
shutil.py(21):     from grp import getgrnam
shutil.py(25): __all__ = ["copyfileobj", "copyfile", "copymode", "copystat", "copy", "copy2",
shutil.py(26):            "copytree", "move", "rmtree", "Error", "SpecialFileError",
shutil.py(27):            "ExecError", "make_archive", "get_archive_formats",
shutil.py(28):            "register_archive_format", "unregister_archive_format",
shutil.py(29):            "ignore_patterns"]
shutil.py(31): class Error(EnvironmentError):
 --- modulename: shutil, funcname: Error
shutil.py(31): class Error(EnvironmentError):
shutil.py(32):     pass
shutil.py(34): class SpecialFileError(EnvironmentError):
 --- modulename: shutil, funcname: SpecialFileError
shutil.py(34): class SpecialFileError(EnvironmentError):
shutil.py(36):     not supported on a special file (e.g. a named pipe)"""
shutil.py(38): class ExecError(EnvironmentError):
 --- modulename: shutil, funcname: ExecError
shutil.py(38): class ExecError(EnvironmentError):
shutil.py(39):     """Raised when a command could not be executed"""
shutil.py(41): try:
shutil.py(42):     WindowsError
shutil.py(43): except NameError:
shutil.py(44):     WindowsError = None
shutil.py(46): def copyfileobj(fsrc, fdst, length=16*1024):
shutil.py(54): def _samefile(src, dst):
shutil.py(66): def copyfile(src, dst):
shutil.py(86): def copymode(src, dst):
shutil.py(93): def copystat(src, dst):
shutil.py(111): def copy(src, dst):
shutil.py(122): def copy2(src, dst):
shutil.py(133): def ignore_patterns(*patterns):
shutil.py(145): def copytree(src, dst, symlinks=False, ignore=None):
shutil.py(210): def rmtree(path, ignore_errors=False, onerror=None):
shutil.py(259): def _basename(path):
shutil.py(265): def move(src, dst):
shutil.py(305): def _destinsrc(src, dst):
shutil.py(314): def _get_gid(name):
shutil.py(326): def _get_uid(name):
shutil.py(338): def _make_tarball(base_name, base_dir, compress="gzip", verbose=0, dry_run=0,
shutil.py(339):                   owner=None, group=None, logger=None):
shutil.py(399): def _call_external_zip(base_dir, zip_filename, verbose=False, dry_run=False):
shutil.py(417): def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
shutil.py(471): _ARCHIVE_FORMATS = {
shutil.py(472):     'gztar': (_make_tarball, [('compress', 'gzip')], "gzip'ed tar-file"),
shutil.py(473):     'bztar': (_make_tarball, [('compress', 'bzip2')], "bzip2'ed tar-file"),
shutil.py(474):     'tar':   (_make_tarball, [('compress', None)], "uncompressed tar file"),
shutil.py(475):     'zip':   (_make_zipfile, [],"ZIP file")
shutil.py(478): def get_archive_formats():
shutil.py(488): def register_archive_format(name, function, extra_args=None, description=''):
shutil.py(509): def unregister_archive_format(name):
shutil.py(512): def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,
shutil.py(513):                  dry_run=0, owner=None, group=None, logger=None):
utils.py(14): import contextlib
 --- modulename: contextlib, funcname: <module>
contextlib.py(1): """Utilities for with-statement contexts.  See PEP 343."""
contextlib.py(3): import sys
contextlib.py(4): from functools import wraps
contextlib.py(5): from warnings import warn
contextlib.py(7): __all__ = ["contextmanager", "nested", "closing"]
contextlib.py(9): class GeneratorContextManager(object):
 --- modulename: contextlib, funcname: GeneratorContextManager
contextlib.py(9): class GeneratorContextManager(object):
contextlib.py(10):     """Helper for @contextmanager decorator."""
contextlib.py(12):     def __init__(self, gen):
contextlib.py(15):     def __enter__(self):
contextlib.py(21):     def __exit__(self, type, value, traceback):
contextlib.py(54): def contextmanager(func):
contextlib.py(88): @contextmanager
 --- modulename: contextlib, funcname: contextmanager
contextlib.py(82):     @wraps(func)
 --- modulename: functools, funcname: wraps
functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(34):     for attr in updated:
functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
functools.py(34):     for attr in updated:
functools.py(37):     return wrapper
contextlib.py(85):     return helper
contextlib.py(132): class closing(object):
 --- modulename: contextlib, funcname: closing
contextlib.py(132): class closing(object):
contextlib.py(148):     """
contextlib.py(149):     def __init__(self, thing):
contextlib.py(151):     def __enter__(self):
contextlib.py(153):     def __exit__(self, *exc_info):
utils.py(15): from tempfile import mkdtemp
 --- modulename: tempfile, funcname: <module>
tempfile.py(18): """
tempfile.py(21):     "NamedTemporaryFile", "TemporaryFile", # high level safe interfaces
tempfile.py(22):     "SpooledTemporaryFile",
tempfile.py(23):     "mkstemp", "mkdtemp",                  # low level safe interfaces
tempfile.py(24):     "mktemp",                              # deprecated unsafe interface
tempfile.py(25):     "TMP_MAX", "gettempprefix",            # constants
tempfile.py(26):     "tempdir", "gettempdir"
tempfile.py(32): import io as _io
 --- modulename: io, funcname: <module>
io.py(34): """
io.py(37): __author__ = ("Guido van Rossum <guido@python.org>, "
io.py(44): __all__ = ["BlockingIOError", "open", "IOBase", "RawIOBase", "FileIO",
io.py(45):            "BytesIO", "StringIO", "BufferedIOBase",
io.py(46):            "BufferedReader", "BufferedWriter", "BufferedRWPair",
io.py(47):            "BufferedRandom", "TextIOBase", "TextIOWrapper",
io.py(48):            "UnsupportedOperation", "SEEK_SET", "SEEK_CUR", "SEEK_END"]
io.py(51): import _io
io.py(52): import abc
io.py(54): from _io import (DEFAULT_BUFFER_SIZE, BlockingIOError, UnsupportedOperation,
io.py(59): OpenWrapper = _io.open # for compatibility with _pyio
io.py(62): SEEK_SET = 0
io.py(63): SEEK_CUR = 1
io.py(64): SEEK_END = 2
io.py(69): class IOBase(_io._IOBase):
 --- modulename: io, funcname: IOBase
io.py(69): class IOBase(_io._IOBase):
io.py(70):     __metaclass__ = abc.ABCMeta
io.py(71):     __doc__ = _io._IOBase.__doc__
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
io.py(73): class RawIOBase(_io._RawIOBase, IOBase):
 --- modulename: io, funcname: RawIOBase
io.py(73): class RawIOBase(_io._RawIOBase, IOBase):
io.py(74):     __doc__ = _io._RawIOBase.__doc__
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
io.py(76): class BufferedIOBase(_io._BufferedIOBase, IOBase):
 --- modulename: io, funcname: BufferedIOBase
io.py(76): class BufferedIOBase(_io._BufferedIOBase, IOBase):
io.py(77):     __doc__ = _io._BufferedIOBase.__doc__
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
io.py(79): class TextIOBase(_io._TextIOBase, IOBase):
 --- modulename: io, funcname: TextIOBase
io.py(79): class TextIOBase(_io._TextIOBase, IOBase):
io.py(80):     __doc__ = _io._TextIOBase.__doc__
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
io.py(82): RawIOBase.register(FileIO)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(158):         elif subclass in cls._abc_negative_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
io.py(84): for klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,
io.py(85):               BufferedRWPair):
io.py(86):     BufferedIOBase.register(klass)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
io.py(85):               BufferedRWPair):
io.py(86):     BufferedIOBase.register(klass)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
io.py(85):               BufferedRWPair):
io.py(86):     BufferedIOBase.register(klass)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
io.py(85):               BufferedRWPair):
io.py(86):     BufferedIOBase.register(klass)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
io.py(85):               BufferedRWPair):
io.py(86):     BufferedIOBase.register(klass)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
io.py(85):               BufferedRWPair):
io.py(88): for klass in (StringIO, TextIOWrapper):
io.py(89):     TextIOBase.register(klass)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
io.py(88): for klass in (StringIO, TextIOWrapper):
io.py(89):     TextIOBase.register(klass)
 --- modulename: abc, funcname: register
abc.py(107):         if not isinstance(subclass, (type, types.ClassType)):
abc.py(109):         if issubclass(subclass, cls):
 --- modulename: abc, funcname: __subclasscheck__
abc.py(151):         if subclass in cls._abc_cache:
 --- modulename: _weakrefset, funcname: __contains__
_weakrefset.py(71):         try:
_weakrefset.py(72):             wr = ref(item)
_weakrefset.py(75):         return wr in self.data
abc.py(154):         if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:
abc.py(156):             cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(157):             cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(161):         ok = cls.__subclasshook__(subclass)
abc.py(162):         if ok is not NotImplemented:
abc.py(170):         if cls in getattr(subclass, '__mro__', ()):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(59):         with _IterationGuard(self):
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(18):         self.weakcontainer = ref(weakcontainer)
 --- modulename: _weakrefset, funcname: __enter__
_weakrefset.py(21):         w = self.weakcontainer()
_weakrefset.py(22):         if w is not None:
_weakrefset.py(23):             w._iterating.add(self)
_weakrefset.py(24):         return self
_weakrefset.py(60):             for itemref in self.data:
_weakrefset.py(61):                 item = itemref()
_weakrefset.py(62):                 if item is not None:
_weakrefset.py(65):                     yield item
abc.py(175):             if issubclass(subclass, rcls):
abc.py(174):         for rcls in cls._abc_registry:
 --- modulename: _weakrefset, funcname: __iter__
_weakrefset.py(60):             for itemref in self.data:
 --- modulename: _weakrefset, funcname: __exit__
_weakrefset.py(27):         w = self.weakcontainer()
_weakrefset.py(28):         if w is not None:
_weakrefset.py(29):             s = w._iterating
_weakrefset.py(30):             s.remove(self)
_weakrefset.py(31):             if not s:
_weakrefset.py(32):                 w._commit_removals()
 --- modulename: _weakrefset, funcname: _commit_removals
_weakrefset.py(53):         l = self._pending_removals
_weakrefset.py(54):         discard = self.data.discard
_weakrefset.py(55):         while l:
abc.py(179):         for scls in cls.__subclasses__():
abc.py(184):         cls._abc_negative_cache.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(185):         return False
abc.py(113):         if issubclass(cls, subclass):
abc.py(116):         cls._abc_registry.add(subclass)
 --- modulename: _weakrefset, funcname: add
_weakrefset.py(84):         if self._pending_removals:
_weakrefset.py(86):         self.data.add(ref(item, self._remove))
abc.py(117):         ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache
io.py(88): for klass in (StringIO, TextIOWrapper):
io.py(90): del klass
tempfile.py(33): import os as _os
tempfile.py(34): import errno as _errno
tempfile.py(35): from random import Random as _Random
 --- modulename: random, funcname: <module>
random.py(40): """
random.py(42): from __future__ import division
random.py(43): from warnings import warn as _warn
random.py(44): from types import MethodType as _MethodType, BuiltinMethodType as _BuiltinMethodType
random.py(45): from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil
random.py(46): from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin
random.py(47): from os import urandom as _urandom
random.py(48): from binascii import hexlify as _hexlify
random.py(49): import hashlib as _hashlib
 --- modulename: hashlib, funcname: <module>
hashlib.py(56): """
hashlib.py(60): __always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')
hashlib.py(62): algorithms_guaranteed = set(__always_supported)
hashlib.py(63): algorithms_available = set(__always_supported)
hashlib.py(65): algorithms = __always_supported
hashlib.py(67): __all__ = __always_supported + ('new', 'algorithms_guaranteed',
hashlib.py(69):                                 'pbkdf2_hmac')
hashlib.py(72): def __get_builtin_constructor(name):
hashlib.py(100): def __get_openssl_constructor(name):
hashlib.py(112): def __py_new(name, string=''):
hashlib.py(119): def __hash_new(name, string=''):
hashlib.py(133): try:
hashlib.py(134):     import _hashlib
hashlib.py(135):     new = __hash_new
hashlib.py(136):     __get_hash = __get_openssl_constructor
hashlib.py(137):     algorithms_available = algorithms_available.union(
hashlib.py(138):         _hashlib.openssl_md_meth_names)
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(146):     try:
hashlib.py(147):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(101):     try:
hashlib.py(102):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(105):         f()
hashlib.py(107):         return f
hashlib.py(143): for __func_name in __always_supported:
hashlib.py(153): try:
hashlib.py(155):     from _hashlib import pbkdf2_hmac
hashlib.py(220): del __always_supported, __func_name, __get_hash
hashlib.py(221): del __py_new, __hash_new, __get_openssl_constructor
random.py(51): __all__ = ["Random","seed","random","uniform","randint","choice","sample",
random.py(52):            "randrange","shuffle","normalvariate","lognormvariate",
random.py(53):            "expovariate","vonmisesvariate","gammavariate","triangular",
random.py(54):            "gauss","betavariate","paretovariate","weibullvariate",
random.py(55):            "getstate","setstate","jumpahead", "WichmannHill", "getrandbits",
random.py(56):            "SystemRandom"]
random.py(58): NV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)
random.py(59): TWOPI = 2.0*_pi
random.py(60): LOG4 = _log(4.0)
random.py(61): SG_MAGICCONST = 1.0 + _log(4.5)
random.py(62): BPF = 53        # Number of bits in a float
random.py(63): RECIP_BPF = 2**-BPF
random.py(70): import _random
random.py(72): class Random(_random.Random):
 --- modulename: random, funcname: Random
random.py(72): class Random(_random.Random):
random.py(87):     """
random.py(89):     VERSION = 3     # used by getstate/setstate
random.py(91):     def __init__(self, x=None):
random.py(100):     def seed(self, a=None):
random.py(121):     def getstate(self):
random.py(125):     def setstate(self, state):
random.py(147):     def jumpahead(self, n):
random.py(164):     def __getstate__(self): # for pickle
random.py(167):     def __setstate__(self, state):  # for pickle
random.py(170):     def __reduce__(self):
random.py(175):     def randrange(self, start, stop=None, step=1, _int=int, _maxwidth=1L<<BPF):
random.py(238):     def randint(self, a, b):
random.py(244):     def _randbelow(self, n, _log=_log, _int=int, _maxwidth=1L<<BPF,
random.py(245):                    _Method=_MethodType, _BuiltinMethod=_BuiltinMethodType):
random.py(273):     def choice(self, seq):
random.py(277):     def shuffle(self, x, random=None):
random.py(293):     def sample(self, population, k):
random.py(358):     def uniform(self, a, b):
random.py(364):     def triangular(self, low=0.0, high=1.0, mode=None):
random.py(386):     def normalvariate(self, mu, sigma):
random.py(411):     def lognormvariate(self, mu, sigma):
random.py(423):     def expovariate(self, lambd):
random.py(442):     def vonmisesvariate(self, mu, kappa):
random.py(490):     def gammavariate(self, alpha, beta):
random.py(562):     def gauss(self, mu, sigma):
random.py(615):     def betavariate(self, alpha, beta):
random.py(633):     def paretovariate(self, alpha):
random.py(642):     def weibullvariate(self, alpha, beta):
random.py(655): class WichmannHill(Random):
 --- modulename: random, funcname: WichmannHill
random.py(655): class WichmannHill(Random):
random.py(657):     VERSION = 1     # used by getstate/setstate
random.py(659):     def seed(self, a=None):
random.py(690):     def random(self):
random.py(721):     def getstate(self):
random.py(725):     def setstate(self, state):
random.py(735):     def jumpahead(self, n):
random.py(757):     def __whseed(self, x=0, y=0, z=0):
random.py(780):     def whseed(self, a=None):
random.py(805): class SystemRandom(Random):
 --- modulename: random, funcname: SystemRandom
random.py(805): class SystemRandom(Random):
random.py(811):     """
random.py(813):     def random(self):
random.py(817):     def getrandbits(self, k):
random.py(827):     def _stub(self, *args, **kwds):
random.py(830):     seed = jumpahead = _stub
random.py(832):     def _notimplemented(self, *args, **kwds):
random.py(835):     getstate = setstate = _notimplemented
random.py(839): def _test_generator(n, func, args):
random.py(861): def _test(N=2000):
random.py(885): _inst = Random()
 --- modulename: random, funcname: __init__
random.py(97):         self.seed(x)
 --- modulename: random, funcname: seed
random.py(109):         if a is None:
random.py(110):             try:
random.py(113):                 a = long(_hexlify(_urandom(2500)), 16)
random.py(118):         super(Random, self).seed(a)
random.py(119):         self.gauss_next = None
random.py(98):         self.gauss_next = None
random.py(886): seed = _inst.seed
random.py(887): random = _inst.random
random.py(888): uniform = _inst.uniform
random.py(889): triangular = _inst.triangular
random.py(890): randint = _inst.randint
random.py(891): choice = _inst.choice
random.py(892): randrange = _inst.randrange
random.py(893): sample = _inst.sample
random.py(894): shuffle = _inst.shuffle
random.py(895): normalvariate = _inst.normalvariate
random.py(896): lognormvariate = _inst.lognormvariate
random.py(897): expovariate = _inst.expovariate
random.py(898): vonmisesvariate = _inst.vonmisesvariate
random.py(899): gammavariate = _inst.gammavariate
random.py(900): gauss = _inst.gauss
random.py(901): betavariate = _inst.betavariate
random.py(902): paretovariate = _inst.paretovariate
random.py(903): weibullvariate = _inst.weibullvariate
random.py(904): getstate = _inst.getstate
random.py(905): setstate = _inst.setstate
random.py(906): jumpahead = _inst.jumpahead
random.py(907): getrandbits = _inst.getrandbits
random.py(909): if __name__ == '__main__':
tempfile.py(37): try:
tempfile.py(38):     from cStringIO import StringIO as _StringIO
tempfile.py(42): try:
tempfile.py(43):     import fcntl as _fcntl
tempfile.py(48):     def _set_cloexec(fd):
tempfile.py(59): try:
tempfile.py(60):     import thread as _thread
tempfile.py(63): _allocate_lock = _thread.allocate_lock
tempfile.py(65): _text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL
tempfile.py(66): if hasattr(_os, 'O_NOINHERIT'):
tempfile.py(68): if hasattr(_os, 'O_NOFOLLOW'):
tempfile.py(69):     _text_openflags |= _os.O_NOFOLLOW
tempfile.py(71): _bin_openflags = _text_openflags
tempfile.py(72): if hasattr(_os, 'O_BINARY'):
tempfile.py(75): if hasattr(_os, 'TMP_MAX'):
tempfile.py(76):     TMP_MAX = _os.TMP_MAX
tempfile.py(80): template = "tmp"
tempfile.py(84): _once_lock = _allocate_lock()
tempfile.py(86): if hasattr(_os, "lstat"):
tempfile.py(87):     _stat = _os.lstat
tempfile.py(100): def _exists(fn):
tempfile.py(108): class _RandomNameSequence:
 --- modulename: tempfile, funcname: _RandomNameSequence
tempfile.py(108): class _RandomNameSequence:
tempfile.py(114):     _RandomNameSequence is an iterator."""
tempfile.py(117):                   "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
tempfile.py(118):                   "0123456789_")
tempfile.py(120):     def __init__(self):
tempfile.py(124):     @property
tempfile.py(132):     def __iter__(self):
tempfile.py(135):     def next(self):
tempfile.py(148): def _candidate_tempdir_list():
tempfile.py(176): def _get_default_tempdir():
tempfile.py(219): _name_sequence = None
tempfile.py(221): def _get_candidate_names():
tempfile.py(235): def _mkstemp_inner(dir, pre, suf, flags):
tempfile.py(262): def gettempprefix():
tempfile.py(266): tempdir = None
tempfile.py(268): def gettempdir():
tempfile.py(280): def mkstemp(suffix="", prefix=template, dir=None, text=False):
tempfile.py(317): def mkdtemp(suffix="", prefix=template, dir=None):
tempfile.py(353): def mktemp(suffix="", prefix=template, dir=None):
tempfile.py(383): class _TemporaryFileWrapper:
 --- modulename: tempfile, funcname: _TemporaryFileWrapper
tempfile.py(383): class _TemporaryFileWrapper:
tempfile.py(389):     """
tempfile.py(391):     def __init__(self, file, name, delete=True):
tempfile.py(397):     def __getattr__(self, name):
tempfile.py(409):     def __enter__(self):
tempfile.py(416):     if _os.name != 'nt':
tempfile.py(422):         unlink = _os.unlink
tempfile.py(424):         def close(self):
tempfile.py(433):         def __del__(self):
tempfile.py(438):         def __exit__(self, exc, value, tb):
tempfile.py(447): def NamedTemporaryFile(mode='w+b', bufsize=-1, suffix="",
tempfile.py(448):                        prefix=template, dir=None, delete=True):
tempfile.py(483): if _os.name != 'posix' or _os.sys.platform == 'cygwin':
tempfile.py(489):     def TemporaryFile(mode='w+b', bufsize=-1, suffix="",
tempfile.py(490):                       prefix=template, dir=None):
tempfile.py(518): class SpooledTemporaryFile:
 --- modulename: tempfile, funcname: SpooledTemporaryFile
tempfile.py(518): class SpooledTemporaryFile:
tempfile.py(522):     """
tempfile.py(523):     _rolled = False
tempfile.py(525):     def __init__(self, max_size=0, mode='w+b', bufsize=-1,
tempfile.py(526):                  suffix="", prefix=template, dir=None):
tempfile.py(532):     def _check(self, file):
tempfile.py(538):     def rollover(self):
tempfile.py(555):     def __enter__(self):
tempfile.py(560):     def __exit__(self, exc, value, tb):
tempfile.py(564):     def __iter__(self):
tempfile.py(567):     def close(self):
tempfile.py(570):     @property
tempfile.py(574):     def fileno(self):
tempfile.py(578):     def flush(self):
tempfile.py(581):     def isatty(self):
tempfile.py(584):     @property
tempfile.py(591):     @property
tempfile.py(598):     def next(self):
tempfile.py(601):     def read(self, *args):
tempfile.py(604):     def readline(self, *args):
tempfile.py(607):     def readlines(self, *args):
tempfile.py(610):     def seek(self, *args):
tempfile.py(613):     @property
tempfile.py(617):     def tell(self):
tempfile.py(620):     def truncate(self):
tempfile.py(623):     def write(self, s):
tempfile.py(629):     def writelines(self, iterable):
tempfile.py(635):     def xreadlines(self, *args):
utils.py(16): from .nosetester import import_nose
utils.py(17): from numpy.core import float32, empty, arange, array_repr, ndarray
utils.py(19): if sys.version_info[0] >= 3:
utils.py(22):     from StringIO import StringIO
utils.py(24): __all__ = ['assert_equal', 'assert_almost_equal', 'assert_approx_equal',
utils.py(25):            'assert_array_equal', 'assert_array_less', 'assert_string_equal',
utils.py(26):            'assert_array_almost_equal', 'assert_raises', 'build_err_msg',
utils.py(27):            'decorate_methods', 'jiffies', 'memusage', 'print_assert_equal',
utils.py(28):            'raises', 'rand', 'rundocs', 'runstring', 'verbose', 'measure',
utils.py(29):            'assert_', 'assert_array_almost_equal_nulp', 'assert_raises_regex',
utils.py(30):            'assert_array_max_ulp', 'assert_warns', 'assert_no_warnings',
utils.py(31):            'assert_allclose', 'IgnoreException', 'clear_and_catch_warnings']
utils.py(34): verbose = 0
utils.py(37): def assert_(val, msg=''):
utils.py(55): def gisnan(x):
utils.py(72): def gisfinite(x):
utils.py(90): def gisinf(x):
utils.py(108): def rand(*args):
utils.py(121): if os.name == 'nt':
utils.py(155): elif sys.platform[:5] == 'linux':
utils.py(157):     def memusage(_proc_pid_stat='/proc/%s/stat' % (os.getpid())):
utils.py(178): if sys.platform[:5] == 'linux':
utils.py(179):     def jiffies(_proc_pid_stat='/proc/%s/stat' % (os.getpid()),
utils.py(180):                 _load_time=[]):
utils.py(216): def build_err_msg(arrays, err_msg, header='Items are not equal:',
utils.py(217):                   verbose=True, names=('ACTUAL', 'DESIRED'), precision=8):
utils.py(243): def assert_equal(actual,desired,err_msg='',verbose=True):
utils.py(357): def print_assert_equal(test_string, actual, desired):
utils.py(397): def assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True):
utils.py(516): def assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True):
utils.py(613): def assert_array_compare(comparison, x, y, err_msg='', verbose=True,
utils.py(614):                          header='', precision=6):
utils.py(723): def assert_array_equal(x, y, err_msg='', verbose=True):
utils.py(789): def assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True):
utils.py(895): def assert_array_less(x, y, err_msg='', verbose=True):
utils.py(966): def runstring(astr, dict):
utils.py(969): def assert_string_equal(actual, desired):
utils.py(1039): def rundocs(filename=None, raise_on_error=True):
utils.py(1090): def raises(*args,**kwargs):
utils.py(1095): def assert_raises(*args,**kwargs):
utils.py(1112): assert_raises_regex_impl = None
utils.py(1116):                         callable_obj=None, *args, **kwargs):
utils.py(1191): def decorate_methods(cls, decorator, testmatch=None):
utils.py(1238): def measure(code_str,times=1,label=None):
utils.py(1286): def _assert_valid_refcount(op):
utils.py(1304): def assert_allclose(actual, desired, rtol=1e-7, atol=0, equal_nan=False,
utils.py(1305):                     err_msg='', verbose=True):
utils.py(1361): def assert_array_almost_equal_nulp(x, y, nulp=1):
utils.py(1423): def assert_array_max_ulp(a, b, maxulp=1, dtype=None):
utils.py(1467): def nulp_diff(x, y, dtype=None):
utils.py(1520): def _integer_repr(x, vdt, comp):
utils.py(1534): def integer_repr(x):
utils.py(1547): class WarningMessage(object):
 --- modulename: utils, funcname: WarningMessage
utils.py(1547): class WarningMessage(object):
utils.py(1559):     """
utils.py(1562):                         "line")
utils.py(1564):     def __init__(self, message, category, filename, lineno, file=None,
utils.py(1565):                     line=None):
utils.py(1574):     def __str__(self):
utils.py(1579): class WarningManager(object):
 --- modulename: utils, funcname: WarningManager
utils.py(1579): class WarningManager(object):
utils.py(1602):     """
utils.py(1604):     def __init__(self, record=False, module=None):
utils.py(1612):     def __enter__(self):
utils.py(1629):     def __exit__(self):
utils.py(1636): def assert_warns(warning_class, func, *args, **kw):
utils.py(1675): def assert_no_warnings(func, *args, **kw):
utils.py(1705): def _gen_alignment_data(dtype=float32, type='binary', max_size=24):
utils.py(1771): class IgnoreException(Exception):
 --- modulename: utils, funcname: IgnoreException
utils.py(1771): class IgnoreException(Exception):
utils.py(1772):     "Ignoring this exception due to disabled feature"
utils.py(1775): @contextlib.contextmanager
 --- modulename: contextlib, funcname: contextmanager
contextlib.py(82):     @wraps(func)
 --- modulename: functools, funcname: wraps
functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(34):     for attr in updated:
functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
functools.py(34):     for attr in updated:
functools.py(37):     return wrapper
contextlib.py(85):     return helper
utils.py(1788): class clear_and_catch_warnings(warnings.catch_warnings):
 --- modulename: utils, funcname: clear_and_catch_warnings
utils.py(1788): class clear_and_catch_warnings(warnings.catch_warnings):
utils.py(1825):     """
utils.py(1826):     class_modules = ()
utils.py(1828):     def __init__(self, record=False, modules=()):
utils.py(1833):     def __enter__(self):
utils.py(1841):     def __exit__(self, *exc_info):
__init__.py(15): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(59): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(60): bench = Tester().bench
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(66): def _ufunc_reconstruct(module, name):
__init__.py(74): def _ufunc_reduce(func):
__init__.py(80): import sys
__init__.py(81): if sys.version_info[0] >= 3:
__init__.py(84):     import copy_reg as copyreg
__init__.py(86): copyreg.pickle(ufunc, _ufunc_reduce, _ufunc_reconstruct)
 --- modulename: copy_reg, funcname: pickle
copy_reg.py(15):     if type(ob_type) is _ClassType:
copy_reg.py(18):     if not hasattr(pickle_function, '__call__'):
copy_reg.py(20):     dispatch_table[ob_type] = pickle_function
copy_reg.py(24):     if constructor_ob is not None:
copy_reg.py(25):         constructor(constructor_ob)
 --- modulename: copy_reg, funcname: constructor
copy_reg.py(28):     if not hasattr(object, '__call__'):
__init__.py(88): del copyreg
__init__.py(89): del sys
__init__.py(90): del _ufunc_reduce
type_check.py(12): from numpy.core.numeric import asarray, asanyarray, array, isnan, \
type_check.py(14): from .ufunclike import isneginf, isposinf
 --- modulename: ufunclike, funcname: <module>
ufunclike.py(5): """
ufunclike.py(6): from __future__ import division, absolute_import, print_function
ufunclike.py(8): __all__ = ['fix', 'isneginf', 'isposinf']
ufunclike.py(10): import numpy.core.numeric as nx
ufunclike.py(12): def fix(x, y=None):
ufunclike.py(54): def isposinf(x, y=None):
ufunclike.py(116): def isneginf(x, y=None):
type_check.py(16): _typecodes_by_elsize = 'GDFgdfQqLlIiHhBb?'
type_check.py(18): def mintypecode(typechars,typeset='GDFgdf',default='d'):
type_check.py(75): def asfarray(a, dtype=_nx.float_):
type_check.py(107): def real(val):
type_check.py(141): def imag(val):
type_check.py(172): def iscomplex(x):
type_check.py(207): def isreal(x):
type_check.py(237): def iscomplexobj(x):
type_check.py(271): def isrealobj(x):
type_check.py(307): def _getmaxmin(t):
type_check.py(312): def nan_to_num(x):
type_check.py(377): def real_if_close(a,tol=100):
type_check.py(432): def asscalar(a):
type_check.py(457): _namefromtype = {'S1': 'character',
type_check.py(458):                  '?': 'bool',
type_check.py(459):                  'b': 'signed char',
type_check.py(460):                  'B': 'unsigned char',
type_check.py(461):                  'h': 'short',
type_check.py(462):                  'H': 'unsigned short',
type_check.py(463):                  'i': 'integer',
type_check.py(464):                  'I': 'unsigned integer',
type_check.py(465):                  'l': 'long integer',
type_check.py(466):                  'L': 'unsigned long integer',
type_check.py(467):                  'q': 'long long integer',
type_check.py(468):                  'Q': 'unsigned long long integer',
type_check.py(469):                  'f': 'single precision',
type_check.py(470):                  'd': 'double precision',
type_check.py(471):                  'g': 'long precision',
type_check.py(472):                  'F': 'complex single precision',
type_check.py(473):                  'D': 'complex double precision',
type_check.py(474):                  'G': 'complex long double precision',
type_check.py(475):                  'S': 'string',
type_check.py(476):                  'U': 'unicode',
type_check.py(477):                  'V': 'void',
type_check.py(478):                  'O': 'object'
type_check.py(481): def typename(char):
type_check.py(535): array_type = [[_nx.half, _nx.single, _nx.double, _nx.longdouble],
type_check.py(536):               [None, _nx.csingle, _nx.cdouble, _nx.clongdouble]]
type_check.py(537): array_precision = {_nx.half: 0,
type_check.py(538):                    _nx.single: 1,
type_check.py(539):                    _nx.double: 2,
type_check.py(540):                    _nx.longdouble: 3,
type_check.py(541):                    _nx.csingle: 1,
type_check.py(542):                    _nx.cdouble: 2,
type_check.py(543):                    _nx.clongdouble: 3}
type_check.py(544): def common_type(*arrays):
__init__.py(9): from .index_tricks import *
 --- modulename: index_tricks, funcname: <module>
index_tricks.py(1): from __future__ import division, absolute_import, print_function
index_tricks.py(3): import sys
index_tricks.py(4): import math
index_tricks.py(6): import numpy.core.numeric as _nx
index_tricks.py(7): from numpy.core.numeric import (
index_tricks.py(10): from numpy.core.numerictypes import find_common_type, issubdtype
index_tricks.py(12): from . import function_base
 --- modulename: function_base, funcname: <module>
function_base.py(1): from __future__ import division, absolute_import, print_function
function_base.py(3): import warnings
function_base.py(4): import sys
function_base.py(5): import collections
function_base.py(6): import operator
function_base.py(8): import numpy as np
function_base.py(9): import numpy.core.numeric as _nx
function_base.py(10): from numpy.core import linspace, atleast_1d, atleast_2d
function_base.py(11): from numpy.core.numeric import (
function_base.py(16): from numpy.core.umath import (
function_base.py(20): from numpy.core.fromnumeric import (
function_base.py(23): from numpy.core.numerictypes import typecodes, number
function_base.py(24): from numpy.lib.twodim_base import diag
 --- modulename: twodim_base, funcname: <module>
twodim_base.py(3): """
twodim_base.py(4): from __future__ import division, absolute_import, print_function
twodim_base.py(6): from numpy.core.numeric import (
twodim_base.py(10): from numpy.core import iinfo
twodim_base.py(14):     'diag', 'diagflat', 'eye', 'fliplr', 'flipud', 'rot90', 'tri', 'triu',
twodim_base.py(15):     'tril', 'vander', 'histogram2d', 'mask_indices', 'tril_indices',
twodim_base.py(16):     'tril_indices_from', 'triu_indices', 'triu_indices_from', ]
twodim_base.py(19): i1 = iinfo(int8)
 --- modulename: getlimits, funcname: __init__
getlimits.py(246):         try:
getlimits.py(247):             self.dtype = numeric.dtype(int_type)
getlimits.py(250):         self.kind = self.dtype.kind
getlimits.py(251):         self.bits = self.dtype.itemsize * 8
getlimits.py(252):         self.key = "%s%d" % (self.kind, self.bits)
getlimits.py(253):         if self.kind not in 'iu':
twodim_base.py(20): i2 = iinfo(int16)
 --- modulename: getlimits, funcname: __init__
getlimits.py(246):         try:
getlimits.py(247):             self.dtype = numeric.dtype(int_type)
getlimits.py(250):         self.kind = self.dtype.kind
getlimits.py(251):         self.bits = self.dtype.itemsize * 8
getlimits.py(252):         self.key = "%s%d" % (self.kind, self.bits)
getlimits.py(253):         if self.kind not in 'iu':
twodim_base.py(21): i4 = iinfo(int32)
 --- modulename: getlimits, funcname: __init__
getlimits.py(246):         try:
getlimits.py(247):             self.dtype = numeric.dtype(int_type)
getlimits.py(250):         self.kind = self.dtype.kind
getlimits.py(251):         self.bits = self.dtype.itemsize * 8
getlimits.py(252):         self.key = "%s%d" % (self.kind, self.bits)
getlimits.py(253):         if self.kind not in 'iu':
twodim_base.py(24): def _min_int(low, high):
twodim_base.py(35): def fliplr(m):
twodim_base.py(85): def flipud(m):
twodim_base.py(139): def rot90(m, k=1):
twodim_base.py(192): def eye(N, M=None, k=0, dtype=float):
twodim_base.py(244): def diag(v, k=0):
twodim_base.py(315): def diagflat(v, k=0):
twodim_base.py(374): def tri(N, M=None, k=0, dtype=float):
twodim_base.py(423): def tril(m, k=0):
twodim_base.py(461): def triu(m, k=0):
twodim_base.py(490): def vander(x, N=None, increasing=False):
twodim_base.py(580): def histogram2d(x, y, bins=10, range=None, normed=False, weights=None):
twodim_base.py(718): def mask_indices(n, mask_func, k=0):
twodim_base.py(788): def tril_indices(n, k=0, m=None):
twodim_base.py(868): def tril_indices_from(arr, k=0):
twodim_base.py(896): def triu_indices(n, k=0, m=None):
twodim_base.py(978): def triu_indices_from(arr, k=0):
function_base.py(25): from .utils import deprecate
 --- modulename: utils, funcname: <module>
utils.py(1): from __future__ import division, absolute_import, print_function
utils.py(3): import os
utils.py(4): import sys
utils.py(5): import types
utils.py(6): import re
utils.py(7): import warnings
utils.py(9): from numpy.core.numerictypes import issubclass_, issubsctype, issubdtype
utils.py(10): from numpy.core import ndarray, ufunc, asarray
utils.py(13): from numpy.compat import getargspec, formatargspec
utils.py(16):     'issubclass_', 'issubsctype', 'issubdtype', 'deprecate',
utils.py(17):     'deprecate_with_doc', 'get_include', 'info', 'source', 'who',
utils.py(18):     'lookfor', 'byte_bounds', 'safe_eval'
utils.py(21): def get_include():
utils.py(51): def _set_function_name(func, name):
utils.py(56): class _Deprecate(object):
 --- modulename: utils, funcname: _Deprecate
utils.py(56): class _Deprecate(object):
utils.py(66):     """
utils.py(68):     def __init__(self, old_name=None, new_name=None, message=None):
utils.py(73):     def __call__(self, func, *args, **kwargs):
utils.py(117): def deprecate(*args, **kwargs):
utils.py(178): deprecate_with_doc = lambda msg: _Deprecate(message=msg)
utils.py(185): def byte_bounds(a):
utils.py(242): def who(vardict=None):
utils.py(347): def _split_line(name, arguments, width):
utils.py(366): _namedict = None
utils.py(367): _dictlist = None
utils.py(371): def _makenamedict(module='numpy'):
utils.py(391): def _info(obj, output=sys.stdout):
utils.py(442): def info(object=None, maxwidth=76, output=sys.stdout, toplevel='numpy'):
utils.py(647): def source(object, output=sys.stdout):
utils.py(698): _lookfor_caches = {}
utils.py(702): _function_signature_re = re.compile(r"[a-z0-9_]+\(.*[,=].*\)", re.I)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(495):             elif this == "+":
sre_parse.py(496):                 min, max = 1, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(199):             try:
sre_parse.py(200):                 c = self.string[self.index + 1]
sre_parse.py(203):             char = char + c
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(691):         elif this == "^":
sre_parse.py(694):         elif this == "$":
sre_parse.py(697):         elif this and this[0] == "\\":
sre_parse.py(698):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(270):     code = CATEGORIES.get(escape)
sre_parse.py(271):     if code:
sre_parse.py(273):     code = ESCAPES.get(escape)
sre_parse.py(274):     if code:
sre_parse.py(276):     try:
sre_parse.py(277):         c = escape[1:2]
sre_parse.py(278):         if c == "x":
sre_parse.py(285):         elif c == "0":
sre_parse.py(290):         elif c in DIGITS:
sre_parse.py(311):         if len(escape) == 2:
sre_parse.py(312):             return LITERAL, ord(escape[1])
sre_parse.py(699):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(522):         emit(0)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(100):                 emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(101):                 def fixup(literal, flags=flags):
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(276):                         r = map(fixup, r)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(276):                         r = map(fixup, r)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(266):                         i = fixup(av)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
sre_compile.py(267):                         charmap[i] = 1
sre_compile.py(268):                         if fixes and i in fixes:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(320):             runs = None
sre_compile.py(321):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(342):     if len(charmap) == 256:
sre_compile.py(343):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(412):     s = bytes(bits).translate(_BITS_TRANS)[::-1]
sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]
sre_compile.py(344):         out.append((CHARSET, data))
sre_compile.py(345):         out += tail
sre_compile.py(346):         return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(241):         elif op is CHARSET:
sre_compile.py(242):             code.extend(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(100):                 emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(101):                 def fixup(literal, flags=flags):
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(266):                         i = fixup(av)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
sre_compile.py(267):                         charmap[i] = 1
sre_compile.py(268):                         if fixes and i in fixes:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(265):                     if fixup:
sre_compile.py(266):                         i = fixup(av)
 --- modulename: sre_compile, funcname: fixup
sre_compile.py(102):                     return _sre.getlower(literal, flags)
sre_compile.py(267):                         charmap[i] = 1
sre_compile.py(268):                         if fixes and i in fixes:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(331):                 out.append((LITERAL, p))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(337):             return out
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(237):             emit(av)
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
utils.py(704): def lookfor(what, module=None, import_modules=True, regenerate=False,
utils.py(705):             output=None):
utils.py(832): def _lookfor_generate_cache(module, import_modules, regenerate):
utils.py(978): def _getmembers(item):
utils.py(1002): class SafeEval(object):
 --- modulename: utils, funcname: SafeEval
utils.py(1002): class SafeEval(object):
utils.py(1015):     """
utils.py(1016):     def __init__(self):
utils.py(1021):     def visit(self, node):
utils.py(1026):     def default(self, node):
utils.py(1030):     def visitExpression(self, node):
utils.py(1033):     def visitNum(self, node):
utils.py(1036):     def visitStr(self, node):
utils.py(1039):     def visitBytes(self, node):
utils.py(1042):     def visitDict(self, node,**kw):
utils.py(1046):     def visitTuple(self, node):
utils.py(1049):     def visitList(self, node):
utils.py(1052):     def visitUnaryOp(self, node):
utils.py(1061):     def visitName(self, node):
utils.py(1071):     def visitNameConstant(self, node):
utils.py(1075): def safe_eval(source):
function_base.py(26): from numpy.core.multiarray import _insert, add_docstring
function_base.py(27): from numpy.core.multiarray import digitize, bincount, interp as compiled_interp
function_base.py(28): from numpy.core.umath import _add_newdoc_ufunc as add_newdoc_ufunc
function_base.py(29): from numpy.compat import long
function_base.py(32): if sys.version_info[0] < 3:
function_base.py(33):     range = xrange
function_base.py(37):     'select', 'piecewise', 'trim_zeros', 'copy', 'iterable', 'percentile',
function_base.py(38):     'diff', 'gradient', 'angle', 'unwrap', 'sort_complex', 'disp',
function_base.py(39):     'extract', 'place', 'vectorize', 'asarray_chkfinite', 'average',
function_base.py(40):     'histogram', 'histogramdd', 'bincount', 'digitize', 'cov', 'corrcoef',
function_base.py(41):     'msort', 'median', 'sinc', 'hamming', 'hanning', 'bartlett',
function_base.py(42):     'blackman', 'kaiser', 'trapz', 'i0', 'add_newdoc', 'add_docstring',
function_base.py(43):     'meshgrid', 'delete', 'insert', 'append', 'interp', 'add_newdoc_ufunc'
function_base.py(47): def iterable(y):
function_base.py(78): def histogram(a, bins=10, range=None, normed=False, weights=None,
function_base.py(79):               density=None):
function_base.py(298): def histogramdd(sample, bins=10, range=None, normed=False, weights=None):
function_base.py(492): def average(a, axis=None, weights=None, returned=False):
function_base.py(605): def asarray_chkfinite(a, dtype=None, order=None):
function_base.py(672): def piecewise(x, condlist, funclist, *args, **kw):
function_base.py(791): def select(condlist, choicelist, default=0):
function_base.py(894): def copy(a, order='K'):
function_base.py(943): def gradient(f, *varargs, **kwargs):
function_base.py(1116): def diff(a, n=1, axis=-1):
function_base.py(1178): def interp(x, xp, fp, left=None, right=None, period=None):
function_base.py(1303): def angle(z, deg=0):
function_base.py(1349): def unwrap(p, discont=pi, axis=-1):
function_base.py(1404): def sort_complex(a):
function_base.py(1440): def trim_zeros(filt, trim='fb'):
function_base.py(1491): @deprecate
 --- modulename: utils, funcname: deprecate
utils.py(163):     if args:
utils.py(164):         fn = args[0]
utils.py(165):         args = args[1:]
utils.py(169):         if 'newname' in kwargs:
utils.py(171):         if 'oldname' in kwargs:
utils.py(174):         return _Deprecate(*args, **kwargs)(fn)
 --- modulename: utils, funcname: __init__
utils.py(69):         self.old_name = old_name
utils.py(70):         self.new_name = new_name
utils.py(71):         self.message = message
 --- modulename: utils, funcname: __call__
utils.py(78):         old_name = self.old_name
utils.py(79):         new_name = self.new_name
utils.py(80):         message = self.message
utils.py(82):         import warnings
utils.py(83):         if old_name is None:
utils.py(84):             try:
utils.py(85):                 old_name = func.__name__
utils.py(88):         if new_name is None:
utils.py(89):             depdoc = "`%s` is deprecated!" % old_name
utils.py(94):         if message is not None:
utils.py(97):         def newfunc(*args,**kwds):
utils.py(102):         newfunc = _set_function_name(newfunc, old_name)
 --- modulename: utils, funcname: _set_function_name
utils.py(52):     func.__name__ = name
utils.py(53):     return func
utils.py(103):         doc = func.__doc__
utils.py(104):         if doc is None:
utils.py(107):             doc = '\n\n'.join([depdoc, doc])
utils.py(108):         newfunc.__doc__ = doc
utils.py(109):         try:
utils.py(110):             d = func.__dict__
utils.py(114):             newfunc.__dict__.update(d)
utils.py(115):         return newfunc
function_base.py(1509): def extract(condition, arr):
function_base.py(1560): def place(arr, mask, vals):
function_base.py(1598): def disp(mesg, device=None, linefeed=True):
function_base.py(1640): class vectorize(object):
 --- modulename: function_base, funcname: vectorize
function_base.py(1640): class vectorize(object):
function_base.py(1753):     """
function_base.py(1755):     def __init__(self, pyfunc, otypes='', doc=None, excluded=None,
function_base.py(1756):                  cache=False):
function_base.py(1783):     def __call__(self, *args, **kwargs):
function_base.py(1813):     def _get_ufunc_and_otypes(self, func, args):
function_base.py(1869):     def _vectorize_call(self, func, args):
function_base.py(1891): def cov(m, y=None, rowvar=1, bias=0, ddof=None, fweights=None, aweights=None):
function_base.py(2090): def corrcoef(x, y=None, rowvar=1, bias=np._NoValue, ddof=np._NoValue):
function_base.py(2154): def blackman(M):
function_base.py(2252): def bartlett(M):
function_base.py(2359): def hanning(M):
function_base.py(2459): def hamming(M):
function_base.py(2559):     -4.41534164647933937950E-18,
function_base.py(2560):     3.33079451882223809783E-17,
function_base.py(2561):     -2.43127984654795469359E-16,
function_base.py(2562):     1.71539128555513303061E-15,
function_base.py(2563):     -1.16853328779934516808E-14,
function_base.py(2564):     7.67618549860493561688E-14,
function_base.py(2565):     -4.85644678311192946090E-13,
function_base.py(2566):     2.95505266312963983461E-12,
function_base.py(2567):     -1.72682629144155570723E-11,
function_base.py(2568):     9.67580903537323691224E-11,
function_base.py(2569):     -5.18979560163526290666E-10,
function_base.py(2570):     2.65982372468238665035E-9,
function_base.py(2571):     -1.30002500998624804212E-8,
function_base.py(2572):     6.04699502254191894932E-8,
function_base.py(2573):     -2.67079385394061173391E-7,
function_base.py(2574):     1.11738753912010371815E-6,
function_base.py(2575):     -4.41673835845875056359E-6,
function_base.py(2576):     1.64484480707288970893E-5,
function_base.py(2577):     -5.75419501008210370398E-5,
function_base.py(2578):     1.88502885095841655729E-4,
function_base.py(2579):     -5.76375574538582365885E-4,
function_base.py(2580):     1.63947561694133579842E-3,
function_base.py(2581):     -4.32430999505057594430E-3,
function_base.py(2582):     1.05464603945949983183E-2,
function_base.py(2583):     -2.37374148058994688156E-2,
function_base.py(2584):     4.93052842396707084878E-2,
function_base.py(2585):     -9.49010970480476444210E-2,
function_base.py(2586):     1.71620901522208775349E-1,
function_base.py(2587):     -3.04682672343198398683E-1,
function_base.py(2588):     6.76795274409476084995E-1
function_base.py(2592):     -7.23318048787475395456E-18,
function_base.py(2593):     -4.83050448594418207126E-18,
function_base.py(2594):     4.46562142029675999901E-17,
function_base.py(2595):     3.46122286769746109310E-17,
function_base.py(2596):     -2.82762398051658348494E-16,
function_base.py(2597):     -3.42548561967721913462E-16,
function_base.py(2598):     1.77256013305652638360E-15,
function_base.py(2599):     3.81168066935262242075E-15,
function_base.py(2600):     -9.55484669882830764870E-15,
function_base.py(2601):     -4.15056934728722208663E-14,
function_base.py(2602):     1.54008621752140982691E-14,
function_base.py(2603):     3.85277838274214270114E-13,
function_base.py(2604):     7.18012445138366623367E-13,
function_base.py(2605):     -1.79417853150680611778E-12,
function_base.py(2606):     -1.32158118404477131188E-11,
function_base.py(2607):     -3.14991652796324136454E-11,
function_base.py(2608):     1.18891471078464383424E-11,
function_base.py(2609):     4.94060238822496958910E-10,
function_base.py(2610):     3.39623202570838634515E-9,
function_base.py(2611):     2.26666899049817806459E-8,
function_base.py(2612):     2.04891858946906374183E-7,
function_base.py(2613):     2.89137052083475648297E-6,
function_base.py(2614):     6.88975834691682398426E-5,
function_base.py(2615):     3.36911647825569408990E-3,
function_base.py(2616):     8.04490411014108831608E-1
function_base.py(2620): def _chbevl(x, vals):
function_base.py(2632): def _i0_1(x):
function_base.py(2636): def _i0_2(x):
function_base.py(2640): def i0(x):
function_base.py(2707): def kaiser(M, beta):
function_base.py(2834): def sinc(x):
function_base.py(2913): def msort(a):
function_base.py(2941): def _ureduce(a, func, **kwargs):
function_base.py(3001): def median(a, axis=None, out=None, overwrite_input=False, keepdims=False):
function_base.py(3090): def _median(a, axis=None, out=None, overwrite_input=False):
function_base.py(3161): def percentile(a, q, axis=None, out=None,
function_base.py(3162):                overwrite_input=False, interpolation='linear', keepdims=False):
function_base.py(3278): def _percentile(a, q, axis=None, out=None,
function_base.py(3279):                 overwrite_input=False, interpolation='linear', keepdims=False):
function_base.py(3422): def trapz(y, x=None, dx=1.0, axis=-1):
function_base.py(3511): def add_newdoc(place, obj, doc):
function_base.py(3545): def meshgrid(*xi, **kwargs):
function_base.py(3687): def delete(arr, obj, axis=None):
function_base.py(3888): def insert(arr, obj, values, axis=None):
function_base.py(4098): def append(arr, values, axis=None):
index_tricks.py(13): import numpy.matrixlib as matrix
 --- modulename: __init__, funcname: <module>
__init__.py(3): """
__init__.py(4): from __future__ import division, absolute_import, print_function
__init__.py(6): from .defmatrix import *
 --- modulename: defmatrix, funcname: <module>
defmatrix.py(1): from __future__ import division, absolute_import, print_function
defmatrix.py(3): __all__ = ['matrix', 'bmat', 'mat', 'asmatrix']
defmatrix.py(5): import sys
defmatrix.py(6): import numpy.core.numeric as N
defmatrix.py(7): from numpy.core.numeric import concatenate, isscalar, binary_repr, identity, asanyarray
defmatrix.py(8): from numpy.core.numerictypes import issubdtype
defmatrix.py(11): _numchars = '0123456789.-+jeEL'
defmatrix.py(13): if sys.version_info[0] >= 3:
defmatrix.py(29):     _table = [None]*256
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(31):         _table[k] = chr(k)
defmatrix.py(30):     for k in range(256):
defmatrix.py(32):     _table = ''.join(_table)
defmatrix.py(34):     _todelete = []
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(36):         if k not in _numchars:
defmatrix.py(37):             _todelete.append(k)
defmatrix.py(35):     for k in _table:
defmatrix.py(38):     _todelete = ''.join(_todelete)
defmatrix.py(39):     del k
defmatrix.py(41):     def _eval(astr):
defmatrix.py(48): def _convert_from_string(data):
defmatrix.py(66): def asmatrix(data, dtype=None):
defmatrix.py(100): def matrix_power(M, n):
defmatrix.py(208): class matrix(N.ndarray):
 --- modulename: defmatrix, funcname: matrix
defmatrix.py(208): class matrix(N.ndarray):
defmatrix.py(244):     """
defmatrix.py(245):     __array_priority__ = 10.0
defmatrix.py(246):     def __new__(subtype, data, dtype=None, copy=True):
defmatrix.py(292):     def __array_finalize__(self, obj):
defmatrix.py(314):     def __getitem__(self, index):
defmatrix.py(340):     def __mul__(self, other):
defmatrix.py(348):     def __rmul__(self, other):
defmatrix.py(351):     def __imul__(self, other):
defmatrix.py(355):     def __pow__(self, other):
defmatrix.py(358):     def __ipow__(self, other):
defmatrix.py(362):     def __rpow__(self, other):
defmatrix.py(365):     def __repr__(self):
defmatrix.py(375):     def __str__(self):
defmatrix.py(378):     def _align(self, axis):
defmatrix.py(391):     def _collapse(self, axis):
defmatrix.py(402):     def tolist(self):
defmatrix.py(425):     def sum(self, axis=None, dtype=None, out=None):
defmatrix.py(461):     def squeeze(self, axis=None):
defmatrix.py(514):     def flatten(self, order='C'):
defmatrix.py(549):     def mean(self, axis=None, dtype=None, out=None):
defmatrix.py(583):     def std(self, axis=None, dtype=None, out=None, ddof=0):
defmatrix.py(617):     def var(self, axis=None, dtype=None, out=None, ddof=0):
defmatrix.py(651):     def prod(self, axis=None, dtype=None, out=None):
defmatrix.py(684):     def any(self, axis=None, out=None):
defmatrix.py(707):     def all(self, axis=None, out=None):
defmatrix.py(747):     def max(self, axis=None, out=None):
defmatrix.py(782):     def argmax(self, axis=None, out=None):
defmatrix.py(817):     def min(self, axis=None, out=None):
defmatrix.py(852):     def argmin(self, axis=None, out=None):
defmatrix.py(887):     def ptp(self, axis=None, out=None):
defmatrix.py(920):     def getI(self):
defmatrix.py(964):     def getA(self):
defmatrix.py(993):     def getA1(self):
defmatrix.py(1021):     def ravel(self, order='C'):
defmatrix.py(1060):     def getT(self):
defmatrix.py(1092):     def getH(self):
defmatrix.py(1126):     T = property(getT, None)
defmatrix.py(1127):     A = property(getA, None)
defmatrix.py(1128):     A1 = property(getA1, None)
defmatrix.py(1129):     H = property(getH, None)
defmatrix.py(1130):     I = property(getI, None)
defmatrix.py(1132): def _from_string(str, gdict, ldict):
defmatrix.py(1157): def bmat(obj, ldict=None, gdict=None):
defmatrix.py(1232): mat = asmatrix
__init__.py(8): __all__ = defmatrix.__all__
__init__.py(10): from numpy.testing import Tester
__init__.py(11): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(12): bench = Tester().bench
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
index_tricks.py(14): from .function_base import diff
index_tricks.py(15): from numpy.core.multiarray import ravel_multi_index, unravel_index
index_tricks.py(16): from numpy.lib.stride_tricks import as_strided
 --- modulename: stride_tricks, funcname: <module>
stride_tricks.py(7): """
stride_tricks.py(8): from __future__ import division, absolute_import, print_function
stride_tricks.py(10): import numpy as np
stride_tricks.py(12): __all__ = ['broadcast_to', 'broadcast_arrays']
stride_tricks.py(15): class DummyArray(object):
 --- modulename: stride_tricks, funcname: DummyArray
stride_tricks.py(15): class DummyArray(object):
stride_tricks.py(18):     """
stride_tricks.py(20):     def __init__(self, interface, base=None):
stride_tricks.py(25): def _maybe_view_as_subclass(original_array, new_array):
stride_tricks.py(38): def as_strided(x, shape=None, strides=None, subok=False):
stride_tricks.py(57): def _broadcast_to(array, shape, subok, readonly):
stride_tricks.py(77): def broadcast_to(array, shape, subok=False):
stride_tricks.py(118): def _broadcast_shape(*args):
stride_tricks.py(140): def broadcast_arrays(*args, **kwargs):
index_tricks.py(18): makemat = matrix.matrix
index_tricks.py(22):     'ravel_multi_index', 'unravel_index', 'mgrid', 'ogrid', 'r_', 'c_',
index_tricks.py(23):     's_', 'index_exp', 'ix_', 'ndenumerate', 'ndindex', 'fill_diagonal',
index_tricks.py(24):     'diag_indices', 'diag_indices_from'
index_tricks.py(28): def ix_(*args):
index_tricks.py(87): class nd_grid(object):
 --- modulename: index_tricks, funcname: nd_grid
index_tricks.py(87): class nd_grid(object):
index_tricks.py(146):     """
index_tricks.py(148):     def __init__(self, sparse=False):
index_tricks.py(151):     def __getitem__(self, key):
index_tricks.py(212):     def __getslice__(self, i, j):
index_tricks.py(215):     def __len__(self):
index_tricks.py(218): mgrid = nd_grid(sparse=False)
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(149):         self.sparse = sparse
index_tricks.py(219): ogrid = nd_grid(sparse=True)
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(149):         self.sparse = sparse
index_tricks.py(220): mgrid.__doc__ = None  # set in numpy.add_newdocs
index_tricks.py(221): ogrid.__doc__ = None  # set in numpy.add_newdocs
index_tricks.py(223): class AxisConcatenator(object):
 --- modulename: index_tricks, funcname: AxisConcatenator
index_tricks.py(223): class AxisConcatenator(object):
index_tricks.py(229):     """
index_tricks.py(231):     def _retval(self, res):
index_tricks.py(242):     def __init__(self, axis=0, matrix=False, ndmin=1, trans1d=-1):
index_tricks.py(251):     def __getitem__(self, key):
index_tricks.py(341):     def __getslice__(self, i, j):
index_tricks.py(345):     def __len__(self):
index_tricks.py(352): class RClass(AxisConcatenator):
 --- modulename: index_tricks, funcname: RClass
index_tricks.py(352): class RClass(AxisConcatenator):
index_tricks.py(445):     """
index_tricks.py(447):     def __init__(self):
index_tricks.py(450): r_ = RClass()
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(448):         AxisConcatenator.__init__(self, 0)
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(243):         self._axis = axis
index_tricks.py(244):         self._matrix = matrix
index_tricks.py(245):         self.axis = axis
index_tricks.py(246):         self.matrix = matrix
index_tricks.py(247):         self.col = 0
index_tricks.py(248):         self.trans1d = trans1d
index_tricks.py(249):         self.ndmin = ndmin
index_tricks.py(452): class CClass(AxisConcatenator):
 --- modulename: index_tricks, funcname: CClass
index_tricks.py(452): class CClass(AxisConcatenator):
index_tricks.py(468):     """
index_tricks.py(470):     def __init__(self):
index_tricks.py(473): c_ = CClass()
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(471):         AxisConcatenator.__init__(self, -1, ndmin=2, trans1d=0)
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(243):         self._axis = axis
index_tricks.py(244):         self._matrix = matrix
index_tricks.py(245):         self.axis = axis
index_tricks.py(246):         self.matrix = matrix
index_tricks.py(247):         self.col = 0
index_tricks.py(248):         self.trans1d = trans1d
index_tricks.py(249):         self.ndmin = ndmin
index_tricks.py(475): class ndenumerate(object):
 --- modulename: index_tricks, funcname: ndenumerate
index_tricks.py(475): class ndenumerate(object):
index_tricks.py(500):     """
index_tricks.py(502):     def __init__(self, arr):
index_tricks.py(505):     def __next__(self):
index_tricks.py(519):     def __iter__(self):
index_tricks.py(522):     next = __next__
index_tricks.py(525): class ndindex(object):
 --- modulename: index_tricks, funcname: ndindex
index_tricks.py(525): class ndindex(object):
index_tricks.py(553):     """
index_tricks.py(555):     def __init__(self, *shape):
index_tricks.py(563):     def __iter__(self):
index_tricks.py(566):     def ndincr(self):
index_tricks.py(574):     def __next__(self):
index_tricks.py(589):     next = __next__
index_tricks.py(603): class IndexExpression(object):
 --- modulename: index_tricks, funcname: IndexExpression
index_tricks.py(603): class IndexExpression(object):
index_tricks.py(645):     """
index_tricks.py(647):     def __init__(self, maketuple):
index_tricks.py(650):     def __getitem__(self, item):
index_tricks.py(656): index_exp = IndexExpression(maketuple=True)
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(648):         self.maketuple = maketuple
index_tricks.py(657): s_ = IndexExpression(maketuple=False)
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(648):         self.maketuple = maketuple
index_tricks.py(665): def fill_diagonal(a, val, wrap=False):
index_tricks.py(779): def diag_indices(n, ndim=2):
index_tricks.py(847): def diag_indices_from(arr):
__init__.py(10): from .function_base import *
__init__.py(11): from .nanfunctions import *
 --- modulename: nanfunctions, funcname: <module>
nanfunctions.py(19): """
nanfunctions.py(20): from __future__ import division, absolute_import, print_function
nanfunctions.py(22): import warnings
nanfunctions.py(23): import numpy as np
nanfunctions.py(24): from numpy.lib.function_base import _ureduce as _ureduce
nanfunctions.py(27):     'nansum', 'nanmax', 'nanmin', 'nanargmax', 'nanargmin', 'nanmean',
nanfunctions.py(28):     'nanmedian', 'nanpercentile', 'nanvar', 'nanstd', 'nanprod',
nanfunctions.py(32): def _replace_nan(a, val):
nanfunctions.py(74): def _copyto(a, val, mask):
nanfunctions.py(103): def _divide_by_count(a, b, out=None):
nanfunctions.py(144): def nanmin(a, axis=None, out=None, keepdims=False):
nanfunctions.py(243): def nanmax(a, axis=None, out=None, keepdims=False):
nanfunctions.py(342): def nanargmin(a, axis=None):
nanfunctions.py(386): def nanargmax(a, axis=None):
nanfunctions.py(431): def nansum(a, axis=None, dtype=None, out=None, keepdims=0):
nanfunctions.py(516): def nanprod(a, axis=None, dtype=None, out=None, keepdims=0):
nanfunctions.py(586): def nanmean(a, axis=None, dtype=None, out=None, keepdims=False):
nanfunctions.py(681): def _nanmedian1d(arr1d, overwrite_input=False):
nanfunctions.py(706): def _nanmedian(a, axis=None, out=None, overwrite_input=False):
nanfunctions.py(730): def _nanmedian_small(a, axis=None, out=None, overwrite_input=False):
nanfunctions.py(745): def nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=False):
nanfunctions.py(838): def nanpercentile(a, q, axis=None, out=None, overwrite_input=False,
nanfunctions.py(839):                   interpolation='linear', keepdims=False):
nanfunctions.py(964): def _nanpercentile(a, q, axis=None, out=None, overwrite_input=False,
nanfunctions.py(965):                    interpolation='linear', keepdims=False):
nanfunctions.py(984): def _nanpercentile1d(arr1d, q, overwrite_input=False, interpolation='linear'):
nanfunctions.py(1012): def nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
nanfunctions.py(1143): def nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
__init__.py(12): from .shape_base import *
 --- modulename: shape_base, funcname: <module>
shape_base.py(1): from __future__ import division, absolute_import, print_function
shape_base.py(3): import warnings
shape_base.py(5): import numpy.core.numeric as _nx
shape_base.py(6): from numpy.core.numeric import (
shape_base.py(9): from numpy.core.fromnumeric import product, reshape
shape_base.py(10): from numpy.core import vstack, atleast_3d
shape_base.py(14):     'column_stack', 'row_stack', 'dstack', 'array_split', 'split',
shape_base.py(15):     'hsplit', 'vsplit', 'dsplit', 'apply_over_axes', 'expand_dims',
shape_base.py(16):     'apply_along_axis', 'kron', 'tile', 'get_array_wrap'
shape_base.py(20): def apply_along_axis(func1d, axis, arr, *args, **kwargs):
shape_base.py(134): def apply_over_axes(func, a, axes):
shape_base.py(219): def expand_dims(a, axis):
shape_base.py(276): row_stack = vstack
shape_base.py(278): def column_stack(tup):
shape_base.py(319): def dstack(tup):
shape_base.py(370): def _replace_zero_by_x_arrays(sub_arys):
shape_base.py(378): def array_split(ary, indices_or_sections, axis=0):
shape_base.py(436): def split(ary,indices_or_sections,axis=0):
shape_base.py(513): def hsplit(ary, indices_or_sections):
shape_base.py(575): def vsplit(ary, indices_or_sections):
shape_base.py(626): def dsplit(ary, indices_or_sections):
shape_base.py(671): def get_array_prepare(*args):
shape_base.py(683): def get_array_wrap(*args):
shape_base.py(695): def kron(a, b):
shape_base.py(794): def tile(A, reps):
__init__.py(13): from .stride_tricks import *
__init__.py(14): from .twodim_base import *
__init__.py(15): from .ufunclike import *
__init__.py(17): from . import scimath as emath
 --- modulename: scimath, funcname: <module>
scimath.py(17): """
scimath.py(18): from __future__ import division, absolute_import, print_function
scimath.py(20): import numpy.core.numeric as nx
scimath.py(21): import numpy.core.numerictypes as nt
scimath.py(22): from numpy.core.numeric import asarray, any
scimath.py(23): from numpy.lib.type_check import isreal
scimath.py(27):     'sqrt', 'log', 'log2', 'logn', 'log10', 'power', 'arccos', 'arcsin',
scimath.py(28):     'arctanh'
scimath.py(32): _ln2 = nx.log(2.0)
scimath.py(35): def _tocomplex(arr):
scimath.py(97): def _fix_real_lt_zero(x):
scimath.py(124): def _fix_int_lt_zero(x):
scimath.py(150): def _fix_real_abs_gt_1(x):
scimath.py(176): def sqrt(x):
scimath.py(218): def log(x):
scimath.py(264): def log10(x):
scimath.py(312): def logn(n, x):
scimath.py(346): def log2(x):
scimath.py(392): def power(x, p):
scimath.py(435): def arccos(x):
scimath.py(478): def arcsin(x):
scimath.py(522): def arctanh(x):
__init__.py(18): from .polynomial import *
 --- modulename: polynomial, funcname: <module>
polynomial.py(4): """
polynomial.py(5): from __future__ import division, absolute_import, print_function
polynomial.py(7): __all__ = ['poly', 'roots', 'polyint', 'polyder', 'polyadd',
polynomial.py(8):            'polysub', 'polymul', 'polydiv', 'polyval', 'poly1d',
polynomial.py(9):            'polyfit', 'RankWarning']
polynomial.py(11): import re
polynomial.py(12): import warnings
polynomial.py(13): import numpy.core.numeric as NX
polynomial.py(15): from numpy.core import (isscalar, abs, finfo, atleast_1d, hstack, dot, array,
polynomial.py(17): from numpy.lib.twodim_base import diag, vander
polynomial.py(18): from numpy.lib.function_base import trim_zeros, sort_complex
polynomial.py(19): from numpy.lib.type_check import iscomplex, real, imag, mintypecode
polynomial.py(20): from numpy.linalg import eigvals, lstsq, inv
 --- modulename: __init__, funcname: <module>
__init__.py(45): """
__init__.py(46): from __future__ import division, absolute_import, print_function
__init__.py(49): from .info import __doc__
 --- modulename: info, funcname: <module>
info.py(34): """
info.py(35): from __future__ import division, absolute_import, print_function
info.py(37): depends = ['core']
__init__.py(51): from .linalg import *
 --- modulename: linalg, funcname: <module>
linalg.py(10): """
linalg.py(11): from __future__ import division, absolute_import, print_function
linalg.py(14): __all__ = ['matrix_power', 'solve', 'tensorsolve', 'tensorinv', 'inv',
linalg.py(15):            'cholesky', 'eigvals', 'eigvalsh', 'pinv', 'slogdet', 'det',
linalg.py(16):            'svd', 'eig', 'eigh', 'lstsq', 'norm', 'qr', 'cond', 'matrix_rank',
linalg.py(17):            'LinAlgError', 'multi_dot']
linalg.py(19): import warnings
linalg.py(21): from numpy.core import (
linalg.py(28): from numpy.lib import triu, asfarray
linalg.py(29): from numpy.linalg import lapack_lite, _umath_linalg
linalg.py(30): from numpy.matrixlib.defmatrix import matrix_power
linalg.py(31): from numpy.compat import asbytes
linalg.py(34): _N = asbytes('N')
linalg.py(35): _V = asbytes('V')
linalg.py(36): _A = asbytes('A')
linalg.py(37): _S = asbytes('S')
linalg.py(38): _L = asbytes('L')
linalg.py(40): fortran_int = intc
linalg.py(43): class LinAlgError(Exception):
 --- modulename: linalg, funcname: LinAlgError
linalg.py(43): class LinAlgError(Exception):
linalg.py(69):     """
linalg.py(70):     pass
linalg.py(74): _linalg_error_extobj = None
linalg.py(76): def _determine_error_states():
linalg.py(87): _determine_error_states()
 --- modulename: linalg, funcname: _determine_error_states
linalg.py(78):     errobj = geterrobj()
linalg.py(79):     bufsize = errobj[0]
linalg.py(81):     with errstate(invalid='call', over='ignore',
linalg.py(82):                   divide='ignore', under='ignore'):
 --- modulename: numeric, funcname: __init__
numeric.py(2866):         self.call = kwargs.pop('call', _Unspecified)
numeric.py(2867):         self.kwargs = kwargs
 --- modulename: numeric, funcname: __enter__
numeric.py(2870):         self.oldstate = seterr(**self.kwargs)
 --- modulename: numeric, funcname: seterr
numeric.py(2556):     pyvals = umath.geterrobj()
numeric.py(2557):     old = geterr()
 --- modulename: numeric, funcname: geterr
numeric.py(2615):     maskvalue = umath.geterrobj()[1]
numeric.py(2616):     mask = 7
numeric.py(2617):     res = {}
numeric.py(2618):     val = (maskvalue >> SHIFT_DIVIDEBYZERO) & mask
numeric.py(2619):     res['divide'] = _errdict_rev[val]
numeric.py(2620):     val = (maskvalue >> SHIFT_OVERFLOW) & mask
numeric.py(2621):     res['over'] = _errdict_rev[val]
numeric.py(2622):     val = (maskvalue >> SHIFT_UNDERFLOW) & mask
numeric.py(2623):     res['under'] = _errdict_rev[val]
numeric.py(2624):     val = (maskvalue >> SHIFT_INVALID) & mask
numeric.py(2625):     res['invalid'] = _errdict_rev[val]
numeric.py(2626):     return res
numeric.py(2559):     if divide is None:
numeric.py(2561):     if over is None:
numeric.py(2563):     if under is None:
numeric.py(2565):     if invalid is None:
numeric.py(2570):                  (_errdict[under] << SHIFT_UNDERFLOW) +
numeric.py(2571):                  (_errdict[invalid] << SHIFT_INVALID))
numeric.py(2573):     pyvals[1] = maskvalue
numeric.py(2574):     umath.seterrobj(pyvals)
numeric.py(2575):     return old
numeric.py(2871):         if self.call is not _Unspecified:
linalg.py(83):         invalid_call_errmask = geterrobj()[1]
 --- modulename: numeric, funcname: __exit__
numeric.py(2875):         seterr(**self.oldstate)
 --- modulename: numeric, funcname: seterr
numeric.py(2556):     pyvals = umath.geterrobj()
numeric.py(2557):     old = geterr()
 --- modulename: numeric, funcname: geterr
numeric.py(2615):     maskvalue = umath.geterrobj()[1]
numeric.py(2616):     mask = 7
numeric.py(2617):     res = {}
numeric.py(2618):     val = (maskvalue >> SHIFT_DIVIDEBYZERO) & mask
numeric.py(2619):     res['divide'] = _errdict_rev[val]
numeric.py(2620):     val = (maskvalue >> SHIFT_OVERFLOW) & mask
numeric.py(2621):     res['over'] = _errdict_rev[val]
numeric.py(2622):     val = (maskvalue >> SHIFT_UNDERFLOW) & mask
numeric.py(2623):     res['under'] = _errdict_rev[val]
numeric.py(2624):     val = (maskvalue >> SHIFT_INVALID) & mask
numeric.py(2625):     res['invalid'] = _errdict_rev[val]
numeric.py(2626):     return res
numeric.py(2559):     if divide is None:
numeric.py(2561):     if over is None:
numeric.py(2563):     if under is None:
numeric.py(2565):     if invalid is None:
numeric.py(2570):                  (_errdict[under] << SHIFT_UNDERFLOW) +
numeric.py(2571):                  (_errdict[invalid] << SHIFT_INVALID))
numeric.py(2573):     pyvals[1] = maskvalue
numeric.py(2574):     umath.seterrobj(pyvals)
numeric.py(2575):     return old
numeric.py(2876):         if self.call is not _Unspecified:
linalg.py(85):     _linalg_error_extobj = [bufsize, invalid_call_errmask, None]
linalg.py(89): def _raise_linalgerror_singular(err, flag):
linalg.py(92): def _raise_linalgerror_nonposdef(err, flag):
linalg.py(95): def _raise_linalgerror_eigenvalues_nonconvergence(err, flag):
linalg.py(98): def _raise_linalgerror_svd_nonconvergence(err, flag):
linalg.py(101): def get_linalg_error_extobj(callback):
linalg.py(106): def _makearray(a):
linalg.py(111): def isComplexType(t):
linalg.py(114): _real_types_map = {single : single,
linalg.py(115):                    double : double,
linalg.py(116):                    csingle : single,
linalg.py(117):                    cdouble : double}
linalg.py(119): _complex_types_map = {single : csingle,
linalg.py(120):                       double : cdouble,
linalg.py(121):                       csingle : csingle,
linalg.py(122):                       cdouble : cdouble}
linalg.py(124): def _realType(t, default=double):
linalg.py(127): def _complexType(t, default=cdouble):
linalg.py(130): def _linalgRealType(t):
linalg.py(134): _complex_types_map = {single : csingle,
linalg.py(135):                       double : cdouble,
linalg.py(136):                       csingle : csingle,
linalg.py(137):                       cdouble : cdouble}
linalg.py(139): def _commonType(*arrays):
linalg.py(166): _fastCT = fastCopyAndTranspose
linalg.py(168): def _to_native_byte_order(*arrays):
linalg.py(180): def _fastCopyAndTranspose(type, *arrays):
linalg.py(192): def _assertRank2(*arrays):
linalg.py(198): def _assertRankAtLeast2(*arrays):
linalg.py(204): def _assertSquareness(*arrays):
linalg.py(209): def _assertNdSquareness(*arrays):
linalg.py(214): def _assertFinite(*arrays):
linalg.py(219): def _assertNoEmpty2d(*arrays):
linalg.py(227): def tensorsolve(a, b, axes=None):
linalg.py(296): def solve(a, b):
linalg.py(389): def tensorinv(a, ind=2):
linalg.py(458): def inv(a):
linalg.py(532): def cholesky(a):
linalg.py(617): def qr(a, mode='reduced'):
linalg.py(832): def eigvals(a):
linalg.py(920): def eigvalsh(a, UPLO='L'):
linalg.py(991): def _convertarray(a):
linalg.py(1000): def eig(a):
linalg.py(1141): def eigh(a, UPLO='L'):
linalg.py(1254): def svd(a, full_matrices=1, compute_uv=1):
linalg.py(1375): def cond(x, p=None):
linalg.py(1462): def matrix_rank(M, tol=None):
linalg.py(1551): def pinv(a, rcond=1e-15 ):
linalg.py(1631): def slogdet(a):
linalg.py(1723): def det(a):
linalg.py(1785): def lstsq(a, b, rcond=-1):
linalg.py(1946): def _multi_svd_norm(x, row_axis, col_axis, op):
linalg.py(1976): def norm(x, ord=None, axis=None, keepdims=False):
linalg.py(2226): def multi_dot(arrays):
linalg.py(2338): def _multi_dot_three(A, B, C):
linalg.py(2359): def _multi_dot_matrix_chain_order(arrays, return_costs=False):
linalg.py(2400): def _multi_dot(arrays, order, i, j):
__init__.py(53): from numpy.testing import Tester
__init__.py(54): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(55): bench = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
polynomial.py(22): class RankWarning(UserWarning):
 --- modulename: polynomial, funcname: RankWarning
polynomial.py(22): class RankWarning(UserWarning):
polynomial.py(29):     """
polynomial.py(30):     pass
polynomial.py(32): def poly(seq_of_zeros):
polynomial.py(157): def roots(p):
polynomial.py(241): def polyint(p, m=1, k=None):
polynomial.py(334): def polyder(p, m=1):
polynomial.py(402): def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):
polynomial.py(614): def polyval(p, x):
polynomial.py(683): def polyadd(a1, a2):
polynomial.py(743): def polysub(a1, a2):
polynomial.py(790): def polymul(a1, a2):
polynomial.py(846): def polydiv(u, v):
polynomial.py(911): _poly_mat = re.compile(r"[*][*]([0-9]*)")
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(481):                 subpatternappend(set[0]) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(475):                     if code1[0] is IN:
sre_parse.py(477):                     setappend(code1)
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(481):                 subpatternappend(set[0]) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(544):         elif this == "(":
sre_parse.py(545):             group = 1
sre_parse.py(546):             name = None
sre_parse.py(547):             condgroup = None
sre_parse.py(548):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(666):             if group:
sre_parse.py(668):                 if group == 2:
sre_parse.py(672):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(75):         gid = self.groups
sre_parse.py(76):         self.groups = gid + 1
sre_parse.py(77):         if name is not None:
sre_parse.py(83):         self.open.append(gid)
sre_parse.py(84):         return gid
sre_parse.py(673):                 if condgroup:
sre_parse.py(676):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(433):             set = []
sre_parse.py(434):             setappend = set.append
sre_parse.py(437):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(440):             start = set[:]
sre_parse.py(441):             while 1:
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(445):                 elif this and this[0] == "\\":
sre_parse.py(447):                 elif this:
sre_parse.py(448):                     code1 = LITERAL, ord(this)
sre_parse.py(451):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(210):             return 1
sre_parse.py(453):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(454):                     if this == "]":
sre_parse.py(460):                     elif this:
sre_parse.py(461):                         if this[0] == "\\":
sre_parse.py(464):                             code2 = LITERAL, ord(this)
sre_parse.py(465):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(467):                         lo = code1[1]
sre_parse.py(468):                         hi = code2[1]
sre_parse.py(469):                         if hi < lo:
sre_parse.py(471):                         setappend((RANGE, (lo, hi)))
sre_parse.py(442):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(443):                 if this == "]" and set != start:
sre_parse.py(444):                     break
sre_parse.py(480):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(482):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(486):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(490):             if this == "?":
sre_parse.py(492):             elif this == "*":
sre_parse.py(493):                 min, max = 0, MAXREPEAT
sre_parse.py(528):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_parse.py(529):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(143):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(532):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(534):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_parse.py(536):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(539):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(146):         self.data[index] = code
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(412):             break # end of subpattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(329):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(210):             return 1
sre_parse.py(330):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(677):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(208):             if skip:
sre_parse.py(209):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(210):             return 1
sre_parse.py(679):                 if group is not None:
sre_parse.py(680):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(86):         self.open.remove(gid)
sre_parse.py(681):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(173):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(177):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(178):                 lo = lo + i * av[0]
sre_parse.py(179):                 hi = hi + j * av[1]
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_parse.py(174):                 lo = lo + i
sre_parse.py(175):                 hi = hi + j
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(450):                 if len(prefix) == prefix_skip:
sre_compile.py(451):                     prefix_skip = prefix_skip + 1
sre_compile.py(452):                 prefixappend(av)
sre_compile.py(448):         for op, av in pattern.data:
sre_compile.py(449):             if op is LITERAL:
sre_compile.py(453):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(138):         return len(self.data)
sre_compile.py(454):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(455):                 if op is LITERAL:
sre_compile.py(458):                     break
sre_compile.py(462):         if not prefix and pattern.data:
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(507):         mask = SRE_INFO_PREFIX
sre_compile.py(508):         if len(prefix) == prefix_skip == len(pattern.data):
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(522):         emit(0)
sre_compile.py(524):     if prefix:
sre_compile.py(525):         emit(len(prefix)) # length
sre_compile.py(526):         emit(prefix_skip) # skip
sre_compile.py(527):         code.extend(prefix)
sre_compile.py(529):         table = [-1] + ([0]*len(prefix))
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(531):             table[i+1] = table[i]+1
sre_compile.py(532):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(530):         for i in xrange(len(prefix)):
sre_compile.py(534):         code.extend(table[1:]) # don't store first entry
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(96):                 emit(OPCODES[op])
sre_compile.py(97):                 emit(av)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(146):         elif op is SUBPATTERN:
sre_compile.py(147):             if av[0]:
sre_compile.py(148):                 emit(OPCODES[MARK])
sre_compile.py(149):                 emit((av[0]-1)*2)
sre_compile.py(151):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(114):         elif op in REPEATING_CODES:
sre_compile.py(115):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(124):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(430):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(154):             return self.width
sre_compile.py(431):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(125):                 if op is MAX_REPEAT:
sre_compile.py(126):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(129):                 skip = _len(code); emit(0)
sre_compile.py(130):                 emit(av[0])
sre_compile.py(131):                 emit(av[1])
sre_compile.py(132):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(99):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(104):                 emit(OPCODES[op])
sre_compile.py(105):                 fixup = None
sre_compile.py(106):             skip = _len(code); emit(0)
sre_compile.py(107):             _compile_charset(av, flags, code, fixup, fixes)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(230):     emit = code.append
sre_compile.py(231):     for op, av in _optimize_charset(charset, fixup, fixes,
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(258):     out = []
sre_compile.py(259):     tail = []
sre_compile.py(260):     charmap = bytearray(256)
sre_compile.py(261):     for op, av in charset:
sre_compile.py(262):         while True:
sre_compile.py(263):             try:
sre_compile.py(264):                 if op is LITERAL:
sre_compile.py(273):                 elif op is RANGE:
sre_compile.py(274):                     r = range(av[0], av[1]+1)
sre_compile.py(275):                     if fixup:
sre_compile.py(277):                     if fixup and fixes:
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(285):                             charmap[i] = 1
sre_compile.py(284):                         for i in r:
sre_compile.py(310):             break
sre_compile.py(261):     for op, av in charset:
sre_compile.py(313):     runs = []
sre_compile.py(314):     q = 0
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(319):         if len(runs) >= 2:
sre_compile.py(322):         q = charmap.find(b'\0', p)
sre_compile.py(323):         if q < 0:
sre_compile.py(326):         runs.append((p, q))
sre_compile.py(315):     while True:
sre_compile.py(316):         p = charmap.find(b'\1', q)
sre_compile.py(317):         if p < 0:
sre_compile.py(318):             break
sre_compile.py(327):     if runs is not None:
sre_compile.py(329):         for p, q in runs:
sre_compile.py(330):             if q - p == 1:
sre_compile.py(333):                 out.append((RANGE, (p, q - 1)))
sre_compile.py(329):         for p, q in runs:
sre_compile.py(334):         out += tail
sre_compile.py(336):         if fixup or len(out) < len(charset):
sre_compile.py(339):         return charset
sre_compile.py(233):         emit(OPCODES[op])
sre_compile.py(234):         if op is NEGATE:
sre_compile.py(236):         elif op is LITERAL:
sre_compile.py(238):         elif op is RANGE:
sre_compile.py(239):             emit(av[0])
sre_compile.py(240):             emit(av[1])
sre_compile.py(232):                                     flags & SRE_FLAG_UNICODE):
sre_compile.py(254):     emit(OPCODES[FAILURE])
sre_compile.py(108):             code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(133):                 emit(OPCODES[SUCCESS])
sre_compile.py(134):                 code[skip] = _len(code) - skip
sre_compile.py(78):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(142):         if isinstance(index, slice):
sre_parse.py(144):         return self.data[index]
sre_compile.py(152):             if av[0]:
sre_compile.py(153):                 emit(OPCODES[MARK])
sre_compile.py(154):                 emit((av[0]-1)*2+1)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
polynomial.py(912): def _raise_power(astr, wrap=70):
polynomial.py(939): class poly1d(object):
 --- modulename: polynomial, funcname: poly1d
polynomial.py(939): class poly1d(object):
polynomial.py(1038):     """
polynomial.py(1039):     coeffs = None
polynomial.py(1040):     order = None
polynomial.py(1041):     variable = None
polynomial.py(1042):     __hash__ = None
polynomial.py(1044):     def __init__(self, c_or_r, r=0, variable=None):
polynomial.py(1065):     def __array__(self, t=None):
polynomial.py(1071):     def __repr__(self):
polynomial.py(1076):     def __len__(self):
polynomial.py(1079):     def __str__(self):
polynomial.py(1136):     def __call__(self, val):
polynomial.py(1139):     def __neg__(self):
polynomial.py(1142):     def __pos__(self):
polynomial.py(1145):     def __mul__(self, other):
polynomial.py(1152):     def __rmul__(self, other):
polynomial.py(1159):     def __add__(self, other):
polynomial.py(1163):     def __radd__(self, other):
polynomial.py(1167):     def __pow__(self, val):
polynomial.py(1175):     def __sub__(self, other):
polynomial.py(1179):     def __rsub__(self, other):
polynomial.py(1183):     def __div__(self, other):
polynomial.py(1190):     __truediv__ = __div__
polynomial.py(1192):     def __rdiv__(self, other):
polynomial.py(1199):     __rtruediv__ = __rdiv__
polynomial.py(1201):     def __eq__(self, other):
polynomial.py(1206):     def __ne__(self, other):
polynomial.py(1209):     def __setattr__(self, key, val):
polynomial.py(1212):     def __getattr__(self, key):
polynomial.py(1226):     def __getitem__(self, val):
polynomial.py(1234):     def __setitem__(self, key, val):
polynomial.py(1246):     def __iter__(self):
polynomial.py(1249):     def integ(self, m=1, k=0):
polynomial.py(1262):     def deriv(self, m=1):
polynomial.py(1277): warnings.simplefilter('always', RankWarning)
 --- modulename: warnings, funcname: simplefilter
warnings.py(106):     assert action in ("error", "ignore", "always", "default", "module",
warnings.py(107):                       "once"), "invalid action: %r" % (action,)
warnings.py(108):     assert isinstance(lineno, int) and lineno >= 0, \
warnings.py(110):     item = (action, None, category, None, lineno)
warnings.py(111):     if append:
warnings.py(114):         filters.insert(0, item)
__init__.py(20): from .utils import *
__init__.py(21): from .arraysetops import *
 --- modulename: arraysetops, funcname: <module>
arraysetops.py(26): """
arraysetops.py(27): from __future__ import division, absolute_import, print_function
arraysetops.py(29): import numpy as np
arraysetops.py(33):     'ediff1d', 'intersect1d', 'setxor1d', 'union1d', 'setdiff1d', 'unique',
arraysetops.py(34):     'in1d'
arraysetops.py(38): def ediff1d(ary, to_end=None, to_begin=None):
arraysetops.py(96): def unique(ar, return_index=False, return_inverse=False, return_counts=False):
arraysetops.py(218): def intersect1d(ar1, ar2, assume_unique=False):
arraysetops.py(261): def setxor1d(ar1, ar2, assume_unique=False):
arraysetops.py(305): def in1d(ar1, ar2, assume_unique=False, invert=False):
arraysetops.py(406): def union1d(ar1, ar2):
arraysetops.py(441): def setdiff1d(ar1, ar2, assume_unique=False):
__init__.py(22): from .npyio import *
 --- modulename: npyio, funcname: <module>
npyio.py(1): from __future__ import division, absolute_import, print_function
npyio.py(3): import sys
npyio.py(4): import os
npyio.py(5): import re
npyio.py(6): import itertools
npyio.py(7): import warnings
npyio.py(8): import weakref
npyio.py(9): from operator import itemgetter
npyio.py(11): import numpy as np
npyio.py(12): from . import format
 --- modulename: format, funcname: <module>
format.py(149): """
format.py(150): from __future__ import division, absolute_import, print_function
format.py(152): import numpy
format.py(153): import sys
format.py(154): import io
format.py(155): import warnings
format.py(156): from numpy.lib.utils import safe_eval
format.py(157): from numpy.compat import asbytes, asstr, isfileobj, long, basestring
format.py(159): if sys.version_info[0] >= 3:
format.py(162):     import cPickle as pickle
format.py(164): MAGIC_PREFIX = asbytes('\x93NUMPY')
format.py(165): MAGIC_LEN = len(MAGIC_PREFIX) + 2
format.py(166): BUFFER_SIZE = 2**18  # size of buffer for reading npz files in bytes
format.py(171): def _check_version(version):
format.py(176): def magic(major, minor):
format.py(201): def read_magic(fp):
format.py(223): def dtype_to_descr(dtype):
format.py(255): def header_data_from_array_1_0(array):
format.py(283): def _write_array_header(fp, d, version=None):
format.py(333): def write_array_header_1_0(fp, d):
format.py(346): def write_array_header_2_0(fp, d):
format.py(361): def read_array_header_1_0(fp):
format.py(392): def read_array_header_2_0(fp):
format.py(426): def _filter_header(s):
format.py(464): def _read_array_header(fp, version):
format.py(518): def write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None):
format.py(593): def read_array(fp, allow_pickle=True, pickle_kwargs=None):
format.py(678): def open_memmap(filename, mode='r+', dtype=None, shape=None,
format.py(679):                 fortran_order=False, version=None):
format.py(789): def _read_bytes(fp, size, error_template="ran out of data"):
npyio.py(13): from ._datasource import DataSource
 --- modulename: _datasource, funcname: <module>
_datasource.py(35): """
_datasource.py(36): from __future__ import division, absolute_import, print_function
_datasource.py(38): import os
_datasource.py(39): import sys
_datasource.py(40): import shutil
_datasource.py(42): _open = open
_datasource.py(50): class _FileOpeners(object):
 --- modulename: _datasource, funcname: _FileOpeners
_datasource.py(50): class _FileOpeners(object):
_datasource.py(72):     """
_datasource.py(74):     def __init__(self):
_datasource.py(78):     def _load(self):
_datasource.py(93):     def keys(self):
_datasource.py(112):     def __getitem__(self, key):
_datasource.py(116): _file_openers = _FileOpeners()
 --- modulename: _datasource, funcname: __init__
_datasource.py(75):         self._loaded = False
_datasource.py(76):         self._file_openers = {None: open}
_datasource.py(118): def open(path, mode='r', destpath=os.curdir):
_datasource.py(154): class DataSource (object):
 --- modulename: _datasource, funcname: DataSource
_datasource.py(154): class DataSource (object):
_datasource.py(201):     """
_datasource.py(203):     def __init__(self, destpath=os.curdir):
_datasource.py(213):     def __del__(self):
_datasource.py(218):     def _iszip(self, filename):
_datasource.py(225):     def _iswritemode(self, mode):
_datasource.py(235):     def _splitzipext(self, filename):
_datasource.py(248):     def _possible_names(self, filename):
_datasource.py(257):     def _isurl(self, path):
_datasource.py(275):     def _cache(self, path):
_datasource.py(312):     def _findfile(self, path):
_datasource.py(343):     def abspath(self, path):
_datasource.py(388):     def _sanitize_relative_path(self, path):
_datasource.py(402):     def exists(self, path):
_datasource.py(461):     def open(self, path, mode='r'):
_datasource.py(504): class Repository (DataSource):
 --- modulename: _datasource, funcname: Repository
_datasource.py(504): class Repository (DataSource):
_datasource.py(542):     """
_datasource.py(544):     def __init__(self, baseurl, destpath=os.curdir):
_datasource.py(549):     def __del__(self):
_datasource.py(552):     def _fullpath(self, path):
_datasource.py(561):     def _findfile(self, path):
_datasource.py(565):     def abspath(self, path):
_datasource.py(588):     def exists(self, path):
_datasource.py(622):     def open(self, path, mode='r'):
_datasource.py(648):     def listdir(self):
npyio.py(14): from numpy.core.multiarray import packbits, unpackbits
npyio.py(15): from ._iotools import (
 --- modulename: _iotools, funcname: <module>
_iotools.py(3): """
_iotools.py(4): from __future__ import division, absolute_import, print_function
_iotools.py(6): __docformat__ = "restructuredtext en"
_iotools.py(8): import sys
_iotools.py(9): import numpy as np
_iotools.py(10): import numpy.core.numeric as nx
_iotools.py(11): from numpy.compat import asbytes, bytes, asbytes_nested, basestring
_iotools.py(13): if sys.version_info[0] >= 3:
_iotools.py(17):     from __builtin__ import bool, int, float, complex, object, unicode, str
_iotools.py(20): if sys.version_info[0] >= 3:
_iotools.py(27):     _bytes_to_complex = complex
_iotools.py(28):     _bytes_to_name = str
_iotools.py(31): def _is_string_like(obj):
_iotools.py(42): def _is_bytes_like(obj):
_iotools.py(53): def _to_filehandle(fname, flag='r', return_opened=False):
_iotools.py(87): def has_nested_fields(ndtype):
_iotools.py(114): def flatten_dtype(ndtype, flatten_base=False):
_iotools.py(154): class LineSplitter(object):
 --- modulename: _iotools, funcname: LineSplitter
_iotools.py(154): class LineSplitter(object):
_iotools.py(168):     """
_iotools.py(170):     def autostrip(self, method):
_iotools.py(191):     def __init__(self, delimiter=None, comments=asbytes('#'), autostrip=True):
_iotools.py(217):     def _delimited_splitter(self, line):
_iotools.py(226):     def _fixedwidth_splitter(self, line):
_iotools.py(237):     def _variablewidth_splitter(self, line):
_iotools.py(246):     def __call__(self, line):
_iotools.py(250): class NameValidator(object):
 --- modulename: _iotools, funcname: NameValidator
_iotools.py(250): class NameValidator(object):
_iotools.py(300):     """
_iotools.py(302):     defaultexcludelist = ['return', 'file', 'print']
_iotools.py(303):     defaultdeletechars = set("""~!@#$%^&*()-=+~\|]}[{';: /?.>,<""")
_iotools.py(306):     def __init__(self, excludelist=None, deletechars=None,
_iotools.py(307):                  case_sensitive=None, replace_space='_'):
_iotools.py(333):     def validate(self, names, defaultfmt="f%i", nbfields=None):
_iotools.py(404):     def __call__(self, names, defaultfmt="f%i", nbfields=None):
_iotools.py(408): def str2bool(value):
_iotools.py(444): class ConverterError(Exception):
 --- modulename: _iotools, funcname: ConverterError
_iotools.py(444): class ConverterError(Exception):
_iotools.py(448):     """
_iotools.py(449):     pass
_iotools.py(452): class ConverterLockError(ConverterError):
 --- modulename: _iotools, funcname: ConverterLockError
_iotools.py(452): class ConverterLockError(ConverterError):
_iotools.py(456):     """
_iotools.py(457):     pass
_iotools.py(460): class ConversionWarning(UserWarning):
 --- modulename: _iotools, funcname: ConversionWarning
_iotools.py(460): class ConversionWarning(UserWarning):
_iotools.py(469):     """
_iotools.py(470):     pass
_iotools.py(473): class StringConverter(object):
 --- modulename: _iotools, funcname: StringConverter
_iotools.py(473): class StringConverter(object):
_iotools.py(518):     """
_iotools.py(520):     _mapper = [(nx.bool_, str2bool, False),
_iotools.py(521):                (nx.integer, int, -1)]
_iotools.py(525):     if nx.dtype(nx.integer).itemsize < nx.dtype(nx.int64).itemsize:
_iotools.py(528):     _mapper.extend([(nx.floating, float, nx.nan),
_iotools.py(529):                     (complex, _bytes_to_complex, nx.nan + 0j),
_iotools.py(530):                     (nx.string_, bytes, asbytes('???'))])
_iotools.py(532):     (_defaulttype, _defaultfunc, _defaultfill) = zip(*_mapper)
_iotools.py(534):     @classmethod
_iotools.py(540):     @classmethod
_iotools.py(550):     @classmethod
_iotools.py(558):     @classmethod
_iotools.py(559):     def upgrade_mapper(cls, func, default=None):
_iotools.py(600):     def __init__(self, dtype_or_func=None, default=None, missing_values=None,
_iotools.py(601):                  locked=False):
_iotools.py(677):     def _loose_call(self, value):
_iotools.py(684):     def _strict_call(self, value):
_iotools.py(710):     def __call__(self, value):
_iotools.py(714):     def upgrade(self, value):
_iotools.py(759):     def iterupgrade(self, value):
_iotools.py(789):     def update(self, func, default=None, testing_value=None,
_iotools.py(790):                missing_values=asbytes(''), locked=False):
_iotools.py(842): def easy_dtype(ndtype, names=None, defaultfmt="f%i", **validationargs):
npyio.py(21): from numpy.compat import (
npyio.py(25): if sys.version_info[0] >= 3:
npyio.py(28):     import cPickle as pickle
npyio.py(29):     from future_builtins import map
npyio.py(31): loads = pickle.loads
npyio.py(34):     'savetxt', 'loadtxt', 'genfromtxt', 'ndfromtxt', 'mafromtxt',
npyio.py(35):     'recfromtxt', 'recfromcsv', 'load', 'loads', 'save', 'savez',
npyio.py(36):     'savez_compressed', 'packbits', 'unpackbits', 'fromregex', 'DataSource'
npyio.py(40): class BagObj(object):
 --- modulename: npyio, funcname: BagObj
npyio.py(40): class BagObj(object):
npyio.py(68):     """
npyio.py(70):     def __init__(self, obj):
npyio.py(74):     def __getattribute__(self, key):
npyio.py(80):     def __dir__(self):
npyio.py(89): def zipfile_factory(*args, **kwargs):
npyio.py(95): class NpzFile(object):
 --- modulename: npyio, funcname: NpzFile
npyio.py(95): class NpzFile(object):
npyio.py(156):     """
npyio.py(158):     def __init__(self, fid, own_fid=False, allow_pickle=True,
npyio.py(159):                  pickle_kwargs=None):
npyio.py(179):     def __enter__(self):
npyio.py(182):     def __exit__(self, exc_type, exc_value, traceback):
npyio.py(185):     def close(self):
npyio.py(198):     def __del__(self):
npyio.py(201):     def __getitem__(self, key):
npyio.py(230):     def __iter__(self):
npyio.py(233):     def items(self):
npyio.py(240):     def iteritems(self):
npyio.py(245):     def keys(self):
npyio.py(249):     def iterkeys(self):
npyio.py(253):     def __contains__(self, key):
npyio.py(257): def load(file, mmap_mode=None, allow_pickle=True, fix_imports=True,
npyio.py(258):          encoding='ASCII'):
npyio.py(422): def save(file, arr, allow_pickle=True, fix_imports=True):
npyio.py(497): def savez(file, *args, **kwds):
npyio.py(577): def savez_compressed(file, *args, **kwds):
npyio.py(603): def _savez(file, args, kwds, compress, allow_pickle=True, pickle_kwargs=None):
npyio.py(652): def _getconv(dtype):
npyio.py(680): def loadtxt(fname, dtype=float, comments='#', delimiter=None,
npyio.py(681):             converters=None, skiprows=0, usecols=None, unpack=False,
npyio.py(682):             ndmin=0):
npyio.py(967): def savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\n', header='',
npyio.py(968):             footer='', comments='# '):
npyio.py(1169): def fromregex(file, regexp, dtype):
npyio.py(1257): def genfromtxt(fname, dtype=float, comments='#', delimiter=None,
npyio.py(1258):                skip_header=0, skip_footer=0, converters=None,
npyio.py(1259):                missing_values=None, filling_values=None, usecols=None,
npyio.py(1260):                names=None, excludelist=None, deletechars=None,
npyio.py(1261):                replace_space='_', autostrip=False, case_sensitive=True,
npyio.py(1262):                defaultfmt="f%i", unpack=None, usemask=False, loose=True,
npyio.py(1263):                invalid_raise=True, max_rows=None):
npyio.py(1891): def ndfromtxt(fname, **kwargs):
npyio.py(1908): def mafromtxt(fname, **kwargs):
npyio.py(1925): def recfromtxt(fname, **kwargs):
npyio.py(1957): def recfromcsv(fname, **kwargs):
__init__.py(23): from .financial import *
 --- modulename: financial, funcname: <module>
financial.py(10): """
financial.py(11): from __future__ import division, absolute_import, print_function
financial.py(13): import numpy as np
financial.py(15): __all__ = ['fv', 'pmt', 'nper', 'ipmt', 'ppmt', 'pv', 'rate',
financial.py(16):            'irr', 'npv', 'mirr']
financial.py(18): _when_to_num = {'end':0, 'begin':1,
financial.py(19):                 'e':0, 'b':1,
financial.py(20):                 0:0, 1:1,
financial.py(21):                 'beginning':1,
financial.py(22):                 'start':1,
financial.py(23):                 'finish':0}
financial.py(25): def _convert_when(when):
financial.py(36): def fv(rate, nper, pmt, pv, when='end'):
financial.py(126): def pmt(rate, nper, pv, fv=0, when='end'):
financial.py(218): def nper(rate, pmt, pv, fv=0, when='end'):
financial.py(286): def ipmt(rate, per, nper, pv, fv=0.0, when='end'):
financial.py(381): def _rbl(rate, per, pmt, pv, when):
financial.py(390): def ppmt(rate, per, nper, pv, fv=0.0, when='end'):
financial.py(418): def pv(rate, nper, pmt, fv=0.0, when='end'):
financial.py(517): def _g_div_gp(r, n, p, x, y, w):
financial.py(531): def rate(nper, pmt, pv, fv, when='end', guess=0.10, tol=1e-6, maxiter=100):
financial.py(591): def irr(values):
financial.py(663): def npv(rate, values):
financial.py(708): def mirr(values, finance_rate, reinvest_rate):
__init__.py(24): from .arrayterator import *
 --- modulename: arrayterator, funcname: <module>
arrayterator.py(9): """
arrayterator.py(10): from __future__ import division, absolute_import, print_function
arrayterator.py(12): from operator import mul
arrayterator.py(13): from functools import reduce
arrayterator.py(15): from numpy.compat import long
arrayterator.py(17): __all__ = ['Arrayterator']
arrayterator.py(20): class Arrayterator(object):
 --- modulename: arrayterator, funcname: Arrayterator
arrayterator.py(20): class Arrayterator(object):
arrayterator.py(88):     """
arrayterator.py(90):     def __init__(self, var, buf_size=None):
arrayterator.py(98):     def __getattr__(self, attr):
arrayterator.py(101):     def __getitem__(self, index):
arrayterator.py(133):     def __array__(self):
arrayterator.py(142):     @property
arrayterator.py(171):     @property
arrayterator.py(182):     def __iter__(self):
__init__.py(25): from .arraypad import *
 --- modulename: arraypad, funcname: <module>
arraypad.py(5): """
arraypad.py(6): from __future__ import division, absolute_import, print_function
arraypad.py(8): import numpy as np
arraypad.py(11): __all__ = ['pad']
arraypad.py(18): def _arange_ndarray(arr, shape, axis, reverse=False):
arraypad.py(61): def _round_ifneeded(arr, dtype):
arraypad.py(77): def _prepend_const(arr, pad_amt, val, axis=-1):
arraypad.py(111): def _append_const(arr, pad_amt, val, axis=-1):
arraypad.py(145): def _prepend_edge(arr, pad_amt, axis=-1):
arraypad.py(178): def _append_edge(arr, pad_amt, axis=-1):
arraypad.py(212): def _prepend_ramp(arr, pad_amt, end, axis=-1):
arraypad.py(267): def _append_ramp(arr, pad_amt, end, axis=-1):
arraypad.py(322): def _prepend_max(arr, pad_amt, num, axis=-1):
arraypad.py(374): def _append_max(arr, pad_amt, num, axis=-1):
arraypad.py(430): def _prepend_mean(arr, pad_amt, num, axis=-1):
arraypad.py(482): def _append_mean(arr, pad_amt, num, axis=-1):
arraypad.py(539): def _prepend_med(arr, pad_amt, num, axis=-1):
arraypad.py(591): def _append_med(arr, pad_amt, num, axis=-1):
arraypad.py(648): def _prepend_min(arr, pad_amt, num, axis=-1):
arraypad.py(700): def _append_min(arr, pad_amt, num, axis=-1):
arraypad.py(756): def _pad_ref(arr, pad_amt, method, axis=-1):
arraypad.py(841): def _pad_sym(arr, pad_amt, method, axis=-1):
arraypad.py(925): def _pad_wrap(arr, pad_amt, axis=-1):
arraypad.py(989): def _normalize_shape(ndarray, shape, cast_to_int=True):
arraypad.py(1072): def _validate_lengths(narray, number_elements):
arraypad.py(1117): def pad(array, pad_width, mode=None, **kwargs):
__init__.py(26): from ._version import *
 --- modulename: _version, funcname: <module>
_version.py(7): """
_version.py(8): from __future__ import division, absolute_import, print_function
_version.py(10): import re
_version.py(12): from numpy.compat import basestring
_version.py(15): __all__ = ['NumpyVersion']
_version.py(18): class NumpyVersion():
 --- modulename: _version, funcname: NumpyVersion
_version.py(18): class NumpyVersion():
_version.py(54):     """
_version.py(56):     def __init__(self, vstring):
_version.py(79):     def _compare_version(self, other):
_version.py(100):     def _compare_pre_release(self, other):
_version.py(115):     def _compare(self, other):
_version.py(137):     def __lt__(self, other):
_version.py(140):     def __le__(self, other):
_version.py(143):     def __eq__(self, other):
_version.py(146):     def __ne__(self, other):
_version.py(149):     def __gt__(self, other):
_version.py(152):     def __ge__(self, other):
_version.py(155):     def __repr(self):
__init__.py(28): __all__ = ['emath', 'math']
__init__.py(29): __all__ += type_check.__all__
__init__.py(30): __all__ += index_tricks.__all__
__init__.py(31): __all__ += function_base.__all__
__init__.py(32): __all__ += shape_base.__all__
__init__.py(33): __all__ += stride_tricks.__all__
__init__.py(34): __all__ += twodim_base.__all__
__init__.py(35): __all__ += ufunclike.__all__
__init__.py(36): __all__ += arraypad.__all__
__init__.py(37): __all__ += polynomial.__all__
__init__.py(38): __all__ += utils.__all__
__init__.py(39): __all__ += arraysetops.__all__
__init__.py(40): __all__ += npyio.__all__
__init__.py(41): __all__ += financial.__all__
__init__.py(42): __all__ += nanfunctions.__all__
__init__.py(44): from numpy.testing import Tester
__init__.py(45): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(46): bench = Tester().bench
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
add_newdocs.py(23): add_newdoc('numpy.core', 'flatiter',
add_newdocs.py(64):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(68): add_newdoc('numpy.core', 'flatiter', ('base',
add_newdocs.py(79):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(83): add_newdoc('numpy.core', 'flatiter', ('coords',
add_newdocs.py(98):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(102): add_newdoc('numpy.core', 'flatiter', ('index',
add_newdocs.py(117):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(121): add_newdoc('numpy.core', 'flatiter', ('__array__',
add_newdocs.py(124):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(127): add_newdoc('numpy.core', 'flatiter', ('copy',
add_newdocs.py(143):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(152): add_newdoc('numpy.core', 'nditer',
add_newdocs.py(377):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(381): add_newdoc('numpy.core', 'nditer', ('copy',
add_newdocs.py(398):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(400): add_newdoc('numpy.core', 'nditer', ('debug_print',
add_newdocs.py(406):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(408): add_newdoc('numpy.core', 'nditer', ('enable_external_loop',
add_newdocs.py(416):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(418): add_newdoc('numpy.core', 'nditer', ('iternext',
add_newdocs.py(431):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(433): add_newdoc('numpy.core', 'nditer', ('remove_axis',
add_newdocs.py(440):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(442): add_newdoc('numpy.core', 'nditer', ('remove_multi_index',
add_newdocs.py(449):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(451): add_newdoc('numpy.core', 'nditer', ('reset',
add_newdocs.py(457):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(467): add_newdoc('numpy.core', 'broadcast',
add_newdocs.py(506):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(510): add_newdoc('numpy.core', 'broadcast', ('index',
add_newdocs.py(526):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(528): add_newdoc('numpy.core', 'broadcast', ('iters',
add_newdocs.py(548):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(550): add_newdoc('numpy.core', 'broadcast', ('nd',
add_newdocs.py(562):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(564): add_newdoc('numpy.core', 'broadcast', ('numiter',
add_newdocs.py(576):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(578): add_newdoc('numpy.core', 'broadcast', ('shape',
add_newdocs.py(590):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(592): add_newdoc('numpy.core', 'broadcast', ('size',
add_newdocs.py(604):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(606): add_newdoc('numpy.core', 'broadcast', ('reset',
add_newdocs.py(635):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(643): add_newdoc('numpy.core.multiarray', 'array',
add_newdocs.py(733):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(735): add_newdoc('numpy.core.multiarray', 'empty',
add_newdocs.py(779):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(781): add_newdoc('numpy.core.multiarray', 'empty_like',
add_newdocs.py(839):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(842): add_newdoc('numpy.core.multiarray', 'scalar',
add_newdocs.py(854):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(856): add_newdoc('numpy.core.multiarray', 'zeros',
add_newdocs.py(907):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(909): add_newdoc('numpy.core.multiarray', 'count_nonzero',
add_newdocs.py(935):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(937): add_newdoc('numpy.core.multiarray', 'set_typeDict',
add_newdocs.py(943):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(945): add_newdoc('numpy.core.multiarray', 'fromstring',
add_newdocs.py(995):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(997): add_newdoc('numpy.core.multiarray', 'fromiter',
add_newdocs.py(1029):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1031): add_newdoc('numpy.core.multiarray', 'fromfile',
add_newdocs.py(1104):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1106): add_newdoc('numpy.core.multiarray', 'frombuffer',
add_newdocs.py(1142):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1144): add_newdoc('numpy.core.multiarray', 'concatenate',
add_newdocs.py(1217):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1219): add_newdoc('numpy.core', 'inner',
add_newdocs.py(1291):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1293): add_newdoc('numpy.core', 'fastCopyAndTranspose',
add_newdocs.py(1294):     """_fastCopyAndTranspose(a)""")
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1296): add_newdoc('numpy.core.multiarray', 'correlate',
add_newdocs.py(1297):     """cross_correlate(a,v, mode=0)""")
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1299): add_newdoc('numpy.core.multiarray', 'arange',
add_newdocs.py(1358):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1360): add_newdoc('numpy.core.multiarray', '_get_ndarray_c_version',
add_newdocs.py(1365):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1367): add_newdoc('numpy.core.multiarray', '_reconstruct',
add_newdocs.py(1372):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1375): add_newdoc('numpy.core.multiarray', 'set_string_function',
add_newdocs.py(1381):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1383): add_newdoc('numpy.core.multiarray', 'set_numeric_ops',
add_newdocs.py(1425):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1427): add_newdoc('numpy.core.multiarray', 'where',
add_newdocs.py(1496):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1499): add_newdoc('numpy.core.multiarray', 'lexsort',
add_newdocs.py(1573):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1575): add_newdoc('numpy.core.multiarray', 'can_cast',
add_newdocs.py(1681):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1683): add_newdoc('numpy.core.multiarray', 'promote_types',
add_newdocs.py(1733):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1735): add_newdoc('numpy.core.multiarray', 'min_scalar_type',
add_newdocs.py(1781):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1783): add_newdoc('numpy.core.multiarray', 'result_type',
add_newdocs.py(1850):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1852): add_newdoc('numpy.core.multiarray', 'newbuffer',
add_newdocs.py(1868):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1870): add_newdoc('numpy.core.multiarray', 'getbuffer',
add_newdocs.py(1902):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1904): add_newdoc('numpy.core', 'dot',
add_newdocs.py(1977):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(1979): add_newdoc('numpy.core', 'matmul',
add_newdocs.py(2100):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(2103): add_newdoc('numpy.core', 'einsum',
add_newdocs.py(2321):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(2323): add_newdoc('numpy.core', 'vdot',
add_newdocs.py(2376):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(2393): add_newdoc('numpy.core.multiarray', 'ndarray',
add_newdocs.py(2512):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(2522): add_newdoc('numpy.core.multiarray', 'ndarray', ('__array_interface__',
add_newdocs.py(2523):     """Array protocol: Python side."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2526): add_newdoc('numpy.core.multiarray', 'ndarray', ('__array_finalize__',
add_newdocs.py(2527):     """None."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2530): add_newdoc('numpy.core.multiarray', 'ndarray', ('__array_priority__',
add_newdocs.py(2531):     """Array priority."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2534): add_newdoc('numpy.core.multiarray', 'ndarray', ('__array_struct__',
add_newdocs.py(2535):     """Array protocol: C-struct side."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2538): add_newdoc('numpy.core.multiarray', 'ndarray', ('_as_parameter_',
add_newdocs.py(2542):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(2545): add_newdoc('numpy.core.multiarray', 'ndarray', ('base',
add_newdocs.py(2563):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2566): add_newdoc('numpy.core.multiarray', 'ndarray', ('ctypes',
add_newdocs.py(2666):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2669): add_newdoc('numpy.core.multiarray', 'ndarray', ('data',
add_newdocs.py(2670):     """Python buffer object pointing to the start of the array's data."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2673): add_newdoc('numpy.core.multiarray', 'ndarray', ('dtype',
add_newdocs.py(2699):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2702): add_newdoc('numpy.core.multiarray', 'ndarray', ('imag',
add_newdocs.py(2714):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2717): add_newdoc('numpy.core.multiarray', 'ndarray', ('itemsize',
add_newdocs.py(2730):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2733): add_newdoc('numpy.core.multiarray', 'ndarray', ('flags',
add_newdocs.py(2801):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2804): add_newdoc('numpy.core.multiarray', 'ndarray', ('flat',
add_newdocs.py(2843):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2846): add_newdoc('numpy.core.multiarray', 'ndarray', ('nbytes',
add_newdocs.py(2863):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2866): add_newdoc('numpy.core.multiarray', 'ndarray', ('ndim',
add_newdocs.py(2879):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2882): add_newdoc('numpy.core.multiarray', 'ndarray', ('real',
add_newdocs.py(2898):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2901): add_newdoc('numpy.core.multiarray', 'ndarray', ('shape',
add_newdocs.py(2928):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2931): add_newdoc('numpy.core.multiarray', 'ndarray', ('size',
add_newdocs.py(2946):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(2949): add_newdoc('numpy.core.multiarray', 'ndarray', ('strides',
add_newdocs.py(3008):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3011): add_newdoc('numpy.core.multiarray', 'ndarray', ('T',
add_newdocs.py(3031):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3041): add_newdoc('numpy.core.multiarray', 'ndarray', ('__array__',
add_newdocs.py(3048):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3051): add_newdoc('numpy.core.multiarray', 'ndarray', ('__array_prepare__',
add_newdocs.py(3054):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3057): add_newdoc('numpy.core.multiarray', 'ndarray', ('__array_wrap__',
add_newdocs.py(3060):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3063): add_newdoc('numpy.core.multiarray', 'ndarray', ('__copy__',
add_newdocs.py(3076):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3079): add_newdoc('numpy.core.multiarray', 'ndarray', ('__deepcopy__',
add_newdocs.py(3084):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3087): add_newdoc('numpy.core.multiarray', 'ndarray', ('__reduce__',
add_newdocs.py(3092):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3095): add_newdoc('numpy.core.multiarray', 'ndarray', ('__setstate__',
add_newdocs.py(3110):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3113): add_newdoc('numpy.core.multiarray', 'ndarray', ('all',
add_newdocs.py(3125):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3128): add_newdoc('numpy.core.multiarray', 'ndarray', ('any',
add_newdocs.py(3140):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3143): add_newdoc('numpy.core.multiarray', 'ndarray', ('argmax',
add_newdocs.py(3155):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3158): add_newdoc('numpy.core.multiarray', 'ndarray', ('argmin',
add_newdocs.py(3170):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3173): add_newdoc('numpy.core.multiarray', 'ndarray', ('argsort',
add_newdocs.py(3185):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3188): add_newdoc('numpy.core.multiarray', 'ndarray', ('argpartition',
add_newdocs.py(3202):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3205): add_newdoc('numpy.core.multiarray', 'ndarray', ('astype',
add_newdocs.py(3271):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3274): add_newdoc('numpy.core.multiarray', 'ndarray', ('byteswap',
add_newdocs.py(3311):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3314): add_newdoc('numpy.core.multiarray', 'ndarray', ('choose',
add_newdocs.py(3326):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3329): add_newdoc('numpy.core.multiarray', 'ndarray', ('clip',
add_newdocs.py(3342):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3345): add_newdoc('numpy.core.multiarray', 'ndarray', ('compress',
add_newdocs.py(3357):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3360): add_newdoc('numpy.core.multiarray', 'ndarray', ('conj',
add_newdocs.py(3372):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3375): add_newdoc('numpy.core.multiarray', 'ndarray', ('conjugate',
add_newdocs.py(3387):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3390): add_newdoc('numpy.core.multiarray', 'ndarray', ('copy',
add_newdocs.py(3430):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3433): add_newdoc('numpy.core.multiarray', 'ndarray', ('cumprod',
add_newdocs.py(3445):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3448): add_newdoc('numpy.core.multiarray', 'ndarray', ('cumsum',
add_newdocs.py(3460):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3463): add_newdoc('numpy.core.multiarray', 'ndarray', ('diagonal',
add_newdocs.py(3477):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3480): add_newdoc('numpy.core.multiarray', 'ndarray', ('dot',
add_newdocs.py(3506):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3509): add_newdoc('numpy.core.multiarray', 'ndarray', ('dump',
add_newdocs.py(3520):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3523): add_newdoc('numpy.core.multiarray', 'ndarray', ('dumps',
add_newdocs.py(3534):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3537): add_newdoc('numpy.core.multiarray', 'ndarray', ('fill',
add_newdocs.py(3559):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3562): add_newdoc('numpy.core.multiarray', 'ndarray', ('flatten',
add_newdocs.py(3593):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3596): add_newdoc('numpy.core.multiarray', 'ndarray', ('getfield',
add_newdocs.py(3635):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3638): add_newdoc('numpy.core.multiarray', 'ndarray', ('item',
add_newdocs.py(3693):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3696): add_newdoc('numpy.core.multiarray', 'ndarray', ('itemset',
add_newdocs.py(3739):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3742): add_newdoc('numpy.core.multiarray', 'ndarray', ('max',
add_newdocs.py(3754):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3757): add_newdoc('numpy.core.multiarray', 'ndarray', ('mean',
add_newdocs.py(3769):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3772): add_newdoc('numpy.core.multiarray', 'ndarray', ('min',
add_newdocs.py(3784):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3787): add_newdoc('numpy.core.multiarray', 'may_share_memory',
add_newdocs.py(3810):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(3813): add_newdoc('numpy.core.multiarray', 'ndarray', ('newbyteorder',
add_newdocs.py(3852):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3855): add_newdoc('numpy.core.multiarray', 'ndarray', ('nonzero',
add_newdocs.py(3867):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3870): add_newdoc('numpy.core.multiarray', 'ndarray', ('prod',
add_newdocs.py(3882):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3885): add_newdoc('numpy.core.multiarray', 'ndarray', ('ptp',
add_newdocs.py(3897):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3900): add_newdoc('numpy.core.multiarray', 'ndarray', ('put',
add_newdocs.py(3912):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(3914): add_newdoc('numpy.core.multiarray', 'copyto',
add_newdocs.py(3945):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(3947): add_newdoc('numpy.core.multiarray', 'putmask',
add_newdocs.py(3987):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(3990): add_newdoc('numpy.core.multiarray', 'ndarray', ('ravel',
add_newdocs.py(4004):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4007): add_newdoc('numpy.core.multiarray', 'ndarray', ('repeat',
add_newdocs.py(4019):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4022): add_newdoc('numpy.core.multiarray', 'ndarray', ('reshape',
add_newdocs.py(4034):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4037): add_newdoc('numpy.core.multiarray', 'ndarray', ('resize',
add_newdocs.py(4123):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4126): add_newdoc('numpy.core.multiarray', 'ndarray', ('round',
add_newdocs.py(4138):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4141): add_newdoc('numpy.core.multiarray', 'ndarray', ('searchsorted',
add_newdocs.py(4153):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4156): add_newdoc('numpy.core.multiarray', 'ndarray', ('setfield',
add_newdocs.py(4204):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4207): add_newdoc('numpy.core.multiarray', 'ndarray', ('setflags',
add_newdocs.py(4276):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4279): add_newdoc('numpy.core.multiarray', 'ndarray', ('sort',
add_newdocs.py(4332):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4335): add_newdoc('numpy.core.multiarray', 'ndarray', ('partition',
add_newdocs.py(4387):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4390): add_newdoc('numpy.core.multiarray', 'ndarray', ('squeeze',
add_newdocs.py(4402):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4405): add_newdoc('numpy.core.multiarray', 'ndarray', ('std',
add_newdocs.py(4417):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4420): add_newdoc('numpy.core.multiarray', 'ndarray', ('sum',
add_newdocs.py(4432):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4435): add_newdoc('numpy.core.multiarray', 'ndarray', ('swapaxes',
add_newdocs.py(4447):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4450): add_newdoc('numpy.core.multiarray', 'ndarray', ('take',
add_newdocs.py(4462):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4465): add_newdoc('numpy.core.multiarray', 'ndarray', ('tofile',
add_newdocs.py(4497):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4500): add_newdoc('numpy.core.multiarray', 'ndarray', ('tolist',
add_newdocs.py(4533):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4570):     """
add_newdocs.py(4572): add_newdoc('numpy.core.multiarray', 'ndarray',
add_newdocs.py(4573):            ('tostring', tobytesdoc.format(name='tostring',
add_newdocs.py(4575):                                           'This function is a compatibility '
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4579): add_newdoc('numpy.core.multiarray', 'ndarray',
add_newdocs.py(4580):            ('tobytes', tobytesdoc.format(name='tobytes',
add_newdocs.py(4581):                                          deprecated='.. versionadded:: 1.9.0')))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4583): add_newdoc('numpy.core.multiarray', 'ndarray', ('trace',
add_newdocs.py(4595):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4598): add_newdoc('numpy.core.multiarray', 'ndarray', ('transpose',
add_newdocs.py(4649):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4652): add_newdoc('numpy.core.multiarray', 'ndarray', ('var',
add_newdocs.py(4664):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4667): add_newdoc('numpy.core.multiarray', 'ndarray', ('view',
add_newdocs.py(4764):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(4773): add_newdoc('numpy.core.umath', 'frompyfunc',
add_newdocs.py(4811):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(4813): add_newdoc('numpy.core.umath', 'geterrobj',
add_newdocs.py(4875):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(4877): add_newdoc('numpy.core.umath', 'seterrobj',
add_newdocs.py(4934):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(4943): add_newdoc('numpy.core.multiarray', 'digitize',
add_newdocs.py(5021):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5023): add_newdoc('numpy.core.multiarray', 'bincount',
add_newdocs.py(5094):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5096): add_newdoc('numpy.core.multiarray', 'ravel_multi_index',
add_newdocs.py(5152):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5154): add_newdoc('numpy.core.multiarray', 'unravel_index',
add_newdocs.py(5195):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5197): add_newdoc('numpy.core.multiarray', 'add_docstring',
add_newdocs.py(5205):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5207): add_newdoc('numpy.core.umath', '_add_newdoc_ufunc',
add_newdocs.py(5231):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5233): add_newdoc('numpy.core.multiarray', 'packbits',
add_newdocs.py(5275):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5277): add_newdoc('numpy.core.multiarray', 'unpackbits',
add_newdocs.py(5318):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5334): add_newdoc('numpy.core', 'ufunc',
add_newdocs.py(5393):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(5402): add_newdoc('numpy.core', 'ufunc', ('identity',
add_newdocs.py(5419):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5421): add_newdoc('numpy.core', 'ufunc', ('nargs',
add_newdocs.py(5443):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5445): add_newdoc('numpy.core', 'ufunc', ('nin',
add_newdocs.py(5461):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5463): add_newdoc('numpy.core', 'ufunc', ('nout',
add_newdocs.py(5484):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5486): add_newdoc('numpy.core', 'ufunc', ('ntypes',
add_newdocs.py(5510):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5512): add_newdoc('numpy.core', 'ufunc', ('types',
add_newdocs.py(5547):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5556): add_newdoc('numpy.core', 'ufunc', ('reduce',
add_newdocs.py(5641):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5643): add_newdoc('numpy.core', 'ufunc', ('accumulate',
add_newdocs.py(5715):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5717): add_newdoc('numpy.core', 'ufunc', ('reduceat',
add_newdocs.py(5817):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5819): add_newdoc('numpy.core', 'ufunc', ('outer',
add_newdocs.py(5879):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5881): add_newdoc('numpy.core', 'ufunc', ('at',
add_newdocs.py(5935):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(5949): add_newdoc('numpy.core.multiarray', 'dtype',
add_newdocs.py(6032):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(6040): add_newdoc('numpy.core.multiarray', 'dtype', ('alignment',
add_newdocs.py(6046):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6048): add_newdoc('numpy.core.multiarray', 'dtype', ('byteorder',
add_newdocs.py(6089):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6091): add_newdoc('numpy.core.multiarray', 'dtype', ('char',
add_newdocs.py(6092):     """A unique character code for each of the 21 different built-in types."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6094): add_newdoc('numpy.core.multiarray', 'dtype', ('descr',
add_newdocs.py(6101):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6103): add_newdoc('numpy.core.multiarray', 'dtype', ('fields',
add_newdocs.py(6128):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6130): add_newdoc('numpy.core.multiarray', 'dtype', ('flags',
add_newdocs.py(6140):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6142): add_newdoc('numpy.core.multiarray', 'dtype', ('hasobject',
add_newdocs.py(6153):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6155): add_newdoc('numpy.core.multiarray', 'dtype', ('isbuiltin',
add_newdocs.py(6182):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6184): add_newdoc('numpy.core.multiarray', 'dtype', ('isnative',
add_newdocs.py(6189):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6191): add_newdoc('numpy.core.multiarray', 'dtype', ('isalignedstruct',
add_newdocs.py(6197):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6199): add_newdoc('numpy.core.multiarray', 'dtype', ('itemsize',
add_newdocs.py(6206):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6208): add_newdoc('numpy.core.multiarray', 'dtype', ('kind',
add_newdocs.py(6224):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6226): add_newdoc('numpy.core.multiarray', 'dtype', ('name',
add_newdocs.py(6232):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6234): add_newdoc('numpy.core.multiarray', 'dtype', ('names',
add_newdocs.py(6247):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6249): add_newdoc('numpy.core.multiarray', 'dtype', ('num',
add_newdocs.py(6255):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6257): add_newdoc('numpy.core.multiarray', 'dtype', ('shape',
add_newdocs.py(6262):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6264): add_newdoc('numpy.core.multiarray', 'dtype', ('str',
add_newdocs.py(6265):     """The array-protocol typestring of this data-type object."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6267): add_newdoc('numpy.core.multiarray', 'dtype', ('subdtype',
add_newdocs.py(6279):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6281): add_newdoc('numpy.core.multiarray', 'dtype', ('type',
add_newdocs.py(6282):     """The type object used to instantiate a scalar of this data-type."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6290): add_newdoc('numpy.core.multiarray', 'dtype', ('newbyteorder',
add_newdocs.py(6354):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6363): add_newdoc('numpy.core.multiarray', 'busdaycalendar',
add_newdocs.py(6425):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(6427): add_newdoc('numpy.core.multiarray', 'busdaycalendar', ('weekmask',
add_newdocs.py(6428):     """A copy of the seven-element boolean mask indicating valid days."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6430): add_newdoc('numpy.core.multiarray', 'busdaycalendar', ('holidays',
add_newdocs.py(6431):     """A copy of the holiday array indicating additional invalid days."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6433): add_newdoc('numpy.core.multiarray', 'is_busday',
add_newdocs.py(6482):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(6484): add_newdoc('numpy.core.multiarray', 'busday_offset',
add_newdocs.py(6572):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(6574): add_newdoc('numpy.core.multiarray', 'busday_count',
add_newdocs.py(6636):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(6644): add_newdoc('numpy.lib.index_tricks', 'mgrid',
add_newdocs.py(6685):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(6687): add_newdoc('numpy.lib.index_tricks', 'ogrid',
add_newdocs.py(6724):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(6733): add_newdoc('numpy.core.numerictypes', 'generic',
add_newdocs.py(6743):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(6747): add_newdoc('numpy.core.numerictypes', 'generic', ('T',
add_newdocs.py(6759):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6761): add_newdoc('numpy.core.numerictypes', 'generic', ('base',
add_newdocs.py(6773):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6775): add_newdoc('numpy.core.numerictypes', 'generic', ('data',
add_newdocs.py(6776):     """Pointer to start of data."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6778): add_newdoc('numpy.core.numerictypes', 'generic', ('dtype',
add_newdocs.py(6779):     """Get array data-descriptor."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6781): add_newdoc('numpy.core.numerictypes', 'generic', ('flags',
add_newdocs.py(6782):     """The integer value of flags."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6784): add_newdoc('numpy.core.numerictypes', 'generic', ('flat',
add_newdocs.py(6785):     """A 1-D view of the scalar."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6787): add_newdoc('numpy.core.numerictypes', 'generic', ('imag',
add_newdocs.py(6788):     """The imaginary part of the scalar."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6790): add_newdoc('numpy.core.numerictypes', 'generic', ('itemsize',
add_newdocs.py(6791):     """The length of one element in bytes."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6793): add_newdoc('numpy.core.numerictypes', 'generic', ('nbytes',
add_newdocs.py(6794):     """The length of the scalar in bytes."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6796): add_newdoc('numpy.core.numerictypes', 'generic', ('ndim',
add_newdocs.py(6797):     """The number of array dimensions."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6799): add_newdoc('numpy.core.numerictypes', 'generic', ('real',
add_newdocs.py(6800):     """The real part of the scalar."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6802): add_newdoc('numpy.core.numerictypes', 'generic', ('shape',
add_newdocs.py(6803):     """Tuple of array dimensions."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6805): add_newdoc('numpy.core.numerictypes', 'generic', ('size',
add_newdocs.py(6806):     """The number of elements in the gentype."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6808): add_newdoc('numpy.core.numerictypes', 'generic', ('strides',
add_newdocs.py(6809):     """Tuple of bytes steps in each dimension."""))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(6813): add_newdoc('numpy.core.numerictypes', 'generic', ('all',
add_newdocs.py(6825):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6827): add_newdoc('numpy.core.numerictypes', 'generic', ('any',
add_newdocs.py(6839):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6841): add_newdoc('numpy.core.numerictypes', 'generic', ('argmax',
add_newdocs.py(6853):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6855): add_newdoc('numpy.core.numerictypes', 'generic', ('argmin',
add_newdocs.py(6867):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6869): add_newdoc('numpy.core.numerictypes', 'generic', ('argsort',
add_newdocs.py(6881):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6883): add_newdoc('numpy.core.numerictypes', 'generic', ('astype',
add_newdocs.py(6895):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6897): add_newdoc('numpy.core.numerictypes', 'generic', ('byteswap',
add_newdocs.py(6909):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6911): add_newdoc('numpy.core.numerictypes', 'generic', ('choose',
add_newdocs.py(6923):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6925): add_newdoc('numpy.core.numerictypes', 'generic', ('clip',
add_newdocs.py(6937):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6939): add_newdoc('numpy.core.numerictypes', 'generic', ('compress',
add_newdocs.py(6951):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6953): add_newdoc('numpy.core.numerictypes', 'generic', ('conjugate',
add_newdocs.py(6965):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6967): add_newdoc('numpy.core.numerictypes', 'generic', ('copy',
add_newdocs.py(6979):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6981): add_newdoc('numpy.core.numerictypes', 'generic', ('cumprod',
add_newdocs.py(6993):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(6995): add_newdoc('numpy.core.numerictypes', 'generic', ('cumsum',
add_newdocs.py(7007):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7009): add_newdoc('numpy.core.numerictypes', 'generic', ('diagonal',
add_newdocs.py(7021):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7023): add_newdoc('numpy.core.numerictypes', 'generic', ('dump',
add_newdocs.py(7035):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7037): add_newdoc('numpy.core.numerictypes', 'generic', ('dumps',
add_newdocs.py(7049):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7051): add_newdoc('numpy.core.numerictypes', 'generic', ('fill',
add_newdocs.py(7063):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7065): add_newdoc('numpy.core.numerictypes', 'generic', ('flatten',
add_newdocs.py(7077):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7079): add_newdoc('numpy.core.numerictypes', 'generic', ('getfield',
add_newdocs.py(7091):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7093): add_newdoc('numpy.core.numerictypes', 'generic', ('item',
add_newdocs.py(7105):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7107): add_newdoc('numpy.core.numerictypes', 'generic', ('itemset',
add_newdocs.py(7119):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7121): add_newdoc('numpy.core.numerictypes', 'generic', ('max',
add_newdocs.py(7133):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7135): add_newdoc('numpy.core.numerictypes', 'generic', ('mean',
add_newdocs.py(7147):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7149): add_newdoc('numpy.core.numerictypes', 'generic', ('min',
add_newdocs.py(7161):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7163): add_newdoc('numpy.core.numerictypes', 'generic', ('newbyteorder',
add_newdocs.py(7194):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7196): add_newdoc('numpy.core.numerictypes', 'generic', ('nonzero',
add_newdocs.py(7208):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7210): add_newdoc('numpy.core.numerictypes', 'generic', ('prod',
add_newdocs.py(7222):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7224): add_newdoc('numpy.core.numerictypes', 'generic', ('ptp',
add_newdocs.py(7236):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7238): add_newdoc('numpy.core.numerictypes', 'generic', ('put',
add_newdocs.py(7250):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7252): add_newdoc('numpy.core.numerictypes', 'generic', ('ravel',
add_newdocs.py(7264):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7266): add_newdoc('numpy.core.numerictypes', 'generic', ('repeat',
add_newdocs.py(7278):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7280): add_newdoc('numpy.core.numerictypes', 'generic', ('reshape',
add_newdocs.py(7292):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7294): add_newdoc('numpy.core.numerictypes', 'generic', ('resize',
add_newdocs.py(7306):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7308): add_newdoc('numpy.core.numerictypes', 'generic', ('round',
add_newdocs.py(7320):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7322): add_newdoc('numpy.core.numerictypes', 'generic', ('searchsorted',
add_newdocs.py(7334):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7336): add_newdoc('numpy.core.numerictypes', 'generic', ('setfield',
add_newdocs.py(7348):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7350): add_newdoc('numpy.core.numerictypes', 'generic', ('setflags',
add_newdocs.py(7362):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7364): add_newdoc('numpy.core.numerictypes', 'generic', ('sort',
add_newdocs.py(7376):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7378): add_newdoc('numpy.core.numerictypes', 'generic', ('squeeze',
add_newdocs.py(7390):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7392): add_newdoc('numpy.core.numerictypes', 'generic', ('std',
add_newdocs.py(7404):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7406): add_newdoc('numpy.core.numerictypes', 'generic', ('sum',
add_newdocs.py(7418):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7420): add_newdoc('numpy.core.numerictypes', 'generic', ('swapaxes',
add_newdocs.py(7432):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7434): add_newdoc('numpy.core.numerictypes', 'generic', ('take',
add_newdocs.py(7446):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7448): add_newdoc('numpy.core.numerictypes', 'generic', ('tofile',
add_newdocs.py(7460):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7462): add_newdoc('numpy.core.numerictypes', 'generic', ('tolist',
add_newdocs.py(7474):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7476): add_newdoc('numpy.core.numerictypes', 'generic', ('tostring',
add_newdocs.py(7488):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7490): add_newdoc('numpy.core.numerictypes', 'generic', ('trace',
add_newdocs.py(7502):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7504): add_newdoc('numpy.core.numerictypes', 'generic', ('transpose',
add_newdocs.py(7516):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7518): add_newdoc('numpy.core.numerictypes', 'generic', ('var',
add_newdocs.py(7530):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7532): add_newdoc('numpy.core.numerictypes', 'generic', ('view',
add_newdocs.py(7544):     """))
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3535):         elif isinstance(doc, tuple):
function_base.py(3536):             add_docstring(getattr(new, doc[0]), doc[1].strip())
add_newdocs.py(7553): add_newdoc('numpy.core.numerictypes', 'bool_',
add_newdocs.py(7554):     """Numpy's Boolean type.  Character code: ``?``.  Alias: bool8""")
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(7556): add_newdoc('numpy.core.numerictypes', 'complex64',
add_newdocs.py(7560):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(7562): add_newdoc('numpy.core.numerictypes', 'complex128',
add_newdocs.py(7567):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(7569): add_newdoc('numpy.core.numerictypes', 'complex256',
add_newdocs.py(7573):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(7575): add_newdoc('numpy.core.numerictypes', 'float32',
add_newdocs.py(7579):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(7581): add_newdoc('numpy.core.numerictypes', 'float64',
add_newdocs.py(7585):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(7587): add_newdoc('numpy.core.numerictypes', 'float96',
add_newdocs.py(7589):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3540):     except:
function_base.py(3541):         pass
add_newdocs.py(7591): add_newdoc('numpy.core.numerictypes', 'float128',
add_newdocs.py(7596):     """)
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(7598): add_newdoc('numpy.core.numerictypes', 'int8',
add_newdocs.py(7599):     """8-bit integer. Character code ``b``. C char compatible.""")
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(7601): add_newdoc('numpy.core.numerictypes', 'int16',
add_newdocs.py(7602):     """16-bit integer. Character code ``h``. C short compatible.""")
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(7604): add_newdoc('numpy.core.numerictypes', 'int32',
add_newdocs.py(7605):     """32-bit integer. Character code 'i'. C int compatible.""")
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(7607): add_newdoc('numpy.core.numerictypes', 'int64',
add_newdocs.py(7608):     """64-bit integer. Character code 'l'. Python int compatible.""")
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
add_newdocs.py(7610): add_newdoc('numpy.core.numerictypes', 'object_',
add_newdocs.py(7611):     """Any Python object.  Character code: 'O'.""")
 --- modulename: function_base, funcname: add_newdoc
function_base.py(3531):     try:
function_base.py(3532):         new = getattr(__import__(place, globals(), {}, [obj]), obj)
function_base.py(3533):         if isinstance(doc, str):
function_base.py(3534):             add_docstring(new, doc.strip())
__init__.py(181):     __all__ = ['add_newdocs',
__init__.py(182):                'ModuleDeprecationWarning',
__init__.py(183):                'VisibleDeprecationWarning']
__init__.py(185):     pkgload.__doc__ = PackageLoader.__call__.__doc__
__init__.py(187):     from .testing import Tester
__init__.py(188):     test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(189):     bench = Tester().bench
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(191):     from . import core
__init__.py(192):     from .core import *
__init__.py(193):     from . import compat
__init__.py(194):     from . import lib
__init__.py(195):     from .lib import *
__init__.py(196):     from . import linalg
__init__.py(197):     from . import fft
 --- modulename: __init__, funcname: <module>
__init__.py(1): from __future__ import division, absolute_import, print_function
__init__.py(4): from .info import __doc__
 --- modulename: info, funcname: <module>
info.py(184): """
info.py(185): from __future__ import division, absolute_import, print_function
info.py(187): depends = ['core']
__init__.py(6): from .fftpack import *
 --- modulename: fftpack, funcname: <module>
fftpack.py(32): """
fftpack.py(33): from __future__ import division, absolute_import, print_function
fftpack.py(35): __all__ = ['fft', 'ifft', 'rfft', 'irfft', 'hfft', 'ihfft', 'rfftn',
fftpack.py(36):            'irfftn', 'rfft2', 'irfft2', 'fft2', 'ifft2', 'fftn', 'ifftn']
fftpack.py(38): from numpy.core import (array, asarray, zeros, swapaxes, shape, conjugate,
fftpack.py(40): from . import fftpack_lite as fftpack
fftpack.py(42): _fft_cache = {}
fftpack.py(43): _real_fft_cache = {}
fftpack.py(46): def _raw_fft(a, n=None, axis=-1, init_function=fftpack.cffti,
fftpack.py(47):              work_function=fftpack.cfftf, fft_cache=_fft_cache):
fftpack.py(93): def _unitary(norm):
fftpack.py(100): def fft(a, n=None, axis=-1, norm=None):
fftpack.py(195): def ifft(a, n=None, axis=-1, norm=None):
fftpack.py(281): def rfft(a, n=None, axis=-1, norm=None):
fftpack.py(367): def irfft(a, n=None, axis=-1, norm=None):
fftpack.py(456): def hfft(a, n=None, axis=-1, norm=None):
fftpack.py(533): def ihfft(a, n=None, axis=-1, norm=None):
fftpack.py(592): def _cook_nd_args(a, s=None, axes=None, invreal=0):
fftpack.py(611): def _raw_fftnd(a, s=None, axes=None, function=fft, norm=None):
fftpack.py(621): def fftn(a, s=None, axes=None, norm=None):
fftpack.py(717): def ifftn(a, s=None, axes=None, norm=None):
fftpack.py(813): def fft2(a, s=None, axes=(-2, -1), norm=None):
fftpack.py(902): def ifft2(a, s=None, axes=(-2, -1), norm=None):
fftpack.py(988): def rfftn(a, s=None, axes=None, norm=None):
fftpack.py(1079): def rfft2(a, s=None, axes=(-2, -1), norm=None):
fftpack.py(1115): def irfftn(a, s=None, axes=None, norm=None):
fftpack.py(1208): def irfft2(a, s=None, axes=(-2, -1), norm=None):
__init__.py(7): from .helper import *
 --- modulename: helper, funcname: <module>
helper.py(4): """
helper.py(5): from __future__ import division, absolute_import, print_function
helper.py(7): from numpy.compat import integer_types
helper.py(8): from numpy.core import (
helper.py(14): __all__ = ['fftshift', 'ifftshift', 'fftfreq', 'rfftfreq']
helper.py(16): integer_types = integer_types + (integer,)
helper.py(19): def fftshift(x, axes=None):
helper.py(78): def ifftshift(x, axes=None):
helper.py(127): def fftfreq(n, d=1.0):
helper.py(176): def rfftfreq(n, d=1.0):
__init__.py(9): from numpy.testing import Tester
__init__.py(10): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(11): bench = Tester().bench
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(198):     from . import polynomial
 --- modulename: __init__, funcname: <module>
__init__.py(15): """
__init__.py(16): from __future__ import division, absolute_import, print_function
__init__.py(18): from .polynomial import Polynomial
 --- modulename: polynomial, funcname: <module>
polynomial.py(55): """
polynomial.py(56): from __future__ import division, absolute_import, print_function
polynomial.py(59):     'polyzero', 'polyone', 'polyx', 'polydomain', 'polyline', 'polyadd',
polynomial.py(60):     'polysub', 'polymulx', 'polymul', 'polydiv', 'polypow', 'polyval',
polynomial.py(61):     'polyder', 'polyint', 'polyfromroots', 'polyvander', 'polyfit',
polynomial.py(62):     'polytrim', 'polyroots', 'Polynomial', 'polyval2d', 'polyval3d',
polynomial.py(63):     'polygrid2d', 'polygrid3d', 'polyvander2d', 'polyvander3d']
polynomial.py(65): import warnings
polynomial.py(66): import numpy as np
polynomial.py(67): import numpy.linalg as la
polynomial.py(69): from . import polyutils as pu
 --- modulename: polyutils, funcname: <module>
polyutils.py(45): """
polyutils.py(46): from __future__ import division, absolute_import, print_function
polyutils.py(48): import numpy as np
polyutils.py(51):     'RankWarning', 'PolyError', 'PolyDomainError', 'as_series', 'trimseq',
polyutils.py(52):     'trimcoef', 'getdomain', 'mapdomain', 'mapparms', 'PolyBase']
polyutils.py(58): class RankWarning(UserWarning):
 --- modulename: polyutils, funcname: RankWarning
polyutils.py(58): class RankWarning(UserWarning):
polyutils.py(59):     """Issued by chebfit when the design matrix is rank deficient."""
polyutils.py(60):     pass
polyutils.py(62): class PolyError(Exception):
 --- modulename: polyutils, funcname: PolyError
polyutils.py(62): class PolyError(Exception):
polyutils.py(63):     """Base class for errors in this module."""
polyutils.py(64):     pass
polyutils.py(66): class PolyDomainError(PolyError):
 --- modulename: polyutils, funcname: PolyDomainError
polyutils.py(66): class PolyDomainError(PolyError):
polyutils.py(72):     """
polyutils.py(73):     pass
polyutils.py(79): class PolyBase(object):
 --- modulename: polyutils, funcname: PolyBase
polyutils.py(79): class PolyBase(object):
polyutils.py(88):     """
polyutils.py(89):     pass
polyutils.py(94): def trimseq(seq):
polyutils.py(124): def as_series(alist, trim=True):
polyutils.py(191): def trimcoef(c, tol=0):
polyutils.py(245): def getdomain(x):
polyutils.py(291): def mapparms(old, new):
polyutils.py(338): def mapdomain(x, old, new):
polynomial.py(70): from ._polybase import ABCPolyBase
 --- modulename: _polybase, funcname: <module>
_polybase.py(8): """
_polybase.py(9): from __future__ import division, absolute_import, print_function
_polybase.py(11): from abc import ABCMeta, abstractmethod, abstractproperty
_polybase.py(12): from numbers import Number
_polybase.py(14): import numpy as np
_polybase.py(15): from . import polyutils as pu
_polybase.py(17): __all__ = ['ABCPolyBase']
_polybase.py(19): class ABCPolyBase(object):
 --- modulename: _polybase, funcname: ABCPolyBase
_polybase.py(19): class ABCPolyBase(object):
_polybase.py(61):     """
_polybase.py(62):     __metaclass__ = ABCMeta
_polybase.py(65):     __hash__ = None
_polybase.py(68):     __array_priority__ = 1000
_polybase.py(71):     maxpower = 100
_polybase.py(73):     @abstractproperty
_polybase.py(77):     @abstractproperty
_polybase.py(81):     @abstractproperty
_polybase.py(85):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(89):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(93):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(97):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(101):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(105):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(109):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(113):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(117):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(121):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(125):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(129):     @abstractmethod
 --- modulename: abc, funcname: abstractmethod
abc.py(32):     funcobj.__isabstractmethod__ = True
abc.py(33):     return funcobj
_polybase.py(133):     def has_samecoef(self, other):
_polybase.py(156):     def has_samedomain(self, other):
_polybase.py(174):     def has_samewindow(self, other):
_polybase.py(192):     def has_sametype(self, other):
_polybase.py(210):     def _get_coefficients(self, other):
_polybase.py(246):     def __init__(self, coef, domain=None, window=None):
_polybase.py(262):     def __repr__(self):
_polybase.py(270):     def __str__(self):
_polybase.py(278):     def __getstate__(self):
_polybase.py(285):     def __setstate__(self, dict):
_polybase.py(290):     def __call__(self, arg):
_polybase.py(295):     def __iter__(self):
_polybase.py(298):     def __len__(self):
_polybase.py(303):     def __neg__(self):
_polybase.py(306):     def __pos__(self):
_polybase.py(309):     def __add__(self, other):
_polybase.py(319):     def __sub__(self, other):
_polybase.py(329):     def __mul__(self, other):
_polybase.py(339):     def __div__(self, other):
_polybase.py(343):     def __truediv__(self, other):
_polybase.py(352):     def __floordiv__(self, other):
_polybase.py(358):     def __mod__(self, other):
_polybase.py(364):     def __divmod__(self, other):
_polybase.py(376):     def __pow__(self, other):
_polybase.py(381):     def __radd__(self, other):
_polybase.py(388):     def __rsub__(self, other):
_polybase.py(395):     def __rmul__(self, other):
_polybase.py(402):     def __rdiv__(self, other):
_polybase.py(406):     def __rtruediv__(self, other):
_polybase.py(411):     def __rfloordiv__(self, other):
_polybase.py(417):     def __rmod__(self, other):
_polybase.py(423):     def __rdivmod__(self, other):
_polybase.py(437):     def __eq__(self, other):
_polybase.py(445):     def __ne__(self, other):
_polybase.py(452):     def copy(self):
_polybase.py(463):     def degree(self):
_polybase.py(476):     def cutdeg(self, deg):
_polybase.py(501):     def trim(self, tol=0):
_polybase.py(524):     def truncate(self, size):
_polybase.py(553):     def convert(self, domain=None, kind=None, window=None):
_polybase.py(593):     def mapparms(self):
_polybase.py(622):     def integ(self, m=1, k=[], lbnd=None):
_polybase.py(655):     def deriv(self, m=1):
_polybase.py(677):     def roots(self):
_polybase.py(692):     def linspace(self, n=100, domain=None):
_polybase.py(724):     @classmethod
_polybase.py(725):     def fit(cls, x, y, deg, domain=None, rcond=None, full=False, w=None,
_polybase.py(726):         window=None):
_polybase.py(809):     @classmethod
_polybase.py(810):     def fromroots(cls, roots, domain=[], window=None):
_polybase.py(850):     @classmethod
_polybase.py(851):     def identity(cls, domain=None, window=None):
_polybase.py(883):     @classmethod
_polybase.py(884):     def basis(cls, deg, domain=None, window=None):
_polybase.py(922):     @classmethod
_polybase.py(923):     def cast(cls, series, domain=None, window=None):
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
polynomial.py(72): polytrim = pu.trimcoef
polynomial.py(80): polydomain = np.array([-1, 1])
polynomial.py(83): polyzero = np.array([0])
polynomial.py(86): polyone = np.array([1])
polynomial.py(89): polyx = np.array([0, 1])
polynomial.py(96): def polyline(off, scl):
polynomial.py(130): def polyfromroots(roots):
polynomial.py(205): def polyadd(c1, c2):
polynomial.py(249): def polysub(c1, c2):
polynomial.py(295): def polymulx(c):
polynomial.py(331): def polymul(c1, c2):
polynomial.py(369): def polydiv(c1, c2):
polynomial.py(426): def polypow(c, pow, maxpower=None):
polynomial.py(477): def polyder(c, m=1, scl=1, axis=0):
polynomial.py(566): def polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
polynomial.py(687): def polyval(x, c, tensor=True):
polynomial.py(783): def polyval2d(x, y, c):
polynomial.py(840): def polygrid2d(x, y, c):
polynomial.py(895): def polyval3d(x, y, z, c):
polynomial.py(954): def polygrid3d(x, y, z, c):
polynomial.py(1013): def polyvander(x, deg):
polynomial.py(1069): def polyvander2d(x, y, deg):
polynomial.py(1129): def polyvander3d(x, y, z, deg):
polynomial.py(1196): def polyfit(x, y, deg, rcond=None, full=False, w=None):
polynomial.py(1391): def polycompanion(c):
polynomial.py(1431): def polyroots(c):
polynomial.py(1493): class Polynomial(ABCPolyBase):
 --- modulename: polynomial, funcname: Polynomial
polynomial.py(1493): class Polynomial(ABCPolyBase):
polynomial.py(1514):     """
polynomial.py(1516):     _add = staticmethod(polyadd)
polynomial.py(1517):     _sub = staticmethod(polysub)
polynomial.py(1518):     _mul = staticmethod(polymul)
polynomial.py(1519):     _div = staticmethod(polydiv)
polynomial.py(1520):     _pow = staticmethod(polypow)
polynomial.py(1521):     _val = staticmethod(polyval)
polynomial.py(1522):     _int = staticmethod(polyint)
polynomial.py(1523):     _der = staticmethod(polyder)
polynomial.py(1524):     _fit = staticmethod(polyfit)
polynomial.py(1525):     _line = staticmethod(polyline)
polynomial.py(1526):     _roots = staticmethod(polyroots)
polynomial.py(1527):     _fromroots = staticmethod(polyfromroots)
polynomial.py(1530):     nickname = 'poly'
polynomial.py(1531):     domain = np.array(polydomain)
polynomial.py(1532):     window = np.array(polydomain)
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
__init__.py(19): from .chebyshev import Chebyshev
 --- modulename: chebyshev, funcname: <module>
chebyshev.py(87): """
chebyshev.py(88): from __future__ import division, absolute_import, print_function
chebyshev.py(90): import warnings
chebyshev.py(91): import numpy as np
chebyshev.py(92): import numpy.linalg as la
chebyshev.py(94): from . import polyutils as pu
chebyshev.py(95): from ._polybase import ABCPolyBase
chebyshev.py(98):     'chebzero', 'chebone', 'chebx', 'chebdomain', 'chebline', 'chebadd',
chebyshev.py(99):     'chebsub', 'chebmulx', 'chebmul', 'chebdiv', 'chebpow', 'chebval',
chebyshev.py(100):     'chebder', 'chebint', 'cheb2poly', 'poly2cheb', 'chebfromroots',
chebyshev.py(101):     'chebvander', 'chebfit', 'chebtrim', 'chebroots', 'chebpts1',
chebyshev.py(102):     'chebpts2', 'Chebyshev', 'chebval2d', 'chebval3d', 'chebgrid2d',
chebyshev.py(103):     'chebgrid3d', 'chebvander2d', 'chebvander3d', 'chebcompanion',
chebyshev.py(104):     'chebgauss', 'chebweight']
chebyshev.py(106): chebtrim = pu.trimcoef
chebyshev.py(113): def _cseries_to_zseries(c):
chebyshev.py(138): def _zseries_to_cseries(zs):
chebyshev.py(163): def _zseries_mul(z1, z2):
chebyshev.py(190): def _zseries_div(z1, z2):
chebyshev.py(257): def _zseries_der(zs):
chebyshev.py(289): def _zseries_int(zs):
chebyshev.py(327): def poly2cheb(pol):
chebyshev.py(377): def cheb2poly(c):
chebyshev.py(444): chebdomain = np.array([-1, 1])
chebyshev.py(447): chebzero = np.array([0])
chebyshev.py(450): chebone = np.array([1])
chebyshev.py(453): chebx = np.array([0, 1])
chebyshev.py(456): def chebline(off, scl):
chebyshev.py(492): def chebfromroots(roots):
chebyshev.py(558): def chebadd(c1, c2):
chebyshev.py(608): def chebsub(c1, c2):
chebyshev.py(661): def chebmulx(c):
chebyshev.py(701): def chebmul(c1, c2):
chebyshev.py(750): def chebdiv(c1, c2):
chebyshev.py(816): def chebpow(c, pow, maxpower=16):
chebyshev.py(868): def chebder(c, m=1, scl=1, axis=0):
chebyshev.py(967): def chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
chebyshev.py(1098): def chebval(x, c, tensor=True):
chebyshev.py(1185): def chebval2d(x, y, c):
chebyshev.py(1241): def chebgrid2d(x, y, c):
chebyshev.py(1296): def chebval3d(x, y, z, c):
chebyshev.py(1355): def chebgrid3d(x, y, z, c):
chebyshev.py(1414): def chebvander(x, deg):
chebyshev.py(1469): def chebvander2d(x, y, deg):
chebyshev.py(1532): def chebvander3d(x, y, z, deg):
chebyshev.py(1597): def chebfit(x, y, deg, rcond=None, full=False, w=None):
chebyshev.py(1769): def chebcompanion(c):
chebyshev.py(1814): def chebroots(c):
chebyshev.py(1870): def chebgauss(deg):
chebyshev.py(1915): def chebweight(x):
chebyshev.py(1943): def chebpts1(npts):
chebyshev.py(1980): def chebpts2(npts):
chebyshev.py(2017): class Chebyshev(ABCPolyBase):
 --- modulename: chebyshev, funcname: Chebyshev
chebyshev.py(2017): class Chebyshev(ABCPolyBase):
chebyshev.py(2038):     """
chebyshev.py(2040):     _add = staticmethod(chebadd)
chebyshev.py(2041):     _sub = staticmethod(chebsub)
chebyshev.py(2042):     _mul = staticmethod(chebmul)
chebyshev.py(2043):     _div = staticmethod(chebdiv)
chebyshev.py(2044):     _pow = staticmethod(chebpow)
chebyshev.py(2045):     _val = staticmethod(chebval)
chebyshev.py(2046):     _int = staticmethod(chebint)
chebyshev.py(2047):     _der = staticmethod(chebder)
chebyshev.py(2048):     _fit = staticmethod(chebfit)
chebyshev.py(2049):     _line = staticmethod(chebline)
chebyshev.py(2050):     _roots = staticmethod(chebroots)
chebyshev.py(2051):     _fromroots = staticmethod(chebfromroots)
chebyshev.py(2054):     nickname = 'cheb'
chebyshev.py(2055):     domain = np.array(chebdomain)
chebyshev.py(2056):     window = np.array(chebdomain)
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
__init__.py(20): from .legendre import Legendre
 --- modulename: legendre, funcname: <module>
legendre.py(83): """
legendre.py(84): from __future__ import division, absolute_import, print_function
legendre.py(86): import warnings
legendre.py(87): import numpy as np
legendre.py(88): import numpy.linalg as la
legendre.py(90): from . import polyutils as pu
legendre.py(91): from ._polybase import ABCPolyBase
legendre.py(94):     'legzero', 'legone', 'legx', 'legdomain', 'legline', 'legadd',
legendre.py(95):     'legsub', 'legmulx', 'legmul', 'legdiv', 'legpow', 'legval', 'legder',
legendre.py(96):     'legint', 'leg2poly', 'poly2leg', 'legfromroots', 'legvander',
legendre.py(97):     'legfit', 'legtrim', 'legroots', 'Legendre', 'legval2d', 'legval3d',
legendre.py(98):     'leggrid2d', 'leggrid3d', 'legvander2d', 'legvander3d', 'legcompanion',
legendre.py(99):     'leggauss', 'legweight']
legendre.py(101): legtrim = pu.trimcoef
legendre.py(104): def poly2leg(pol):
legendre.py(152): def leg2poly(c):
legendre.py(218): legdomain = np.array([-1, 1])
legendre.py(221): legzero = np.array([0])
legendre.py(224): legone = np.array([1])
legendre.py(227): legx = np.array([0, 1])
legendre.py(230): def legline(off, scl):
legendre.py(266): def legfromroots(roots):
legendre.py(332): def legadd(c1, c2):
legendre.py(382): def legsub(c1, c2):
legendre.py(435): def legmulx(c):
legendre.py(481): def legmul(c1, c2):
legendre.py(549): def legdiv(c1, c2):
legendre.py(617): def legpow(c, pow, maxpower=16):
legendre.py(668): def legder(c, m=1, scl=1, axis=0):
legendre.py(767): def legint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
legendre.py(898): def legval(x, c, tensor=True):
legendre.py(986): def legval2d(x, y, c):
legendre.py(1042): def leggrid2d(x, y, c):
legendre.py(1097): def legval3d(x, y, z, c):
legendre.py(1156): def leggrid3d(x, y, z, c):
legendre.py(1215): def legvander(x, deg):
legendre.py(1270): def legvander2d(x, y, deg):
legendre.py(1333): def legvander3d(x, y, z, deg):
legendre.py(1398): def legfit(x, y, deg, rcond=None, full=False, w=None):
legendre.py(1570): def legcompanion(c):
legendre.py(1614): def legroots(c):
legendre.py(1670): def leggauss(deg):
legendre.py(1738): def legweight(x):
legendre.py(1769): class Legendre(ABCPolyBase):
 --- modulename: legendre, funcname: Legendre
legendre.py(1769): class Legendre(ABCPolyBase):
legendre.py(1790):     """
legendre.py(1792):     _add = staticmethod(legadd)
legendre.py(1793):     _sub = staticmethod(legsub)
legendre.py(1794):     _mul = staticmethod(legmul)
legendre.py(1795):     _div = staticmethod(legdiv)
legendre.py(1796):     _pow = staticmethod(legpow)
legendre.py(1797):     _val = staticmethod(legval)
legendre.py(1798):     _int = staticmethod(legint)
legendre.py(1799):     _der = staticmethod(legder)
legendre.py(1800):     _fit = staticmethod(legfit)
legendre.py(1801):     _line = staticmethod(legline)
legendre.py(1802):     _roots = staticmethod(legroots)
legendre.py(1803):     _fromroots = staticmethod(legfromroots)
legendre.py(1806):     nickname = 'leg'
legendre.py(1807):     domain = np.array(legdomain)
legendre.py(1808):     window = np.array(legdomain)
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
__init__.py(21): from .hermite import Hermite
 --- modulename: hermite, funcname: <module>
hermite.py(59): """
hermite.py(60): from __future__ import division, absolute_import, print_function
hermite.py(62): import warnings
hermite.py(63): import numpy as np
hermite.py(64): import numpy.linalg as la
hermite.py(66): from . import polyutils as pu
hermite.py(67): from ._polybase import ABCPolyBase
hermite.py(70):     'hermzero', 'hermone', 'hermx', 'hermdomain', 'hermline', 'hermadd',
hermite.py(71):     'hermsub', 'hermmulx', 'hermmul', 'hermdiv', 'hermpow', 'hermval',
hermite.py(72):     'hermder', 'hermint', 'herm2poly', 'poly2herm', 'hermfromroots',
hermite.py(73):     'hermvander', 'hermfit', 'hermtrim', 'hermroots', 'Hermite',
hermite.py(74):     'hermval2d', 'hermval3d', 'hermgrid2d', 'hermgrid3d', 'hermvander2d',
hermite.py(75):     'hermvander3d', 'hermcompanion', 'hermgauss', 'hermweight']
hermite.py(77): hermtrim = pu.trimcoef
hermite.py(80): def poly2herm(pol):
hermite.py(126): def herm2poly(c):
hermite.py(189): hermdomain = np.array([-1, 1])
hermite.py(192): hermzero = np.array([0])
hermite.py(195): hermone = np.array([1])
hermite.py(198): hermx = np.array([0, 1/2])
hermite.py(201): def hermline(off, scl):
hermite.py(237): def hermfromroots(roots):
hermite.py(304): def hermadd(c1, c2):
hermite.py(352): def hermsub(c1, c2):
hermite.py(401): def hermmulx(c):
hermite.py(450): def hermmul(c1, c2):
hermite.py(516): def hermdiv(c1, c2):
hermite.py(583): def hermpow(c, pow, maxpower=16):
hermite.py(637): def hermder(c, m=1, scl=1, axis=0):
hermite.py(727): def hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
hermite.py(852): def hermval(x, c, tensor=True):
hermite.py(948): def hermval2d(x, y, c):
hermite.py(1004): def hermgrid2d(x, y, c):
hermite.py(1059): def hermval3d(x, y, z, c):
hermite.py(1118): def hermgrid3d(x, y, z, c):
hermite.py(1177): def hermvander(x, deg):
hermite.py(1240): def hermvander2d(x, y, deg):
hermite.py(1303): def hermvander3d(x, y, z, deg):
hermite.py(1368): def hermfit(x, y, deg, rcond=None, full=False, w=None):
hermite.py(1545): def hermcompanion(c):
hermite.py(1590): def hermroots(c):
hermite.py(1649): def _normed_hermite_n(x, n):
hermite.py(1692): def hermgauss(deg):
hermite.py(1760): def hermweight(x):
hermite.py(1792): class Hermite(ABCPolyBase):
 --- modulename: hermite, funcname: Hermite
hermite.py(1792): class Hermite(ABCPolyBase):
hermite.py(1813):     """
hermite.py(1815):     _add = staticmethod(hermadd)
hermite.py(1816):     _sub = staticmethod(hermsub)
hermite.py(1817):     _mul = staticmethod(hermmul)
hermite.py(1818):     _div = staticmethod(hermdiv)
hermite.py(1819):     _pow = staticmethod(hermpow)
hermite.py(1820):     _val = staticmethod(hermval)
hermite.py(1821):     _int = staticmethod(hermint)
hermite.py(1822):     _der = staticmethod(hermder)
hermite.py(1823):     _fit = staticmethod(hermfit)
hermite.py(1824):     _line = staticmethod(hermline)
hermite.py(1825):     _roots = staticmethod(hermroots)
hermite.py(1826):     _fromroots = staticmethod(hermfromroots)
hermite.py(1829):     nickname = 'herm'
hermite.py(1830):     domain = np.array(hermdomain)
hermite.py(1831):     window = np.array(hermdomain)
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
__init__.py(22): from .hermite_e import HermiteE
 --- modulename: hermite_e, funcname: <module>
hermite_e.py(59): """
hermite_e.py(60): from __future__ import division, absolute_import, print_function
hermite_e.py(62): import warnings
hermite_e.py(63): import numpy as np
hermite_e.py(64): import numpy.linalg as la
hermite_e.py(66): from . import polyutils as pu
hermite_e.py(67): from ._polybase import ABCPolyBase
hermite_e.py(70):     'hermezero', 'hermeone', 'hermex', 'hermedomain', 'hermeline',
hermite_e.py(71):     'hermeadd', 'hermesub', 'hermemulx', 'hermemul', 'hermediv',
hermite_e.py(72):     'hermepow', 'hermeval', 'hermeder', 'hermeint', 'herme2poly',
hermite_e.py(73):     'poly2herme', 'hermefromroots', 'hermevander', 'hermefit', 'hermetrim',
hermite_e.py(74):     'hermeroots', 'HermiteE', 'hermeval2d', 'hermeval3d', 'hermegrid2d',
hermite_e.py(75):     'hermegrid3d', 'hermevander2d', 'hermevander3d', 'hermecompanion',
hermite_e.py(76):     'hermegauss', 'hermeweight']
hermite_e.py(78): hermetrim = pu.trimcoef
hermite_e.py(81): def poly2herme(pol):
hermite_e.py(127): def herme2poly(c):
hermite_e.py(189): hermedomain = np.array([-1, 1])
hermite_e.py(192): hermezero = np.array([0])
hermite_e.py(195): hermeone = np.array([1])
hermite_e.py(198): hermex = np.array([0, 1])
hermite_e.py(201): def hermeline(off, scl):
hermite_e.py(238): def hermefromroots(roots):
hermite_e.py(305): def hermeadd(c1, c2):
hermite_e.py(353): def hermesub(c1, c2):
hermite_e.py(402): def hermemulx(c):
hermite_e.py(451): def hermemul(c1, c2):
hermite_e.py(517): def hermediv(c1, c2):
hermite_e.py(582): def hermepow(c, pow, maxpower=16):
hermite_e.py(636): def hermeder(c, m=1, scl=1, axis=0):
hermite_e.py(726): def hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
hermite_e.py(851): def hermeval(x, c, tensor=True):
hermite_e.py(946): def hermeval2d(x, y, c):
hermite_e.py(1002): def hermegrid2d(x, y, c):
hermite_e.py(1057): def hermeval3d(x, y, z, c):
hermite_e.py(1116): def hermegrid3d(x, y, z, c):
hermite_e.py(1175): def hermevander(x, deg):
hermite_e.py(1237): def hermevander2d(x, y, deg):
hermite_e.py(1300): def hermevander3d(x, y, z, deg):
hermite_e.py(1365): def hermefit(x, y, deg, rcond=None, full=False, w=None):
hermite_e.py(1542): def hermecompanion(c):
hermite_e.py(1588): def hermeroots(c):
hermite_e.py(1647): def _normed_hermite_e_n(x, n):
hermite_e.py(1690): def hermegauss(deg):
hermite_e.py(1758): def hermeweight(x):
hermite_e.py(1789): class HermiteE(ABCPolyBase):
 --- modulename: hermite_e, funcname: HermiteE
hermite_e.py(1789): class HermiteE(ABCPolyBase):
hermite_e.py(1810):     """
hermite_e.py(1812):     _add = staticmethod(hermeadd)
hermite_e.py(1813):     _sub = staticmethod(hermesub)
hermite_e.py(1814):     _mul = staticmethod(hermemul)
hermite_e.py(1815):     _div = staticmethod(hermediv)
hermite_e.py(1816):     _pow = staticmethod(hermepow)
hermite_e.py(1817):     _val = staticmethod(hermeval)
hermite_e.py(1818):     _int = staticmethod(hermeint)
hermite_e.py(1819):     _der = staticmethod(hermeder)
hermite_e.py(1820):     _fit = staticmethod(hermefit)
hermite_e.py(1821):     _line = staticmethod(hermeline)
hermite_e.py(1822):     _roots = staticmethod(hermeroots)
hermite_e.py(1823):     _fromroots = staticmethod(hermefromroots)
hermite_e.py(1826):     nickname = 'herme'
hermite_e.py(1827):     domain = np.array(hermedomain)
hermite_e.py(1828):     window = np.array(hermedomain)
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
__init__.py(23): from .laguerre import Laguerre
 --- modulename: laguerre, funcname: <module>
laguerre.py(59): """
laguerre.py(60): from __future__ import division, absolute_import, print_function
laguerre.py(62): import warnings
laguerre.py(63): import numpy as np
laguerre.py(64): import numpy.linalg as la
laguerre.py(66): from . import polyutils as pu
laguerre.py(67): from ._polybase import ABCPolyBase
laguerre.py(70):     'lagzero', 'lagone', 'lagx', 'lagdomain', 'lagline', 'lagadd',
laguerre.py(71):     'lagsub', 'lagmulx', 'lagmul', 'lagdiv', 'lagpow', 'lagval', 'lagder',
laguerre.py(72):     'lagint', 'lag2poly', 'poly2lag', 'lagfromroots', 'lagvander',
laguerre.py(73):     'lagfit', 'lagtrim', 'lagroots', 'Laguerre', 'lagval2d', 'lagval3d',
laguerre.py(74):     'laggrid2d', 'laggrid3d', 'lagvander2d', 'lagvander3d', 'lagcompanion',
laguerre.py(75):     'laggauss', 'lagweight']
laguerre.py(77): lagtrim = pu.trimcoef
laguerre.py(80): def poly2lag(pol):
laguerre.py(126): def lag2poly(c):
laguerre.py(186): lagdomain = np.array([0, 1])
laguerre.py(189): lagzero = np.array([0])
laguerre.py(192): lagone = np.array([1])
laguerre.py(195): lagx = np.array([1, -1])
laguerre.py(198): def lagline(off, scl):
laguerre.py(234): def lagfromroots(roots):
laguerre.py(301): def lagadd(c1, c2):
laguerre.py(350): def lagsub(c1, c2):
laguerre.py(399): def lagmulx(c):
laguerre.py(449): def lagmul(c1, c2):
laguerre.py(515): def lagdiv(c1, c2):
laguerre.py(580): def lagpow(c, pow, maxpower=16):
laguerre.py(634): def lagder(c, m=1, scl=1, axis=0):
laguerre.py(726): def lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
laguerre.py(853): def lagval(x, c, tensor=True):
laguerre.py(948): def lagval2d(x, y, c):
laguerre.py(1004): def laggrid2d(x, y, c):
laguerre.py(1059): def lagval3d(x, y, z, c):
laguerre.py(1118): def laggrid3d(x, y, z, c):
laguerre.py(1177): def lagvander(x, deg):
laguerre.py(1239): def lagvander2d(x, y, deg):
laguerre.py(1302): def lagvander3d(x, y, z, deg):
laguerre.py(1367): def lagfit(x, y, deg, rcond=None, full=False, w=None):
laguerre.py(1544): def lagcompanion(c):
laguerre.py(1588): def lagroots(c):
laguerre.py(1647): def laggauss(deg):
laguerre.py(1711): def lagweight(x):
laguerre.py(1741): class Laguerre(ABCPolyBase):
 --- modulename: laguerre, funcname: Laguerre
laguerre.py(1741): class Laguerre(ABCPolyBase):
laguerre.py(1762):     """
laguerre.py(1764):     _add = staticmethod(lagadd)
laguerre.py(1765):     _sub = staticmethod(lagsub)
laguerre.py(1766):     _mul = staticmethod(lagmul)
laguerre.py(1767):     _div = staticmethod(lagdiv)
laguerre.py(1768):     _pow = staticmethod(lagpow)
laguerre.py(1769):     _val = staticmethod(lagval)
laguerre.py(1770):     _int = staticmethod(lagint)
laguerre.py(1771):     _der = staticmethod(lagder)
laguerre.py(1772):     _fit = staticmethod(lagfit)
laguerre.py(1773):     _line = staticmethod(lagline)
laguerre.py(1774):     _roots = staticmethod(lagroots)
laguerre.py(1775):     _fromroots = staticmethod(lagfromroots)
laguerre.py(1778):     nickname = 'lag'
laguerre.py(1779):     domain = np.array(lagdomain)
laguerre.py(1780):     window = np.array(lagdomain)
 --- modulename: abc, funcname: __new__
abc.py(87):         cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
 --- modulename: abc, funcname: <genexpr>
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(90):                      for name, value in namespace.items()
abc.py(91):                      if getattr(value, "__isabstractmethod__", False))
abc.py(89):         abstracts = set(name
abc.py(92):         for base in bases:
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(94):                 value = getattr(cls, name, None)
abc.py(95):                 if getattr(value, "__isabstractmethod__", False):
abc.py(93):             for name in getattr(base, "__abstractmethods__", set()):
abc.py(92):         for base in bases:
abc.py(97):         cls.__abstractmethods__ = frozenset(abstracts)
abc.py(99):         cls._abc_registry = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(100):         cls._abc_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(101):         cls._abc_negative_cache = WeakSet()
 --- modulename: _weakrefset, funcname: __init__
_weakrefset.py(37):         self.data = set()
_weakrefset.py(38):         def _remove(item, selfref=ref(self)):
_weakrefset.py(45):         self._remove = _remove
_weakrefset.py(47):         self._pending_removals = []
_weakrefset.py(48):         self._iterating = set()
_weakrefset.py(49):         if data is not None:
abc.py(102):         cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter
abc.py(103):         return cls
__init__.py(25): from numpy.testing import Tester
__init__.py(26): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(27): bench = Tester().bench
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(199):     from . import random
 --- modulename: __init__, funcname: <module>
__init__.py(88): """
__init__.py(89): from __future__ import division, absolute_import, print_function
__init__.py(91): import warnings
__init__.py(94): from .info import __doc__, __all__
 --- modulename: info, funcname: <module>
info.py(86): """
info.py(87): from __future__ import division, absolute_import, print_function
info.py(89): depends = ['core']
info.py(92):     'beta',
info.py(93):     'binomial',
info.py(94):     'bytes',
info.py(95):     'chisquare',
info.py(96):     'choice',
info.py(97):     'dirichlet',
info.py(98):     'exponential',
info.py(99):     'f',
info.py(100):     'gamma',
info.py(101):     'geometric',
info.py(102):     'get_state',
info.py(103):     'gumbel',
info.py(104):     'hypergeometric',
info.py(105):     'laplace',
info.py(106):     'logistic',
info.py(107):     'lognormal',
info.py(108):     'logseries',
info.py(109):     'multinomial',
info.py(110):     'multivariate_normal',
info.py(111):     'negative_binomial',
info.py(112):     'noncentral_chisquare',
info.py(113):     'noncentral_f',
info.py(114):     'normal',
info.py(115):     'pareto',
info.py(116):     'permutation',
info.py(117):     'poisson',
info.py(118):     'power',
info.py(119):     'rand',
info.py(120):     'randint',
info.py(121):     'randn',
info.py(122):     'random_integers',
info.py(123):     'random_sample',
info.py(124):     'rayleigh',
info.py(125):     'seed',
info.py(126):     'set_state',
info.py(127):     'shuffle',
info.py(128):     'standard_cauchy',
info.py(129):     'standard_exponential',
info.py(130):     'standard_gamma',
info.py(131):     'standard_normal',
info.py(132):     'standard_t',
info.py(133):     'triangular',
info.py(134):     'uniform',
info.py(135):     'vonmises',
info.py(136):     'wald',
info.py(137):     'weibull',
info.py(138):     'zipf'
__init__.py(97): with warnings.catch_warnings():
 --- modulename: warnings, funcname: __init__
warnings.py(348):         self._record = record
warnings.py(349):         self._module = sys.modules['warnings'] if module is None else module
warnings.py(350):         self._entered = False
 --- modulename: warnings, funcname: __enter__
warnings.py(362):         if self._entered:
warnings.py(364):         self._entered = True
warnings.py(365):         self._filters = self._module.filters
warnings.py(366):         self._module.filters = self._filters[:]
warnings.py(367):         self._showwarning = self._module.showwarning
warnings.py(368):         if self._record:
warnings.py(375):             return None
__init__.py(98):     warnings.filterwarnings("ignore", message="numpy.ndarray size changed")
 --- modulename: warnings, funcname: filterwarnings
warnings.py(79):     import re
warnings.py(80):     assert action in ("error", "ignore", "always", "default", "module",
warnings.py(81):                       "once"), "invalid action: %r" % (action,)
warnings.py(82):     assert isinstance(message, basestring), "message must be a string"
warnings.py(83):     assert isinstance(category, (type, types.ClassType)), \
warnings.py(85):     assert issubclass(category, Warning), "category must be a Warning subclass"
warnings.py(86):     assert isinstance(module, basestring), "module must be a string"
warnings.py(87):     assert isinstance(lineno, int) and lineno >= 0, \
warnings.py(89):     item = (action, re.compile(message, re.I), category,
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
warnings.py(90):             re.compile(module), lineno)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(439):         return # not worth it
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
warnings.py(91):     if append:
warnings.py(94):         filters.insert(0, item)
__init__.py(99):     from .mtrand import *
 --- modulename: getlimits, funcname: __init__
getlimits.py(246):         try:
getlimits.py(247):             self.dtype = numeric.dtype(int_type)
getlimits.py(250):         self.kind = self.dtype.kind
getlimits.py(251):         self.bits = self.dtype.itemsize * 8
getlimits.py(252):         self.key = "%s%d" % (self.kind, self.bits)
getlimits.py(253):         if self.kind not in 'iu':
 --- modulename: getlimits, funcname: max
getlimits.py(272):         try:
getlimits.py(273):             val = iinfo._max_vals[self.key]
getlimits.py(274):         except KeyError:
getlimits.py(275):             if self.kind == 'u':
getlimits.py(278):                 val = int((1 << (self.bits-1)) - 1)
getlimits.py(279):             iinfo._max_vals[self.key] = val
getlimits.py(280):         return val
 --- modulename: getlimits, funcname: __init__
getlimits.py(246):         try:
getlimits.py(247):             self.dtype = numeric.dtype(int_type)
getlimits.py(250):         self.kind = self.dtype.kind
getlimits.py(251):         self.bits = self.dtype.itemsize * 8
getlimits.py(252):         self.key = "%s%d" % (self.kind, self.bits)
getlimits.py(253):         if self.kind not in 'iu':
 --- modulename: getlimits, funcname: max
getlimits.py(272):         try:
getlimits.py(273):             val = iinfo._max_vals[self.key]
getlimits.py(280):         return val
 --- modulename: warnings, funcname: __exit__
warnings.py(378):         if not self._entered:
warnings.py(380):         self._module.filters = self._filters
warnings.py(381):         self._module.showwarning = self._showwarning
__init__.py(102): ranf = random = sample = random_sample
__init__.py(103): __all__.extend(['ranf', 'random', 'sample'])
__init__.py(105): def __RandomState_ctor():
__init__.py(120): from numpy.testing import Tester
__init__.py(121): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(122): bench = Tester().bench
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(200):     from . import ctypeslib
 --- modulename: ctypeslib, funcname: <module>
ctypeslib.py(51): """
ctypeslib.py(52): from __future__ import division, absolute_import, print_function
ctypeslib.py(54): __all__ = ['load_library', 'ndpointer', 'test', 'ctypes_load_library',
ctypeslib.py(55):            'c_intp', 'as_ctypes', 'as_array']
ctypeslib.py(57): import sys, os
ctypeslib.py(58): from numpy import integer, ndarray, dtype as _dtype, deprecate, array
ctypeslib.py(59): from numpy.core.multiarray import _flagdict, flagsobj
ctypeslib.py(61): try:
ctypeslib.py(62):     import ctypes
ctypeslib.py(66): if ctypes is None:
ctypeslib.py(85):     import numpy.core._internal as nic
ctypeslib.py(86):     c_intp = nic._getintp_ctype()
 --- modulename: _internal, funcname: _getintp_ctype
_internal.py(197):     val = _getintp_ctype.cache
_internal.py(198):     if val is not None:
_internal.py(200):     char = dtype('p').char
_internal.py(201):     if (char == 'i'):
_internal.py(203):     elif char == 'l':
_internal.py(204):         val = ctypes.c_long
_internal.py(209):     _getintp_ctype.cache = val
_internal.py(210):     return val
ctypeslib.py(87):     del nic
ctypeslib.py(88):     _ndptr_base = ctypes.c_void_p
ctypeslib.py(91):     def load_library(libname, loader_path):
ctypeslib.py(130):     ctypes_load_library = deprecate(load_library, 'ctypes_load_library',
ctypeslib.py(131):                                     'load_library')
 --- modulename: utils, funcname: deprecate
utils.py(163):     if args:
utils.py(164):         fn = args[0]
utils.py(165):         args = args[1:]
utils.py(169):         if 'newname' in kwargs:
utils.py(171):         if 'oldname' in kwargs:
utils.py(174):         return _Deprecate(*args, **kwargs)(fn)
 --- modulename: utils, funcname: __init__
utils.py(69):         self.old_name = old_name
utils.py(70):         self.new_name = new_name
utils.py(71):         self.message = message
 --- modulename: utils, funcname: __call__
utils.py(78):         old_name = self.old_name
utils.py(79):         new_name = self.new_name
utils.py(80):         message = self.message
utils.py(82):         import warnings
utils.py(83):         if old_name is None:
utils.py(88):         if new_name is None:
utils.py(91):             depdoc = "`%s` is deprecated, use `%s` instead!" % \
utils.py(92):                      (old_name, new_name)
utils.py(94):         if message is not None:
utils.py(97):         def newfunc(*args,**kwds):
utils.py(102):         newfunc = _set_function_name(newfunc, old_name)
 --- modulename: utils, funcname: _set_function_name
utils.py(52):     func.__name__ = name
utils.py(53):     return func
utils.py(103):         doc = func.__doc__
utils.py(104):         if doc is None:
utils.py(105):             doc = depdoc
utils.py(108):         newfunc.__doc__ = doc
utils.py(109):         try:
utils.py(110):             d = func.__dict__
utils.py(114):             newfunc.__dict__.update(d)
utils.py(115):         return newfunc
ctypeslib.py(133): def _num_fromflags(flaglist):
ctypeslib.py(139): _flagnames = ['C_CONTIGUOUS', 'F_CONTIGUOUS', 'ALIGNED', 'WRITEABLE',
ctypeslib.py(140):               'OWNDATA', 'UPDATEIFCOPY']
ctypeslib.py(141): def _flags_fromnum(num):
ctypeslib.py(150): class _ndptr(_ndptr_base):
 --- modulename: ctypeslib, funcname: _ndptr
ctypeslib.py(150): class _ndptr(_ndptr_base):
ctypeslib.py(152):     def _check_retval_(self):
ctypeslib.py(158):     @property
ctypeslib.py(169):     @classmethod
ctypeslib.py(191): _pointer_type_cache = {}
ctypeslib.py(192): def ndpointer(dtype=None, ndim=None, shape=None, flags=None):
ctypeslib.py(294): if ctypes is not None:
ctypeslib.py(295):     ct = ctypes
ctypeslib.py(301):     _typecodes = {}
ctypeslib.py(303):     def prep_simple(simple_type, dtype):
ctypeslib.py(327):         ((ct.c_byte, ct.c_short, ct.c_int, ct.c_long, ct.c_longlong), "i"),
ctypeslib.py(328):         ((ct.c_ubyte, ct.c_ushort, ct.c_uint, ct.c_ulong, ct.c_ulonglong), "u"),
ctypeslib.py(329):         ((ct.c_float, ct.c_double), "f"),
ctypeslib.py(333):     for types, code in simple_types:
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(309):         else: return
ctypeslib.py(334):         for tp in types:
ctypeslib.py(333):     for types, code in simple_types:
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(309):         else: return
ctypeslib.py(334):         for tp in types:
ctypeslib.py(333):     for types, code in simple_types:
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(335):             prep_simple(tp, "%c%d" % (code, ct.sizeof(tp)))
 --- modulename: ctypeslib, funcname: prep_simple
ctypeslib.py(307):         try: simple_type.__array_interface__
ctypeslib.py(308):         except AttributeError: pass
ctypeslib.py(311):         typestr = _dtype(dtype).str
ctypeslib.py(312):         _typecodes[typestr] = simple_type
ctypeslib.py(314):         def __array_interface__(self):
ctypeslib.py(324):         simple_type.__array_interface__ = property(__array_interface__)
ctypeslib.py(334):         for tp in types:
ctypeslib.py(333):     for types, code in simple_types:
ctypeslib.py(340):     _ARRAY_TYPE = type(ct.c_int * 1)
ctypeslib.py(342):     def prep_array(array_type):
ctypeslib.py(372):     def prep_pointer(pointer_obj, shape):
ctypeslib.py(394):     def as_array(obj, shape=None):
ctypeslib.py(410):     def as_ctypes(obj):
__init__.py(201):     from . import ma
 --- modulename: __init__, funcname: <module>
__init__.py(41): """
__init__.py(42): from __future__ import division, absolute_import, print_function
__init__.py(44): from . import core
 --- modulename: core, funcname: <module>
core.py(21): """
core.py(23): from __future__ import division, absolute_import, print_function
core.py(25): import sys
core.py(26): import warnings
core.py(27): from functools import reduce
core.py(29): import numpy as np
core.py(30): import numpy.core.umath as umath
core.py(31): import numpy.core.numerictypes as ntypes
core.py(32): from numpy import ndarray, amax, amin, iscomplexobj, bool_, _NoValue
core.py(33): from numpy import array as narray
core.py(34): from numpy.lib.function_base import angle
core.py(35): from numpy.compat import (
core.py(38): from numpy import expand_dims as n_expand_dims
core.py(41): if sys.version_info[0] >= 3:
core.py(44):     import cPickle as pickle
core.py(47):     'MAError', 'MaskError', 'MaskType', 'MaskedArray', 'abs', 'absolute',
core.py(48):     'add', 'all', 'allclose', 'allequal', 'alltrue', 'amax', 'amin',
core.py(49):     'angle', 'anom', 'anomalies', 'any', 'append', 'arange', 'arccos',
core.py(50):     'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh',
core.py(51):     'argmax', 'argmin', 'argsort', 'around', 'array', 'asanyarray',
core.py(52):     'asarray', 'bitwise_and', 'bitwise_or', 'bitwise_xor', 'bool_', 'ceil',
core.py(53):     'choose', 'clip', 'common_fill_value', 'compress', 'compressed',
core.py(54):     'concatenate', 'conjugate', 'copy', 'cos', 'cosh', 'count', 'cumprod',
core.py(55):     'cumsum', 'default_fill_value', 'diag', 'diagonal', 'diff', 'divide',
core.py(56):     'dump', 'dumps', 'empty', 'empty_like', 'equal', 'exp', 'expand_dims',
core.py(57):     'fabs', 'filled', 'fix_invalid', 'flatten_mask',
core.py(58):     'flatten_structured_array', 'floor', 'floor_divide', 'fmod',
core.py(59):     'frombuffer', 'fromflex', 'fromfunction', 'getdata', 'getmask',
core.py(60):     'getmaskarray', 'greater', 'greater_equal', 'harden_mask', 'hypot',
core.py(61):     'identity', 'ids', 'indices', 'inner', 'innerproduct', 'isMA',
core.py(62):     'isMaskedArray', 'is_mask', 'is_masked', 'isarray', 'left_shift',
core.py(63):     'less', 'less_equal', 'load', 'loads', 'log', 'log10', 'log2',
core.py(64):     'logical_and', 'logical_not', 'logical_or', 'logical_xor', 'make_mask',
core.py(65):     'make_mask_descr', 'make_mask_none', 'mask_or', 'masked',
core.py(66):     'masked_array', 'masked_equal', 'masked_greater',
core.py(67):     'masked_greater_equal', 'masked_inside', 'masked_invalid',
core.py(68):     'masked_less', 'masked_less_equal', 'masked_not_equal',
core.py(69):     'masked_object', 'masked_outside', 'masked_print_option',
core.py(70):     'masked_singleton', 'masked_values', 'masked_where', 'max', 'maximum',
core.py(71):     'maximum_fill_value', 'mean', 'min', 'minimum', 'minimum_fill_value',
core.py(72):     'mod', 'multiply', 'mvoid', 'ndim', 'negative', 'nomask', 'nonzero',
core.py(73):     'not_equal', 'ones', 'outer', 'outerproduct', 'power', 'prod',
core.py(74):     'product', 'ptp', 'put', 'putmask', 'rank', 'ravel', 'remainder',
core.py(75):     'repeat', 'reshape', 'resize', 'right_shift', 'round', 'round_',
core.py(76):     'set_fill_value', 'shape', 'sin', 'sinh', 'size', 'soften_mask',
core.py(77):     'sometrue', 'sort', 'sqrt', 'squeeze', 'std', 'subtract', 'sum',
core.py(78):     'swapaxes', 'take', 'tan', 'tanh', 'trace', 'transpose', 'true_divide',
core.py(79):     'var', 'where', 'zeros',
core.py(82): MaskType = np.bool_
core.py(83): nomask = MaskType(0)
core.py(86): def doc_note(initialdoc, note):
core.py(105): def get_object_signature(obj):
core.py(122): class MAError(Exception):
 --- modulename: core, funcname: MAError
core.py(122): class MAError(Exception):
core.py(126):     """
core.py(127):     pass
core.py(130): class MaskError(MAError):
 --- modulename: core, funcname: MaskError
core.py(130): class MaskError(MAError):
core.py(134):     """
core.py(135):     pass
core.py(144): default_filler = {'b': True,
core.py(145):                   'c': 1.e20 + 0.0j,
core.py(146):                   'f': 1.e20,
core.py(147):                   'i': 999999,
core.py(148):                   'O': '?',
core.py(149):                   'S': 'N/A',
core.py(150):                   'u': 999999,
core.py(151):                   'V': '???',
core.py(152):                   'U': 'N/A'
core.py(156): for v in ["Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", "ps",
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(158):     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
core.py(159):     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
core.py(157):           "fs", "as"]:
core.py(161): max_filler = ntypes._minvals
core.py(162): max_filler.update([(k, -np.inf) for k in [np.float32, np.float64]])
core.py(162): max_filler.update([(k, -np.inf) for k in [np.float32, np.float64]])
core.py(162): max_filler.update([(k, -np.inf) for k in [np.float32, np.float64]])
core.py(163): min_filler = ntypes._maxvals
core.py(164): min_filler.update([(k, +np.inf) for k in [np.float32, np.float64]])
core.py(164): min_filler.update([(k, +np.inf) for k in [np.float32, np.float64]])
core.py(164): min_filler.update([(k, +np.inf) for k in [np.float32, np.float64]])
core.py(165): if 'float128' in ntypes.typeDict:
core.py(166):     max_filler.update([(np.float128, -np.inf)])
core.py(167):     min_filler.update([(np.float128, +np.inf)])
core.py(170): def default_fill_value(obj):
core.py(234): def _recursive_extremum_fill_value(ndtype, extremum):
core.py(245): def minimum_fill_value(obj):
core.py(308): def maximum_fill_value(obj):
core.py(371): def _recursive_set_default_fill_value(dtypedescr):
core.py(383): def _recursive_set_fill_value(fillvalue, dtypedescr):
core.py(395): def _check_fill_value(fill_value, ndtype):
core.py(446): def set_fill_value(a, fill_value):
core.py(511): def get_fill_value(a):
core.py(524): def common_fill_value(a, b):
core.py(556): def filled(a, fill_value=None):
core.py(602): def get_masked_subclass(*arrays):
core.py(629): def getdata(a, subok=True):
core.py(681): get_data = getdata
core.py(684): def fix_invalid(a, mask=nomask, copy=True, fill_value=None):
core.py(749): ufunc_domain = {}
core.py(750): ufunc_fills = {}
core.py(753): class _DomainCheckInterval:
 --- modulename: core, funcname: _DomainCheckInterval
core.py(753): class _DomainCheckInterval:
core.py(760):     """
core.py(762):     def __init__(self, a, b):
core.py(769):     def __call__(self, x):
core.py(775): class _DomainTan:
 --- modulename: core, funcname: _DomainTan
core.py(775): class _DomainTan:
core.py(781):     """
core.py(783):     def __init__(self, eps):
core.py(787):     def __call__(self, x):
core.py(792): class _DomainSafeDivide:
 --- modulename: core, funcname: _DomainSafeDivide
core.py(792): class _DomainSafeDivide:
core.py(796):     """
core.py(798):     def __init__(self, tolerance=None):
core.py(801):     def __call__(self, a, b):
core.py(812): class _DomainGreater:
 --- modulename: core, funcname: _DomainGreater
core.py(812): class _DomainGreater:
core.py(816):     """
core.py(818):     def __init__(self, critical_value):
core.py(822):     def __call__(self, x):
core.py(827): class _DomainGreaterEqual:
 --- modulename: core, funcname: _DomainGreaterEqual
core.py(827): class _DomainGreaterEqual:
core.py(831):     """
core.py(833):     def __init__(self, critical_value):
core.py(837):     def __call__(self, x):
core.py(842): class _MaskedUnaryOperation:
 --- modulename: core, funcname: _MaskedUnaryOperation
core.py(842): class _MaskedUnaryOperation:
core.py(858):     """
core.py(860):     def __init__(self, mufunc, fill=0, domain=None):
core.py(869):     def __call__(self, a, *args, **kwargs):
core.py(914):     def __str__(self):
core.py(918): class _MaskedBinaryOperation:
 --- modulename: core, funcname: _MaskedBinaryOperation
core.py(918): class _MaskedBinaryOperation:
core.py(936):     """
core.py(938):     def __init__(self, mbfunc, fillx=0, filly=0):
core.py(953):     def __call__(self, a, b, *args, **kwargs):
core.py(1002):     def reduce(self, target, axis=0, dtype=None):
core.py(1033):     def outer(self, a, b):
core.py(1059):     def accumulate(self, target, axis=0):
core.py(1071):     def __str__(self):
core.py(1075): class _DomainedBinaryOperation:
 --- modulename: core, funcname: _DomainedBinaryOperation
core.py(1075): class _DomainedBinaryOperation:
core.py(1094):     """
core.py(1096):     def __init__(self, dbfunc, domain, fillx=0, filly=0):
core.py(1109):     def __call__(self, a, b, *args, **kwargs):
core.py(1148):     def __str__(self):
core.py(1153): exp = _MaskedUnaryOperation(umath.exp)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1154): conjugate = _MaskedUnaryOperation(umath.conjugate)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1155): sin = _MaskedUnaryOperation(umath.sin)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1156): cos = _MaskedUnaryOperation(umath.cos)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1157): tan = _MaskedUnaryOperation(umath.tan)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1158): arctan = _MaskedUnaryOperation(umath.arctan)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1159): arcsinh = _MaskedUnaryOperation(umath.arcsinh)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1160): sinh = _MaskedUnaryOperation(umath.sinh)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1161): cosh = _MaskedUnaryOperation(umath.cosh)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1162): tanh = _MaskedUnaryOperation(umath.tanh)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1163): abs = absolute = _MaskedUnaryOperation(umath.absolute)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1164): angle = _MaskedUnaryOperation(angle)  # from numpy.lib.function_base
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1165): fabs = _MaskedUnaryOperation(umath.fabs)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1166): negative = _MaskedUnaryOperation(umath.negative)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1167): floor = _MaskedUnaryOperation(umath.floor)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1168): ceil = _MaskedUnaryOperation(umath.ceil)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1169): around = _MaskedUnaryOperation(np.round_)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1170): logical_not = _MaskedUnaryOperation(umath.logical_not)
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1173): sqrt = _MaskedUnaryOperation(umath.sqrt, 0.0,
core.py(1174):                              _DomainGreaterEqual(0.0))
 --- modulename: core, funcname: __init__
core.py(835):         self.critical_value = critical_value
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1175): log = _MaskedUnaryOperation(umath.log, 1.0,
core.py(1176):                             _DomainGreater(0.0))
 --- modulename: core, funcname: __init__
core.py(820):         self.critical_value = critical_value
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1177): log2 = _MaskedUnaryOperation(umath.log2, 1.0,
core.py(1178):                              _DomainGreater(0.0))
 --- modulename: core, funcname: __init__
core.py(820):         self.critical_value = critical_value
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1179): log10 = _MaskedUnaryOperation(umath.log10, 1.0,
core.py(1180):                               _DomainGreater(0.0))
 --- modulename: core, funcname: __init__
core.py(820):         self.critical_value = critical_value
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1181): tan = _MaskedUnaryOperation(umath.tan, 0.0,
core.py(1182):                             _DomainTan(1e-35))
 --- modulename: core, funcname: __init__
core.py(785):         self.eps = eps
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1183): arcsin = _MaskedUnaryOperation(umath.arcsin, 0.0,
core.py(1184):                                _DomainCheckInterval(-1.0, 1.0))
 --- modulename: core, funcname: __init__
core.py(764):         if (a > b):
core.py(766):         self.a = a
core.py(767):         self.b = b
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1185): arccos = _MaskedUnaryOperation(umath.arccos, 0.0,
core.py(1186):                                _DomainCheckInterval(-1.0, 1.0))
 --- modulename: core, funcname: __init__
core.py(764):         if (a > b):
core.py(766):         self.a = a
core.py(767):         self.b = b
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1187): arccosh = _MaskedUnaryOperation(umath.arccosh, 1.0,
core.py(1188):                                 _DomainGreaterEqual(1.0))
 --- modulename: core, funcname: __init__
core.py(835):         self.critical_value = critical_value
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1189): arctanh = _MaskedUnaryOperation(umath.arctanh, 0.0,
core.py(1190):                                 _DomainCheckInterval(-1.0 + 1e-15, 1.0 - 1e-15))
 --- modulename: core, funcname: __init__
core.py(764):         if (a > b):
core.py(766):         self.a = a
core.py(767):         self.b = b
 --- modulename: core, funcname: __init__
core.py(861):         self.f = mufunc
core.py(862):         self.fill = fill
core.py(863):         self.domain = domain
core.py(864):         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
core.py(865):         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
core.py(866):         ufunc_domain[mufunc] = domain
core.py(867):         ufunc_fills[mufunc] = fill
core.py(1193): add = _MaskedBinaryOperation(umath.add)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1194): subtract = _MaskedBinaryOperation(umath.subtract)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1195): multiply = _MaskedBinaryOperation(umath.multiply, 1, 1)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1196): arctan2 = _MaskedBinaryOperation(umath.arctan2, 0.0, 1.0)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1197): equal = _MaskedBinaryOperation(umath.equal)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1198): equal.reduce = None
core.py(1199): not_equal = _MaskedBinaryOperation(umath.not_equal)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1200): not_equal.reduce = None
core.py(1201): less_equal = _MaskedBinaryOperation(umath.less_equal)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1202): less_equal.reduce = None
core.py(1203): greater_equal = _MaskedBinaryOperation(umath.greater_equal)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1204): greater_equal.reduce = None
core.py(1205): less = _MaskedBinaryOperation(umath.less)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1206): less.reduce = None
core.py(1207): greater = _MaskedBinaryOperation(umath.greater)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1208): greater.reduce = None
core.py(1209): logical_and = _MaskedBinaryOperation(umath.logical_and)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1210): alltrue = _MaskedBinaryOperation(umath.logical_and, 1, 1).reduce
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1211): logical_or = _MaskedBinaryOperation(umath.logical_or)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1212): sometrue = logical_or.reduce
core.py(1213): logical_xor = _MaskedBinaryOperation(umath.logical_xor)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1214): bitwise_and = _MaskedBinaryOperation(umath.bitwise_and)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1215): bitwise_or = _MaskedBinaryOperation(umath.bitwise_or)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1216): bitwise_xor = _MaskedBinaryOperation(umath.bitwise_xor)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1217): hypot = _MaskedBinaryOperation(umath.hypot)
 --- modulename: core, funcname: __init__
core.py(945):         self.f = mbfunc
core.py(946):         self.fillx = fillx
core.py(947):         self.filly = filly
core.py(948):         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
core.py(949):         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
core.py(950):         ufunc_domain[mbfunc] = None
core.py(951):         ufunc_fills[mbfunc] = (fillx, filly)
core.py(1220): divide = _DomainedBinaryOperation(umath.divide, _DomainSafeDivide(), 0, 1)
 --- modulename: core, funcname: __init__
core.py(799):         self.tolerance = tolerance
 --- modulename: core, funcname: __init__
core.py(1100):         self.f = dbfunc
core.py(1101):         self.domain = domain
core.py(1102):         self.fillx = fillx
core.py(1103):         self.filly = filly
core.py(1104):         self.__doc__ = getattr(dbfunc, "__doc__", str(dbfunc))
core.py(1105):         self.__name__ = getattr(dbfunc, "__name__", str(dbfunc))
core.py(1106):         ufunc_domain[dbfunc] = domain
core.py(1107):         ufunc_fills[dbfunc] = (fillx, filly)
core.py(1221): true_divide = _DomainedBinaryOperation(umath.true_divide,
core.py(1222):                                        _DomainSafeDivide(), 0, 1)
 --- modulename: core, funcname: __init__
core.py(799):         self.tolerance = tolerance
 --- modulename: core, funcname: __init__
core.py(1100):         self.f = dbfunc
core.py(1101):         self.domain = domain
core.py(1102):         self.fillx = fillx
core.py(1103):         self.filly = filly
core.py(1104):         self.__doc__ = getattr(dbfunc, "__doc__", str(dbfunc))
core.py(1105):         self.__name__ = getattr(dbfunc, "__name__", str(dbfunc))
core.py(1106):         ufunc_domain[dbfunc] = domain
core.py(1107):         ufunc_fills[dbfunc] = (fillx, filly)
core.py(1223): floor_divide = _DomainedBinaryOperation(umath.floor_divide,
core.py(1224):                                         _DomainSafeDivide(), 0, 1)
 --- modulename: core, funcname: __init__
core.py(799):         self.tolerance = tolerance
 --- modulename: core, funcname: __init__
core.py(1100):         self.f = dbfunc
core.py(1101):         self.domain = domain
core.py(1102):         self.fillx = fillx
core.py(1103):         self.filly = filly
core.py(1104):         self.__doc__ = getattr(dbfunc, "__doc__", str(dbfunc))
core.py(1105):         self.__name__ = getattr(dbfunc, "__name__", str(dbfunc))
core.py(1106):         ufunc_domain[dbfunc] = domain
core.py(1107):         ufunc_fills[dbfunc] = (fillx, filly)
core.py(1225): remainder = _DomainedBinaryOperation(umath.remainder,
core.py(1226):                                      _DomainSafeDivide(), 0, 1)
 --- modulename: core, funcname: __init__
core.py(799):         self.tolerance = tolerance
 --- modulename: core, funcname: __init__
core.py(1100):         self.f = dbfunc
core.py(1101):         self.domain = domain
core.py(1102):         self.fillx = fillx
core.py(1103):         self.filly = filly
core.py(1104):         self.__doc__ = getattr(dbfunc, "__doc__", str(dbfunc))
core.py(1105):         self.__name__ = getattr(dbfunc, "__name__", str(dbfunc))
core.py(1106):         ufunc_domain[dbfunc] = domain
core.py(1107):         ufunc_fills[dbfunc] = (fillx, filly)
core.py(1227): fmod = _DomainedBinaryOperation(umath.fmod, _DomainSafeDivide(), 0, 1)
 --- modulename: core, funcname: __init__
core.py(799):         self.tolerance = tolerance
 --- modulename: core, funcname: __init__
core.py(1100):         self.f = dbfunc
core.py(1101):         self.domain = domain
core.py(1102):         self.fillx = fillx
core.py(1103):         self.filly = filly
core.py(1104):         self.__doc__ = getattr(dbfunc, "__doc__", str(dbfunc))
core.py(1105):         self.__name__ = getattr(dbfunc, "__name__", str(dbfunc))
core.py(1106):         ufunc_domain[dbfunc] = domain
core.py(1107):         ufunc_fills[dbfunc] = (fillx, filly)
core.py(1228): mod = _DomainedBinaryOperation(umath.mod, _DomainSafeDivide(), 0, 1)
 --- modulename: core, funcname: __init__
core.py(799):         self.tolerance = tolerance
 --- modulename: core, funcname: __init__
core.py(1100):         self.f = dbfunc
core.py(1101):         self.domain = domain
core.py(1102):         self.fillx = fillx
core.py(1103):         self.filly = filly
core.py(1104):         self.__doc__ = getattr(dbfunc, "__doc__", str(dbfunc))
core.py(1105):         self.__name__ = getattr(dbfunc, "__name__", str(dbfunc))
core.py(1106):         ufunc_domain[dbfunc] = domain
core.py(1107):         ufunc_fills[dbfunc] = (fillx, filly)
core.py(1236): def _recursive_make_descr(datatype, newtype=bool_):
core.py(1257): def make_mask_descr(ndtype):
core.py(1293): def getmask(a):
core.py(1354): get_mask = getmask
core.py(1357): def getmaskarray(arr):
core.py(1412): def is_mask(m):
core.py(1480): def make_mask(m, copy=False, shrink=True, dtype=MaskType):
core.py(1575): def make_mask_none(newshape, dtype=None):
core.py(1625): def mask_or(m1, m2, copy=False, shrink=True):
core.py(1690): def flatten_mask(mask):
core.py(1747): def _check_mask_axis(mask, axis):
core.py(1758): def masked_where(condition, a, copy=True):
core.py(1875): def masked_greater(x, value, copy=True):
core.py(1901): def masked_greater_equal(x, value, copy=True):
core.py(1927): def masked_less(x, value, copy=True):
core.py(1953): def masked_less_equal(x, value, copy=True):
core.py(1979): def masked_not_equal(x, value, copy=True):
core.py(2005): def masked_equal(x, value, copy=True):
core.py(2035): def masked_inside(x, v1, v2, copy=True):
core.py(2075): def masked_outside(x, v1, v2, copy=True):
core.py(2115): def masked_object(x, value, copy=True, shrink=True):
core.py(2176): def masked_values(x, value, rtol=1e-5, atol=1e-8, copy=True, shrink=True):
core.py(2258): def masked_invalid(a, copy=True):
core.py(2305): class _MaskedPrintOption:
 --- modulename: core, funcname: _MaskedPrintOption
core.py(2305): class _MaskedPrintOption:
core.py(2309):     """
core.py(2311):     def __init__(self, display):
core.py(2319):     def display(self):
core.py(2326):     def set_display(self, s):
core.py(2333):     def enabled(self):
core.py(2340):     def enable(self, shrink=1):
core.py(2347):     def __str__(self):
core.py(2350):     __repr__ = __str__
core.py(2353): masked_print_option = _MaskedPrintOption('--')
 --- modulename: core, funcname: __init__
core.py(2316):         self._display = display
core.py(2317):         self._enabled = True
core.py(2356): def _recursive_printoption(result, mask, printopt):
core.py(2372): _print_templates = dict(long_std="""\
core.py(2378): """,
core.py(2383): """,
core.py(2391): """,
core.py(2397): """)
core.py(2404): def _recursive_filled(a, mask, fill_value):
core.py(2418): def flatten_structured_array(a):
core.py(2474): class _arraymethod(object):
 --- modulename: core, funcname: _arraymethod
core.py(2474): class _arraymethod(object):
core.py(2502):     """
core.py(2504):     def __init__(self, funcname, onmask=True):
core.py(2510):     def getdoc(self):
core.py(2517):     def __get__(self, obj, objtype=None):
core.py(2521):     def __call__(self, *args, **params):
core.py(2545): class MaskedIterator(object):
 --- modulename: core, funcname: MaskedIterator
core.py(2545): class MaskedIterator(object):
core.py(2591):     """
core.py(2593):     def __init__(self, ma):
core.py(2602):     def __iter__(self):
core.py(2605):     def __getitem__(self, indx):
core.py(2620):     def __setitem__(self, index, value):
core.py(2625):     def __next__(self):
core.py(2656):     next = __next__
core.py(2659): class MaskedArray(ndarray):
 --- modulename: core, funcname: MaskedArray
core.py(2659): class MaskedArray(ndarray):
core.py(2704):     """
core.py(2706):     __array_priority__ = 15
core.py(2707):     _defaultmask = nomask
core.py(2708):     _defaulthardmask = False
core.py(2709):     _baseclass = ndarray
core.py(2711):     def __new__(cls, data=None, mask=nomask, dtype=None, copy=False,
core.py(2712):                 subok=True, ndmin=0, fill_value=None,
core.py(2713):                 keep_mask=True, hard_mask=None, shrink=True,
core.py(2839):     def _update_from(self, obj):
core.py(2865):     def __array_finalize__(self, obj):
core.py(2936):     def __array_wrap__(self, obj, context=None):
core.py(2986):     def view(self, dtype=None, type=None, fill_value=None):
core.py(3067):     view.__doc__ = ndarray.view.__doc__
core.py(3069):     def astype(self, newtype):
core.py(3108):     def __getitem__(self, indx):
core.py(3157):     def __setitem__(self, indx, value):
core.py(3229):     def __setattr__(self, attr, value):
core.py(3240):     def __getslice__(self, i, j):
core.py(3250):     def __setslice__(self, i, j, value):
core.py(3260):     def __setmask__(self, mask, copy=False):
core.py(3329):     _set_mask = __setmask__
core.py(3331):     def _get_mask(self):
core.py(3339):     mask = property(fget=_get_mask, fset=__setmask__, doc="Mask")
core.py(3341):     def _get_recordmask(self):
core.py(3353):     def _set_recordmask(self):
core.py(3362):     recordmask = property(fget=_get_recordmask)
core.py(3364):     def harden_mask(self):
core.py(3379):     def soften_mask(self):
core.py(3394):     hardmask = property(fget=lambda self: self._hardmask,
core.py(3395):                         doc="Hardness of the mask")
core.py(3397):     def unshare_mask(self):
core.py(3415):     sharedmask = property(fget=lambda self: self._sharedmask,
core.py(3416):                           doc="Share status of the mask (read-only).")
core.py(3418):     def shrink_mask(self):
core.py(3446):     baseclass = property(fget=lambda self: self._baseclass,
core.py(3447):                          doc="Class of the underlying data (read-only).")
core.py(3449):     def _get_data(self):
core.py(3456):     _data = property(fget=_get_data)
core.py(3457):     data = property(fget=_get_data)
core.py(3459):     def _get_flat(self):
core.py(3463):     def _set_flat(self, value):
core.py(3468):     flat = property(fget=_get_flat, fset=_set_flat,
core.py(3469):                     doc="Flat version of the array.")
core.py(3471):     def get_fill_value(self):
core.py(3499):     def set_fill_value(self, value=None):
core.py(3538):     fill_value = property(fget=get_fill_value, fset=set_fill_value,
core.py(3539):                           doc="Filling value.")
core.py(3541):     def filled(self, fill_value=None):
core.py(3613):     def compressed(self):
core.py(3640):     def compress(self, condition, axis=None, out=None):
core.py(3708):     def __str__(self):
core.py(3746):     def __repr__(self):
core.py(3768):     def _delegate_binop(self, other):
core.py(3778):     def __eq__(self, other):
core.py(3814):     def __ne__(self, other):
core.py(3850):     def __add__(self, other):
core.py(3859):     def __radd__(self, other):
core.py(3868):     def __sub__(self, other):
core.py(3877):     def __rsub__(self, other):
core.py(3884):     def __mul__(self, other):
core.py(3890):     def __rmul__(self, other):
core.py(3899):     def __div__(self, other):
core.py(3908):     def __truediv__(self, other):
core.py(3917):     def __rtruediv__(self, other):
core.py(3924):     def __floordiv__(self, other):
core.py(3933):     def __rfloordiv__(self, other):
core.py(3940):     def __pow__(self, other):
core.py(3949):     def __rpow__(self, other):
core.py(3956):     def __iadd__(self, other):
core.py(3973):     def __isub__(self, other):
core.py(3989):     def __imul__(self, other):
core.py(4005):     def __idiv__(self, other):
core.py(4023):     def __ifloordiv__(self, other):
core.py(4041):     def __itruediv__(self, other):
core.py(4059):     def __ipow__(self, other):
core.py(4080):     def __float__(self):
core.py(4093):     def __int__(self):
core.py(4105):     def get_imag(self):
core.py(4138):     imag = property(fget=get_imag, doc="Imaginary part.")
core.py(4140):     def get_real(self):
core.py(4172):     real = property(fget=get_real, doc="Real part")
core.py(4174):     def count(self, axis=None):
core.py(4237):     flatten = _arraymethod('flatten')
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(4239):     def ravel(self, order='C'):
core.py(4284):     repeat = _arraymethod('repeat')
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(4287):     def reshape(self, *s, **kwargs):
core.py(4343):     def resize(self, newshape, refcheck=True, order=False):
core.py(4361):     def put(self, indices, values, mode='raise'):
core.py(4429):     def ids(self):
core.py(4455):     def iscontiguous(self):
core.py(4482):     def all(self, axis=None, out=None):
core.py(4528):     def any(self, axis=None, out=None):
core.py(4563):     def nonzero(self):
core.py(4664):     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):
core.py(4677):     trace.__doc__ = ndarray.trace.__doc__
core.py(4679):     def dot(self, b, out=None, strict=False):
core.py(4718):     def sum(self, axis=None, dtype=None, out=None):
core.py(4785):     def cumsum(self, axis=None, dtype=None, out=None):
core.py(4841):     def prod(self, axis=None, dtype=None, out=None):
core.py(4911):     product = prod
core.py(4913):     def cumprod(self, axis=None, dtype=None, out=None):
core.py(4962):     def mean(self, axis=None, dtype=None, out=None):
core.py(5029):     def anom(self, axis=None, dtype=None):
core.py(5069):     def var(self, axis=None, dtype=None, out=None, ddof=0):
core.py(5109):     var.__doc__ = np.var.__doc__
core.py(5111):     def std(self, axis=None, dtype=None, out=None, ddof=0):
core.py(5120):     std.__doc__ = np.std.__doc__
core.py(5122):     def round(self, decimals=0, out=None):
core.py(5142):     round.__doc__ = ndarray.round.__doc__
core.py(5144):     def argsort(self, axis=None, kind='quicksort', order=None, fill_value=None):
core.py(5197):     def argmin(self, axis=None, fill_value=None, out=None):
core.py(5238):     def argmax(self, axis=None, fill_value=None, out=None):
core.py(5275):     def sort(self, axis=-1, kind='quicksort', order=None,
core.py(5276):              endwith=True, fill_value=None):
core.py(5373):     def min(self, axis=None, out=None, fill_value=None):
core.py(5433):     def mini(self, axis=None):
core.py(5472):     def max(self, axis=None, out=None, fill_value=None):
core.py(5533):     def ptp(self, axis=None, out=None, fill_value=None):
core.py(5566):     def take(self, indices, axis=None, out=None, mode='raise'):
core.py(5591):     copy = _arraymethod('copy')
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(5592):     diagonal = _arraymethod('diagonal')
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(5593):     transpose = _arraymethod('transpose')
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(5594):     T = property(fget=lambda self: self.transpose())
core.py(5595):     swapaxes = _arraymethod('swapaxes')
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(5596):     clip = _arraymethod('clip', onmask=False)
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(5597):     copy = _arraymethod('copy')
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(5598):     squeeze = _arraymethod('squeeze')
 --- modulename: core, funcname: __init__
core.py(2505):         self.__name__ = funcname
core.py(2506):         self._onmask = onmask
core.py(2507):         self.obj = None
core.py(2508):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(2512):         methdoc = getattr(ndarray, self.__name__, None) or \
core.py(2514):         if methdoc is not None:
core.py(2515):             return methdoc.__doc__
core.py(5600):     def tolist(self, fill_value=None):
core.py(5651):     def tostring(self, fill_value=None, order='C'):
core.py(5659):     def tobytes(self, fill_value=None, order='C'):
core.py(5699):     def tofile(self, fid, sep="", format="%s"):
core.py(5714):     def toflex(self):
core.py(5766):     torecords = toflex
core.py(5769):     def __getstate__(self):
core.py(5787):     def __setstate__(self, state):
core.py(5804):     def __reduce__(self):
core.py(5812):     def __deepcopy__(self, memo=None):
core.py(5823): def _mareconstruct(subtype, baseclass, baseshape, basetype,):
core.py(5833): class mvoid(MaskedArray):
 --- modulename: core, funcname: mvoid
core.py(5833): class mvoid(MaskedArray):
core.py(5836):     """
core.py(5838):     def __new__(self, data, mask=nomask, dtype=None, fill_value=None,
core.py(5839):                 hardmask=False, copy=False, subok=True):
core.py(5858):     def _get_data(self):
core.py(5862):     _data = property(fget=_get_data)
core.py(5864):     def __getitem__(self, indx):
core.py(5874):     def __setitem__(self, indx, value):
core.py(5881):     def __str__(self):
core.py(5891):     __repr__ = __str__
core.py(5893):     def __iter__(self):
core.py(5906):     def __len__(self):
core.py(5909):     def filled(self, fill_value=None):
core.py(5931):     def tolist(self):
core.py(5960): def isMaskedArray(x):
core.py(6012): isarray = isMaskedArray
core.py(6013): isMA = isMaskedArray  # backward compatibility
core.py(6016): class MaskedConstant(MaskedArray):
 --- modulename: core, funcname: MaskedConstant
core.py(6016): class MaskedConstant(MaskedArray):
core.py(6019):     _data = data = np.array(0.)
core.py(6020):     _mask = mask = np.array(True)
core.py(6021):     _baseclass = ndarray
core.py(6023):     def __new__(self):
core.py(6026):     def __array_finalize__(self, obj):
core.py(6029):     def __array_wrap__(self, obj):
core.py(6032):     def __str__(self):
core.py(6035):     def __repr__(self):
core.py(6038):     def flatten(self):
core.py(6041):     def __reduce__(self):
core.py(6047): masked = masked_singleton = MaskedConstant()
 --- modulename: core, funcname: __new__
core.py(6024):         return self._data.view(self)
 --- modulename: core, funcname: __array_finalize__
core.py(6027):         return
core.py(6048): masked_array = MaskedArray
core.py(6051): def array(data, dtype=None, copy=False, order=False,
core.py(6052):           mask=nomask, fill_value=None,
core.py(6053):           keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0,
core.py(6066): array.__doc__ = masked_array.__doc__
core.py(6069): def is_masked(x):
core.py(6127): class _extrema_operation(object):
 --- modulename: core, funcname: _extrema_operation
core.py(6127): class _extrema_operation(object):
core.py(6135):     """
core.py(6137):     def __call__(self, a, b=None):
core.py(6143):     def reduce(self, target, axis=None):
core.py(6167):     def outer(self, a, b):
core.py(6184): class _minimum_operation(_extrema_operation):
 --- modulename: core, funcname: _minimum_operation
core.py(6184): class _minimum_operation(_extrema_operation):
core.py(6186):     "Object to calculate minima"
core.py(6188):     def __init__(self):
core.py(6198): class _maximum_operation(_extrema_operation):
 --- modulename: core, funcname: _maximum_operation
core.py(6198): class _maximum_operation(_extrema_operation):
core.py(6200):     "Object to calculate maxima"
core.py(6202):     def __init__(self):
core.py(6212): def min(obj, axis=None, out=None, fill_value=None):
core.py(6219): min.__doc__ = MaskedArray.min.__doc__
core.py(6222): def max(obj, axis=None, out=None, fill_value=None):
core.py(6229): max.__doc__ = MaskedArray.max.__doc__
core.py(6232): def ptp(obj, axis=None, out=None, fill_value=None):
core.py(6243): ptp.__doc__ = MaskedArray.ptp.__doc__
core.py(6251): class _frommethod:
 --- modulename: core, funcname: _frommethod
core.py(6251): class _frommethod:
core.py(6260):     """
core.py(6262):     def __init__(self, methodname, reversed=False):
core.py(6267):     def getdoc(self):
core.py(6277):     def __call__(self, a, *args, **params):
core.py(6297): all = _frommethod('all')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6298): anomalies = anom = _frommethod('anom')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6299): any = _frommethod('any')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6300): compress = _frommethod('compress', reversed=True)
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6301): cumprod = _frommethod('cumprod')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6302): cumsum = _frommethod('cumsum')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6303): copy = _frommethod('copy')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
 --- modulename: core, funcname: __get__
core.py(2518):         self.obj = obj
core.py(2519):         return self
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6304): diagonal = _frommethod('diagonal')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
 --- modulename: core, funcname: __get__
core.py(2518):         self.obj = obj
core.py(2519):         return self
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6305): harden_mask = _frommethod('harden_mask')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6306): ids = _frommethod('ids')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6307): maximum = _maximum_operation()
 --- modulename: core, funcname: __init__
core.py(6206):         self.ufunc = umath.maximum
core.py(6207):         self.afunc = amax
core.py(6208):         self.compare = greater
core.py(6209):         self.fill_value_func = maximum_fill_value
core.py(6308): mean = _frommethod('mean')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6309): minimum = _minimum_operation()
 --- modulename: core, funcname: __init__
core.py(6192):         self.ufunc = umath.minimum
core.py(6193):         self.afunc = amin
core.py(6194):         self.compare = less
core.py(6195):         self.fill_value_func = minimum_fill_value
core.py(6310): nonzero = _frommethod('nonzero')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6311): prod = _frommethod('prod')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6312): product = _frommethod('prod')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6313): ravel = _frommethod('ravel')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6314): repeat = _frommethod('repeat')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
 --- modulename: core, funcname: __get__
core.py(2518):         self.obj = obj
core.py(2519):         return self
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6315): shrink_mask = _frommethod('shrink_mask')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6316): soften_mask = _frommethod('soften_mask')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6317): std = _frommethod('std')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6318): sum = _frommethod('sum')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6319): swapaxes = _frommethod('swapaxes')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
 --- modulename: core, funcname: __get__
core.py(2518):         self.obj = obj
core.py(2519):         return self
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6321): trace = _frommethod('trace')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6322): var = _frommethod('var')
 --- modulename: core, funcname: __init__
core.py(6263):         self.__name__ = methodname
core.py(6264):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(6269):         meth = getattr(MaskedArray, self.__name__, None) or\
core.py(6271):         signature = self.__name__ + get_object_signature(meth)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(109):         func = func.__func__
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(6272):         if meth is not None:
core.py(6273):             doc = """    %s\n%s""" % (
core.py(6274):                 signature, getattr(meth, '__doc__', None))
core.py(6275):             return doc
core.py(6265):         self.reversed = reversed
core.py(6325): def take(a, indices, axis=None, out=None, mode='raise'):
core.py(6332): def power(a, b, third=None):
core.py(6384): def argsort(a, axis=None, kind='quicksort', order=None, fill_value=None):
core.py(6392): argsort.__doc__ = MaskedArray.argsort.__doc__
core.py(6395): def argmin(a, axis=None, fill_value=None):
core.py(6401): argmin.__doc__ = MaskedArray.argmin.__doc__
core.py(6404): def argmax(a, axis=None, fill_value=None):
core.py(6414): argmax.__doc__ = MaskedArray.argmax.__doc__
core.py(6417): def sort(a, axis=-1, kind='quicksort', order=None, endwith=True, fill_value=None):
core.py(6445): sort.__doc__ = MaskedArray.sort.__doc__
core.py(6448): def compressed(x):
core.py(6466): def concatenate(arrays, axis=0):
core.py(6527): def count(a, axis=None):
core.py(6531): count.__doc__ = MaskedArray.count.__doc__
core.py(6534): def diag(v, k=0):
core.py(6552): def expand_dims(x, axis):
core.py(6602): def left_shift(a, n):
core.py(6623): def right_shift(a, n):
core.py(6644): def put(a, indices, values, mode='raise'):
core.py(6663): def putmask(a, mask, values):  # , mode='raise'):
core.py(6702): def transpose(a, axes=None):
core.py(6742): def reshape(a, new_shape, order='C'):
core.py(6761): def resize(x, new_shape):
core.py(6825): def rank(obj): 
core.py(6839): rank.__doc__ = np.rank.__doc__
core.py(6842): def ndim(obj): 
core.py(6849): ndim.__doc__ = np.ndim.__doc__
core.py(6852): def shape(obj):
core.py(6855): shape.__doc__ = np.shape.__doc__
core.py(6858): def size(obj, axis=None):
core.py(6861): size.__doc__ = np.size.__doc__
core.py(6869): def where(condition, x=_NoValue, y=_NoValue):
core.py(6956): def choose(indices, choices, out=None, mode='raise'):
core.py(7031): def round_(a, decimals=0, out=None):
core.py(7062): round = round_
core.py(7067): def mask_rowcols(a, axis=None):
core.py(7161): def dot(a, b, strict=False, out=None):
core.py(7245): def inner(a, b):
core.py(7264): inner.__doc__ = doc_note(np.inner.__doc__,
core.py(7265):                          "Masked values are replaced by 0.")
 --- modulename: core, funcname: doc_note
core.py(91):     if initialdoc is None:
core.py(93):     if note is None:
core.py(101):     """
core.py(102):     return newdoc % (initialdoc, note)
core.py(7266): innerproduct = inner
core.py(7269): def outer(a, b):
core.py(7282): outer.__doc__ = doc_note(np.outer.__doc__,
core.py(7283):                          "Masked values are replaced by 0.")
 --- modulename: core, funcname: doc_note
core.py(91):     if initialdoc is None:
core.py(93):     if note is None:
core.py(101):     """
core.py(102):     return newdoc % (initialdoc, note)
core.py(7284): outerproduct = outer
core.py(7287): def allequal(a, b, fill_value=True):
core.py(7345): def allclose(a, b, masked_equal=True, rtol=1e-5, atol=1e-8):
core.py(7450): def asarray(a, dtype=None, order=None):
core.py(7498): def asanyarray(a, dtype=None):
core.py(7547): def dump(a, F):
core.py(7566): def dumps(a):
core.py(7582): def load(F):
core.py(7607): def loads(strg):
core.py(7626): def fromfile(file, dtype=float, count=-1, sep=''):
core.py(7631): def fromflex(fxarray):
core.py(7696): class _convert2ma:
 --- modulename: core, funcname: _convert2ma
core.py(7696): class _convert2ma:
core.py(7706):     """
core.py(7707):     __doc__ = None
core.py(7709):     def __init__(self, funcname, params=None):
core.py(7714):     def getdoc(self):
core.py(7725):     def __call__(self, a, *args, **params):
core.py(7740): arange = _convert2ma('arange', params=dict(fill_value=None, hardmask=False))
 --- modulename: core, funcname: __init__
core.py(7710):         self._func = getattr(np, funcname)
core.py(7711):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(7716):         doc = getattr(self._func, '__doc__', None)
core.py(7717):         sig = get_object_signature(self._func)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(7718):         if doc:
core.py(7720):             if sig:
core.py(7722):             doc = sig + doc
core.py(7723):         return doc
core.py(7712):         self._extras = params or {}
core.py(7741): clip = np.clip
core.py(7742): diff = np.diff
core.py(7743): empty = _convert2ma('empty', params=dict(fill_value=None, hardmask=False))
 --- modulename: core, funcname: __init__
core.py(7710):         self._func = getattr(np, funcname)
core.py(7711):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(7716):         doc = getattr(self._func, '__doc__', None)
core.py(7717):         sig = get_object_signature(self._func)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(7718):         if doc:
core.py(7720):             if sig:
core.py(7722):             doc = sig + doc
core.py(7723):         return doc
core.py(7712):         self._extras = params or {}
core.py(7744): empty_like = _convert2ma('empty_like')
 --- modulename: core, funcname: __init__
core.py(7710):         self._func = getattr(np, funcname)
core.py(7711):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(7716):         doc = getattr(self._func, '__doc__', None)
core.py(7717):         sig = get_object_signature(self._func)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(7718):         if doc:
core.py(7720):             if sig:
core.py(7722):             doc = sig + doc
core.py(7723):         return doc
core.py(7712):         self._extras = params or {}
core.py(7745): frombuffer = _convert2ma('frombuffer')
 --- modulename: core, funcname: __init__
core.py(7710):         self._func = getattr(np, funcname)
core.py(7711):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(7716):         doc = getattr(self._func, '__doc__', None)
core.py(7717):         sig = get_object_signature(self._func)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(7718):         if doc:
core.py(7720):             if sig:
core.py(7722):             doc = sig + doc
core.py(7723):         return doc
core.py(7712):         self._extras = params or {}
core.py(7746): fromfunction = _convert2ma('fromfunction')
 --- modulename: core, funcname: __init__
core.py(7710):         self._func = getattr(np, funcname)
core.py(7711):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(7716):         doc = getattr(self._func, '__doc__', None)
core.py(7717):         sig = get_object_signature(self._func)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(95):         varkw = co.co_varnames[nargs]
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(167):         specs.append(formatvarkw(varkw))
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(145):                   formatvarkw=lambda name: '**' + name,
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(7718):         if doc:
core.py(7720):             if sig:
core.py(7721):                 sig = "%s%s\n" % (self._func.__name__, sig)
core.py(7722):             doc = sig + doc
core.py(7723):         return doc
core.py(7712):         self._extras = params or {}
core.py(7747): identity = _convert2ma(
core.py(7748):     'identity', params=dict(fill_value=None, hardmask=False))
 --- modulename: core, funcname: __init__
core.py(7710):         self._func = getattr(np, funcname)
core.py(7711):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(7716):         doc = getattr(self._func, '__doc__', None)
core.py(7717):         sig = get_object_signature(self._func)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(7718):         if doc:
core.py(7720):             if sig:
core.py(7721):                 sig = "%s%s\n" % (self._func.__name__, sig)
core.py(7722):             doc = sig + doc
core.py(7723):         return doc
core.py(7712):         self._extras = params or {}
core.py(7749): indices = np.indices
core.py(7750): ones = _convert2ma('ones', params=dict(fill_value=None, hardmask=False))
 --- modulename: core, funcname: __init__
core.py(7710):         self._func = getattr(np, funcname)
core.py(7711):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(7716):         doc = getattr(self._func, '__doc__', None)
core.py(7717):         sig = get_object_signature(self._func)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
core.py(7718):         if doc:
core.py(7720):             if sig:
core.py(7721):                 sig = "%s%s\n" % (self._func.__name__, sig)
core.py(7722):             doc = sig + doc
core.py(7723):         return doc
core.py(7712):         self._extras = params or {}
core.py(7751): ones_like = np.ones_like
core.py(7752): squeeze = np.squeeze
core.py(7753): zeros = _convert2ma('zeros', params=dict(fill_value=None, hardmask=False))
 --- modulename: core, funcname: __init__
core.py(7710):         self._func = getattr(np, funcname)
core.py(7711):         self.__doc__ = self.getdoc()
 --- modulename: core, funcname: getdoc
core.py(7716):         doc = getattr(self._func, '__doc__', None)
core.py(7717):         sig = get_object_signature(self._func)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(111):         raise TypeError('arg is not a Python function')
core.py(112):     except TypeError:
core.py(113):         sig = ''
core.py(114):     return sig
core.py(7718):         if doc:
core.py(7720):             if sig:
core.py(7722):             doc = sig + doc
core.py(7723):         return doc
core.py(7712):         self._extras = params or {}
core.py(7754): zeros_like = np.zeros_like
core.py(7757): def append(a, b, axis=None):
__init__.py(45): from .core import *
__init__.py(47): from . import extras
 --- modulename: extras, funcname: <module>
extras.py(10): """
extras.py(11): from __future__ import division, absolute_import, print_function
extras.py(14):     'apply_along_axis', 'apply_over_axes', 'atleast_1d', 'atleast_2d',
extras.py(15):     'atleast_3d', 'average', 'clump_masked', 'clump_unmasked',
extras.py(16):     'column_stack', 'compress_cols', 'compress_nd', 'compress_rowcols',
extras.py(17):     'compress_rows', 'count_masked', 'corrcoef', 'cov', 'diagflat', 'dot',
extras.py(18):     'dstack', 'ediff1d', 'flatnotmasked_contiguous', 'flatnotmasked_edges',
extras.py(19):     'hsplit', 'hstack', 'in1d', 'intersect1d', 'mask_cols', 'mask_rowcols',
extras.py(20):     'mask_rows', 'masked_all', 'masked_all_like', 'median', 'mr_',
extras.py(21):     'notmasked_contiguous', 'notmasked_edges', 'polyfit', 'row_stack',
extras.py(22):     'setdiff1d', 'setxor1d', 'unique', 'union1d', 'vander', 'vstack',
extras.py(25): import itertools
extras.py(26): import warnings
extras.py(28): from . import core as ma
extras.py(29): from .core import (
extras.py(36): import numpy as np
extras.py(37): from numpy import ndarray, array as nxarray
extras.py(38): import numpy.core.umath as umath
extras.py(39): from numpy.lib.index_tricks import AxisConcatenator
extras.py(42): def issequence(seq):
extras.py(51): def count_masked(arr, axis=None):
extras.py(105): def masked_all(shape, dtype=float):
extras.py(156): def masked_all_like(arr):
extras.py(214): class _fromnxfunction:
 --- modulename: extras, funcname: _fromnxfunction
extras.py(214): class _fromnxfunction:
extras.py(229):     """
extras.py(231):     def __init__(self, funcname):
extras.py(235):     def getdoc(self):
extras.py(262):     def __call__(self, *args, **params):
extras.py(290): atleast_1d = _fromnxfunction('atleast_1d')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(91):         varargs = co.co_varnames[nargs]
_inspect.py(92):         nargs = nargs + 1
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(165):         specs.append(formatvarargs(varargs))
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(144):                   formatvarargs=lambda name: '*' + name,
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(291): atleast_2d = _fromnxfunction('atleast_2d')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(91):         varargs = co.co_varnames[nargs]
_inspect.py(92):         nargs = nargs + 1
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(165):         specs.append(formatvarargs(varargs))
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(144):                   formatvarargs=lambda name: '*' + name,
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(292): atleast_3d = _fromnxfunction('atleast_3d')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(91):         varargs = co.co_varnames[nargs]
_inspect.py(92):         nargs = nargs + 1
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(165):         specs.append(formatvarargs(varargs))
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(144):                   formatvarargs=lambda name: '*' + name,
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(297): vstack = row_stack = _fromnxfunction('vstack')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(298): hstack = _fromnxfunction('hstack')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(299): column_stack = _fromnxfunction('column_stack')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(300): dstack = _fromnxfunction('dstack')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(302): hsplit = _fromnxfunction('hsplit')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(304): diagflat = _fromnxfunction('diagflat')
 --- modulename: extras, funcname: __init__
extras.py(232):         self.__name__ = funcname
extras.py(233):         self.__doc__ = self.getdoc()
 --- modulename: extras, funcname: getdoc
extras.py(253):         npfunc = getattr(np, self.__name__, None)
extras.py(254):         doc = getattr(npfunc, '__doc__', None)
extras.py(255):         if doc:
extras.py(256):             sig = self.__name__ + ma.get_object_signature(npfunc)
 --- modulename: core, funcname: get_object_signature
core.py(110):     try:
core.py(111):         sig = formatargspec(*getargspec(obj))
 --- modulename: _inspect, funcname: getargspec
_inspect.py(108):     if ismethod(func):
 --- modulename: _inspect, funcname: ismethod
_inspect.py(26):     return isinstance(object, types.MethodType)
_inspect.py(110):     if not isfunction(func):
 --- modulename: _inspect, funcname: isfunction
_inspect.py(41):     return isinstance(object, types.FunctionType)
_inspect.py(112):     args, varargs, varkw = getargs(func.__code__)
 --- modulename: _inspect, funcname: getargs
_inspect.py(76):     if not iscode(co):
 --- modulename: _inspect, funcname: iscode
_inspect.py(61):     return isinstance(object, types.CodeType)
_inspect.py(79):     nargs = co.co_argcount
_inspect.py(80):     names = co.co_varnames
_inspect.py(81):     args = list(names[:nargs])
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(87):         if args[i][:1] in ['', '.']:
_inspect.py(86):     for i in range(nargs):
_inspect.py(89):     varargs = None
_inspect.py(90):     if co.co_flags & CO_VARARGS:
_inspect.py(93):     varkw = None
_inspect.py(94):     if co.co_flags & CO_VARKEYWORDS:
_inspect.py(96):     return args, varargs, varkw
_inspect.py(113):     return args, varargs, varkw, func.__defaults__
 --- modulename: _inspect, funcname: formatargspec
_inspect.py(156):     specs = []
_inspect.py(157):     if defaults:
_inspect.py(158):         firstdefault = len(args) - len(defaults)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(160):         spec = strseq(args[i], formatarg, join)
 --- modulename: _inspect, funcname: strseq
_inspect.py(137):     if type(object) in [list, tuple]:
_inspect.py(140):         return convert(object)
_inspect.py(161):         if defaults and i >= firstdefault:
_inspect.py(162):             spec = spec + formatvalue(defaults[i - firstdefault])
 --- modulename: _inspect, funcname: <lambda>
_inspect.py(146):                   formatvalue=lambda value: '=' + repr(value),
_inspect.py(163):         specs.append(spec)
_inspect.py(159):     for i in range(len(args)):
_inspect.py(164):     if varargs is not None:
_inspect.py(166):     if varkw is not None:
_inspect.py(168):     return '(' + ', '.join(specs) + ')'
core.py(114):     return sig
extras.py(257):             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
extras.py(259):             return '\n'.join((sig, doc, locdoc))
extras.py(310): def flatten_inplace(seq):
extras.py(320): def apply_along_axis(func1d, axis, arr, *args, **kwargs):
extras.py(405): apply_along_axis.__doc__ = np.apply_along_axis.__doc__
extras.py(408): def apply_over_axes(func, a, axes):
extras.py(432): if apply_over_axes.__doc__ is not None:
extras.py(433):     apply_over_axes.__doc__ = np.apply_over_axes.__doc__[
extras.py(434):         :np.apply_over_axes.__doc__.find('Notes')].rstrip() + \
extras.py(461):     """
extras.py(464): def average(a, axis=None, weights=None, returned=False):
extras.py(606): def median(a, axis=None, out=None, overwrite_input=False):
extras.py(711): def compress_nd(x, axis=None):
extras.py(760): def compress_rowcols(x, axis=None):
extras.py(816): def compress_rows(a):
extras.py(833): def compress_cols(a):
extras.py(850): def mask_rows(a, axis=None):
extras.py(895): def mask_cols(a, axis=None):
extras.py(945): def ediff1d(arr, to_end=None, to_begin=None):
extras.py(974): def unique(ar1, return_index=False, return_inverse=False):
extras.py(998): def intersect1d(ar1, ar2, assume_unique=False):
extras.py(1030): def setxor1d(ar1, ar2, assume_unique=False):
extras.py(1056): def in1d(ar1, ar2, assume_unique=False, invert=False):
extras.py(1095): def union1d(ar1, ar2):
extras.py(1109): def setdiff1d(ar1, ar2, assume_unique=False):
extras.py(1142): def _covhelper(x, y=None, rowvar=True, allow_masked=True):
extras.py(1185): def cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None):
extras.py(1258): def corrcoef(x, y=None, rowvar=True, bias=np._NoValue, allow_masked=True,
extras.py(1259):              ddof=np._NoValue):
extras.py(1347): class MAxisConcatenator(AxisConcatenator):
 --- modulename: extras, funcname: MAxisConcatenator
extras.py(1347): class MAxisConcatenator(AxisConcatenator):
extras.py(1357):     """
extras.py(1359):     def __init__(self, axis=0):
extras.py(1362):     def __getitem__(self, key):
extras.py(1413): class mr_class(MAxisConcatenator):
 --- modulename: extras, funcname: mr_class
extras.py(1413): class mr_class(MAxisConcatenator):
extras.py(1428):     """
extras.py(1429):     def __init__(self):
extras.py(1432): mr_ = mr_class()
 --- modulename: extras, funcname: __init__
extras.py(1430):         MAxisConcatenator.__init__(self, 0)
 --- modulename: extras, funcname: __init__
extras.py(1360):         AxisConcatenator.__init__(self, axis, matrix=False)
 --- modulename: index_tricks, funcname: __init__
index_tricks.py(243):         self._axis = axis
index_tricks.py(244):         self._matrix = matrix
index_tricks.py(245):         self.axis = axis
index_tricks.py(246):         self.matrix = matrix
index_tricks.py(247):         self.col = 0
index_tricks.py(248):         self.trans1d = trans1d
index_tricks.py(249):         self.ndmin = ndmin
extras.py(1438): def flatnotmasked_edges(a):
extras.py(1493): def notmasked_edges(a, axis=None):
extras.py(1544): def flatnotmasked_contiguous(a):
extras.py(1597): def notmasked_contiguous(a, axis=None):
extras.py(1657): def _ezclump(mask):
extras.py(1674): def clump_unmasked(a):
extras.py(1718): def clump_masked(a):
extras.py(1768): def vander(x, n=None):
extras.py(1779): vander.__doc__ = ma.doc_note(np.vander.__doc__, vander.__doc__)
 --- modulename: core, funcname: doc_note
core.py(91):     if initialdoc is None:
core.py(93):     if note is None:
core.py(101):     """
core.py(102):     return newdoc % (initialdoc, note)
extras.py(1782): def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):
extras.py(1816): polyfit.__doc__ = ma.doc_note(np.polyfit.__doc__, polyfit.__doc__)
 --- modulename: core, funcname: doc_note
core.py(91):     if initialdoc is None:
core.py(93):     if note is None:
core.py(101):     """
core.py(102):     return newdoc % (initialdoc, note)
__init__.py(48): from .extras import *
__init__.py(50): __all__ = ['core', 'extras']
__init__.py(51): __all__ += core.__all__
__init__.py(52): __all__ += extras.__all__
__init__.py(54): from numpy.testing import Tester
__init__.py(55): test = Tester().test
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(56): bench = Tester().bench
 --- modulename: nosetester, funcname: __init__
nosetester.py(180):         if raise_warnings is None and (
nosetester.py(181):                 not hasattr(np, '__version__') or '.dev0' in np.__version__):
nosetester.py(183):         elif raise_warnings is None:
nosetester.py(184):             raise_warnings = "release"
nosetester.py(186):         package_name = None
nosetester.py(187):         if package is None:
nosetester.py(188):             f = sys._getframe(1)
nosetester.py(189):             package_path = f.f_locals.get('__file__', None)
nosetester.py(190):             if package_path is None:
nosetester.py(192):             package_path = os.path.dirname(package_path)
 --- modulename: posixpath, funcname: dirname
posixpath.py(122):     i = p.rfind('/') + 1
posixpath.py(123):     head = p[:i]
posixpath.py(124):     if head and head != '/'*len(head):
posixpath.py(125):         head = head.rstrip('/')
posixpath.py(126):     return head
nosetester.py(193):             package_name = f.f_locals.get('__name__', None)
nosetester.py(200):         self.package_path = package_path
nosetester.py(204):         if package_name is None:
nosetester.py(206):         self.package_name = package_name
nosetester.py(209):         self.raise_warnings = raise_warnings
__init__.py(202):     from . import matrixlib as _mat
__init__.py(203):     from .matrixlib import *
__init__.py(204):     from .compat import long
__init__.py(208):     if sys.version_info[0] >= 3:
__init__.py(212):         from __builtin__ import bool, int, float, complex, object, unicode, str
__init__.py(214):     from .core import round, abs, max, min
__init__.py(216):     __all__.extend(['__version__', 'pkgload', 'PackageLoader',
__init__.py(217):                'show_config'])
__init__.py(218):     __all__.extend(core.__all__)
__init__.py(219):     __all__.extend(_mat.__all__)
__init__.py(220):     __all__.extend(lib.__all__)
__init__.py(221):     __all__.extend(['linalg', 'fft', 'random', 'ctypeslib', 'ma'])
__init__.py(224):     import warnings
__init__.py(225):     warnings.filterwarnings("ignore", message="numpy.dtype size changed")
 --- modulename: warnings, funcname: filterwarnings
warnings.py(79):     import re
warnings.py(80):     assert action in ("error", "ignore", "always", "default", "module",
warnings.py(81):                       "once"), "invalid action: %r" % (action,)
warnings.py(82):     assert isinstance(message, basestring), "message must be a string"
warnings.py(83):     assert isinstance(category, (type, types.ClassType)), \
warnings.py(85):     assert issubclass(category, Warning), "category must be a Warning subclass"
warnings.py(86):     assert isinstance(module, basestring), "module must be a string"
warnings.py(87):     assert isinstance(lineno, int) and lineno >= 0, \
warnings.py(89):     item = (action, re.compile(message, re.I), category,
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
warnings.py(90):             re.compile(module), lineno)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(238):             if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
re.py(239):                 return p
warnings.py(91):     if append:
warnings.py(94):         filters.insert(0, item)
__init__.py(226):     warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
 --- modulename: warnings, funcname: filterwarnings
warnings.py(79):     import re
warnings.py(80):     assert action in ("error", "ignore", "always", "default", "module",
warnings.py(81):                       "once"), "invalid action: %r" % (action,)
warnings.py(82):     assert isinstance(message, basestring), "message must be a string"
warnings.py(83):     assert isinstance(category, (type, types.ClassType)), \
warnings.py(85):     assert issubclass(category, Warning), "category must be a Warning subclass"
warnings.py(86):     assert isinstance(module, basestring), "module must be a string"
warnings.py(87):     assert isinstance(lineno, int) and lineno >= 0, \
warnings.py(89):     item = (action, re.compile(message, re.I), category,
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(431):         elif this == "[":
sre_parse.py(488):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(541):         elif this == ".":
sre_parse.py(542):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(197):         char = self.string[self.index]
sre_parse.py(198):         if char[0] == "\\":
sre_parse.py(204):         self.index = self.index + len(char)
sre_parse.py(205):         self.next = char
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(417):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(428):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(429):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(150):         self.data.append(code)
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(159):             if op is BRANCH:
sre_parse.py(168):             elif op is CALL:
sre_parse.py(172):             elif op is SUBPATTERN:
sre_parse.py(176):             elif op in REPEATCODES:
sre_parse.py(180):             elif op in UNITCODES:
sre_parse.py(181):                 lo = lo + 1
sre_parse.py(182):                 hi = hi + 1
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(441):     prefix = []
sre_compile.py(442):     prefixappend = prefix.append
sre_compile.py(443):     prefix_skip = 0
sre_compile.py(444):     charset = [] # not used
sre_compile.py(445):     charsetappend = charset.append
sre_compile.py(446):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(501):     emit = code.append
sre_compile.py(502):     emit(OPCODES[INFO])
sre_compile.py(503):     skip = len(code); emit(0)
sre_compile.py(505):     mask = 0
sre_compile.py(506):     if prefix:
sre_compile.py(510):     elif charset:
sre_compile.py(512):     emit(mask)
sre_compile.py(514):     if lo < MAXCODE:
sre_compile.py(515):         emit(lo)
sre_compile.py(519):     if hi < MAXCODE:
sre_compile.py(520):         emit(hi)
sre_compile.py(524):     if prefix:
sre_compile.py(535):     elif charset:
sre_compile.py(537):     code[skip] = len(code) - skip
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(98):         elif op is IN:
sre_compile.py(109):         elif op is ANY:
sre_compile.py(110):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(113):                 emit(OPCODES[ANY])
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(79):         if op in LITERAL_CODES:
sre_compile.py(80):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(81):                 lo = _sre.getlower(av, flags)
sre_compile.py(82):                 if fixes and lo in fixes:
sre_compile.py(93):                     emit(OPCODES[OP_IGNORE[op]])
sre_compile.py(94):                     emit(lo)
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
warnings.py(90):             re.compile(module), lineno)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(238):             if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
re.py(239):                 return p
warnings.py(91):     if append:
warnings.py(94):         filters.insert(0, item)
__init__.py(227):     warnings.filterwarnings("ignore", message="numpy.ndarray size changed")
 --- modulename: warnings, funcname: filterwarnings
warnings.py(79):     import re
warnings.py(80):     assert action in ("error", "ignore", "always", "default", "module",
warnings.py(81):                       "once"), "invalid action: %r" % (action,)
warnings.py(82):     assert isinstance(message, basestring), "message must be a string"
warnings.py(83):     assert isinstance(category, (type, types.ClassType)), \
warnings.py(85):     assert issubclass(category, Warning), "category must be a Warning subclass"
warnings.py(86):     assert isinstance(module, basestring), "module must be a string"
warnings.py(87):     assert isinstance(lineno, int) and lineno >= 0, \
warnings.py(89):     item = (action, re.compile(message, re.I), category,
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(238):             if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
re.py(239):                 return p
warnings.py(90):             re.compile(module), lineno)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(238):             if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
re.py(239):                 return p
warnings.py(91):     if append:
warnings.py(94):         filters.insert(0, item)
_numpysurfarray.py(49): import re
_numpysurfarray.py(51): def array2d (surface):
_numpysurfarray.py(96): def pixels2d (surface):
_numpysurfarray.py(125): def array3d (surface):
_numpysurfarray.py(178): def pixels3d (surface):
_numpysurfarray.py(232): def array_alpha (surface):
_numpysurfarray.py(269): def pixels_alpha (surface):
_numpysurfarray.py(305): def array_colorkey (surface):
_numpysurfarray.py(340): def make_surface (array):
_numpysurfarray.py(371): def blit_array (surface, array):
_numpysurfarray.py(439): def map_array (surface, array):
surfarray.py(70):     __hasnumpy = True
surfarray.py(71):     __arraytype = "numpy"
surfarray.py(75): try:
surfarray.py(76):     import pygame._numericsurfarray as numericsf
surfarray.py(80): except ImportError:
surfarray.py(81):     __hasnumeric = False
surfarray.py(83): if not __hasnumpy and not __hasnumeric:
surfarray.py(86): from _arraysurfarray import blit_array
surfarray.py(88): def array2d (surface):
surfarray.py(107): def pixels2d (surface):
surfarray.py(129): def array3d (surface):
surfarray.py(148): def pixels3d (surface):
surfarray.py(170): def array_alpha (surface):
surfarray.py(190): def pixels_alpha (surface):
surfarray.py(211): def array_colorkey (surface):
surfarray.py(232): def make_surface (array):
surfarray.py(265): def map_array (surface, array):
surfarray.py(280): def use_arraytype (arraytype):
surfarray.py(310): def get_arraytype ():
surfarray.py(321): def get_arraytypes ():
__init__.py(258): try: import pygame.sndarray
 --- modulename: sndarray, funcname: <module>
sndarray.py(57): """
sndarray.py(59): import pygame
sndarray.py(62): __arraytype = None
sndarray.py(65): try:
sndarray.py(66):     import pygame._numpysndarray as numpysnd
 --- modulename: _numpysndarray, funcname: <module>
_numpysndarray.py(34): """
_numpysndarray.py(36): import pygame
_numpysndarray.py(37): import pygame.mixer as mixer 
_numpysndarray.py(38): import numpy
_numpysndarray.py(40): def _array_samples(sound, raw):
_numpysndarray.py(68): def array (sound):
_numpysndarray.py(79): def samples (sound):
_numpysndarray.py(112): def make_sound (array):
sndarray.py(67):     __hasnumpy = True
sndarray.py(68):     __arraytype = "numpy"
sndarray.py(72): try:
sndarray.py(73):     import pygame._numericsndarray as numericsnd
sndarray.py(77): except ImportError:
sndarray.py(78):     __hasnumeric = False
sndarray.py(80): if not __hasnumpy and not __hasnumeric:
sndarray.py(83): def array (sound):
sndarray.py(98): def samples (sound):
sndarray.py(113): def make_sound (array):
sndarray.py(128): def use_arraytype (arraytype):
sndarray.py(158): def get_arraytype ():
sndarray.py(169): def get_arraytypes ():
__init__.py(261): try: import pygame.fastevent
__init__.py(267): try: import pygame.imageext; del pygame.imageext
__init__.py(270): def packager_imports():
__init__.py(284): try:
__init__.py(285):     import copy_reg
__init__.py(288): def __rect_constructor(x,y,w,h):
__init__.py(290): def __rect_reduce(r):
__init__.py(293): copy_reg.pickle(Rect, __rect_reduce, __rect_constructor)
 --- modulename: copy_reg, funcname: pickle
copy_reg.py(15):     if type(ob_type) is _ClassType:
copy_reg.py(18):     if not hasattr(pickle_function, '__call__'):
copy_reg.py(20):     dispatch_table[ob_type] = pickle_function
copy_reg.py(24):     if constructor_ob is not None:
copy_reg.py(25):         constructor(constructor_ob)
 --- modulename: copy_reg, funcname: constructor
copy_reg.py(28):     if not hasattr(object, '__call__'):
__init__.py(297): def __color_constructor(r,g,b,a):
__init__.py(299): def __color_reduce(c):
__init__.py(302): copy_reg.pickle(Color, __color_reduce, __color_constructor)
 --- modulename: copy_reg, funcname: pickle
copy_reg.py(15):     if type(ob_type) is _ClassType:
copy_reg.py(18):     if not hasattr(pickle_function, '__call__'):
copy_reg.py(20):     dispatch_table[ob_type] = pickle_function
copy_reg.py(24):     if constructor_ob is not None:
copy_reg.py(25):         constructor(constructor_ob)
 --- modulename: copy_reg, funcname: constructor
copy_reg.py(28):     if not hasattr(object, '__call__'):
__init__.py(308): del pygame, os, sys, rwobject, surflock, MissingModule, copy_reg, geterror
draw.py(6): def draw():
draw.py(13): def main():
draw.py(16): if __name__ == '__main__':
test_draw.py(6): import pygame
test_draw.py(7): import numpy as np
test_draw.py(9): def test_draw():
test_draw.py(22): def main():
test_draw.py(25): try:
test_draw.py(26):     if __name__ == '__main__':
test_draw.py(27):         main()
 --- modulename: test_draw, funcname: main
test_draw.py(23):     test_draw()
 --- modulename: test_draw, funcname: test_draw
test_draw.py(10):     screen = draw()
 --- modulename: draw, funcname: draw
draw.py(7):     size = (40,40)
draw.py(8):     screen = pygame.Surface(size)
draw.py(9):     screen.fill((255,255,255))
draw.py(10):     pygame.draw.aalines(screen, (0,0,0), False, [(10,10),(30,20)])
draw.py(11):     return screen
test_draw.py(11):     reference = pygame.image.load("image.png")
test_draw.py(13):     pygame.image.save(screen, "image_test.png")    
test_draw.py(15):     np.testing.assert_almost_equal(
test_draw.py(16):         pygame.surfarray.pixels3d(screen),
 --- modulename: surfarray, funcname: pixels3d
surfarray.py(164):     if __arraytype == "numeric":
surfarray.py(166):     elif __arraytype == "numpy":
surfarray.py(167):         return numpysf.pixels3d (surface)
 --- modulename: _numpysurfarray, funcname: pixels3d
_numpysurfarray.py(194):     bpp = surface.get_bytesize ()
_numpysurfarray.py(195):     if bpp < 3 or bpp > 4:
_numpysurfarray.py(197):     lilendian = pygame.get_sdl_byteorder () == pygame.LIL_ENDIAN
_numpysurfarray.py(199):     start = 0
_numpysurfarray.py(200):     step = 0
_numpysurfarray.py(203):     shifts = surface.get_shifts ()
_numpysurfarray.py(204):     if shifts[0] == 16 and shifts[1] == 8 and shifts[2] == 0:
_numpysurfarray.py(206):         if lilendian:
_numpysurfarray.py(207):             start = 2
_numpysurfarray.py(208):             step = -1
_numpysurfarray.py(223):     if bpp == 4 and not lilendian:
_numpysurfarray.py(226):     array = numpy.ndarray \
_numpysurfarray.py(227):             (shape=(surface.get_width (), surface.get_height (), 3),
_numpysurfarray.py(228):              dtype=numpy.uint8, buffer=surface.get_buffer (),
_numpysurfarray.py(229):              offset=start, strides=(bpp, surface.get_pitch (),step))
_numpysurfarray.py(230):     return array
test_draw.py(17):         pygame.surfarray.pixels3d(reference)
 --- modulename: surfarray, funcname: pixels3d
surfarray.py(164):     if __arraytype == "numeric":
surfarray.py(166):     elif __arraytype == "numpy":
surfarray.py(167):         return numpysf.pixels3d (surface)
 --- modulename: _numpysurfarray, funcname: pixels3d
_numpysurfarray.py(194):     bpp = surface.get_bytesize ()
_numpysurfarray.py(195):     if bpp < 3 or bpp > 4:
_numpysurfarray.py(197):     lilendian = pygame.get_sdl_byteorder () == pygame.LIL_ENDIAN
_numpysurfarray.py(199):     start = 0
_numpysurfarray.py(200):     step = 0
_numpysurfarray.py(203):     shifts = surface.get_shifts ()
_numpysurfarray.py(204):     if shifts[0] == 16 and shifts[1] == 8 and shifts[2] == 0:
_numpysurfarray.py(212):     elif shifts[2] == 16 and shifts[1] == 8 and shifts[0] == 0:
_numpysurfarray.py(214):         if lilendian:
_numpysurfarray.py(215):             start = 0
_numpysurfarray.py(216):             step = 1
_numpysurfarray.py(223):     if bpp == 4 and not lilendian:
_numpysurfarray.py(226):     array = numpy.ndarray \
_numpysurfarray.py(227):             (shape=(surface.get_width (), surface.get_height (), 3),
_numpysurfarray.py(228):              dtype=numpy.uint8, buffer=surface.get_buffer (),
_numpysurfarray.py(229):              offset=start, strides=(bpp, surface.get_pitch (),step))
_numpysurfarray.py(230):     return array
 --- modulename: utils, funcname: assert_almost_equal
utils.py(459):     __tracebackhide__ = True  # Hide traceback for py.test
utils.py(460):     from numpy.core import ndarray
utils.py(461):     from numpy.lib import iscomplexobj, real, imag
utils.py(466):     try:
utils.py(467):         usecomplex = iscomplexobj(actual) or iscomplexobj(desired)
 --- modulename: type_check, funcname: iscomplexobj
type_check.py(269):     return issubclass(asarray(x).dtype.type, _nx.complexfloating)
 --- modulename: numeric, funcname: asarray
numeric.py(474):     return array(a, dtype, copy=False, order=order)
 --- modulename: type_check, funcname: iscomplexobj
type_check.py(269):     return issubclass(asarray(x).dtype.type, _nx.complexfloating)
 --- modulename: numeric, funcname: asarray
numeric.py(474):     return array(a, dtype, copy=False, order=order)
utils.py(471):     def _build_err_msg():
utils.py(476):     if usecomplex:
utils.py(495):     if isinstance(actual, (ndarray, tuple, list)) \
utils.py(497):         return assert_array_almost_equal(actual, desired, decimal, err_msg)
 --- modulename: utils, funcname: assert_array_almost_equal
utils.py(859):     __tracebackhide__ = True  # Hide traceback for py.test
utils.py(860):     from numpy.core import around, number, float_, result_type, array
utils.py(861):     from numpy.core.numerictypes import issubdtype
utils.py(862):     from numpy.core.fromnumeric import any as npany
utils.py(864):     def compare(x, y):
utils.py(890):     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,
utils.py(891):              header=('Arrays are not almost equal to %d decimals' % decimal),
utils.py(892):              precision=decimal)
 --- modulename: utils, funcname: assert_array_compare
utils.py(615):     __tracebackhide__ = True  # Hide traceback for py.test
utils.py(616):     from numpy.core import array, isnan, isinf, any, all, inf
utils.py(617):     x = array(x, copy=False, subok=True)
utils.py(618):     y = array(y, copy=False, subok=True)
utils.py(620):     def safe_comparison(*args, **kwargs):
utils.py(643):     def isnumber(x):
utils.py(646):     def chk_same_position(x_id, y_id, hasval='nan'):
utils.py(658):     try:
utils.py(659):         cond = (x.shape == () or y.shape == ()) or x.shape == y.shape
utils.py(660):         if not cond:
utils.py(670):         if isnumber(x) and isnumber(y):
 --- modulename: utils, funcname: isnumber
utils.py(644):         return x.dtype.char in '?bhilqpBHILQPefdgFDG'
 --- modulename: utils, funcname: isnumber
utils.py(644):         return x.dtype.char in '?bhilqpBHILQPefdgFDG'
utils.py(671):             x_isnan, y_isnan = isnan(x), isnan(y)
utils.py(672):             x_isinf, y_isinf = isinf(x), isinf(y)
utils.py(675):             if any(x_isnan) or any(y_isnan):
 --- modulename: fromnumeric, funcname: any
fromnumeric.py(1956):     arr = asanyarray(a)
 --- modulename: numeric, funcname: asanyarray
numeric.py(525):     return array(a, dtype, copy=False, order=order, subok=True)
fromnumeric.py(1958):     try:
fromnumeric.py(1959):         return arr.any(axis=axis, out=out, keepdims=keepdims)
 --- modulename: _methods, funcname: _any
_methods.py(38):     return umr_any(a, axis, dtype, out, keepdims)
 --- modulename: fromnumeric, funcname: any
fromnumeric.py(1956):     arr = asanyarray(a)
 --- modulename: numeric, funcname: asanyarray
numeric.py(525):     return array(a, dtype, copy=False, order=order, subok=True)
fromnumeric.py(1958):     try:
fromnumeric.py(1959):         return arr.any(axis=axis, out=out, keepdims=keepdims)
 --- modulename: _methods, funcname: _any
_methods.py(38):     return umr_any(a, axis, dtype, out, keepdims)
utils.py(677):             if any(x_isinf) or any(y_isinf):
 --- modulename: fromnumeric, funcname: any
fromnumeric.py(1956):     arr = asanyarray(a)
 --- modulename: numeric, funcname: asanyarray
numeric.py(525):     return array(a, dtype, copy=False, order=order, subok=True)
fromnumeric.py(1958):     try:
fromnumeric.py(1959):         return arr.any(axis=axis, out=out, keepdims=keepdims)
 --- modulename: _methods, funcname: _any
_methods.py(38):     return umr_any(a, axis, dtype, out, keepdims)
 --- modulename: fromnumeric, funcname: any
fromnumeric.py(1956):     arr = asanyarray(a)
 --- modulename: numeric, funcname: asanyarray
numeric.py(525):     return array(a, dtype, copy=False, order=order, subok=True)
fromnumeric.py(1958):     try:
fromnumeric.py(1959):         return arr.any(axis=axis, out=out, keepdims=keepdims)
 --- modulename: _methods, funcname: _any
_methods.py(38):     return umr_any(a, axis, dtype, out, keepdims)
utils.py(683):             x_id, y_id = x_isnan, y_isnan
utils.py(684):             x_id |= x_isinf
utils.py(685):             y_id |= y_isinf
utils.py(688):             if all(x_id):
 --- modulename: fromnumeric, funcname: all
fromnumeric.py(2030):     arr = asanyarray(a)
 --- modulename: numeric, funcname: asanyarray
numeric.py(525):     return array(a, dtype, copy=False, order=order, subok=True)
fromnumeric.py(2032):     try:
fromnumeric.py(2033):         return arr.all(axis=axis, out=out, keepdims=keepdims)
 --- modulename: _methods, funcname: _all
_methods.py(41):     return umr_all(a, axis, dtype, out, keepdims)
utils.py(691):             if any(x_id):
 --- modulename: fromnumeric, funcname: any
fromnumeric.py(1956):     arr = asanyarray(a)
 --- modulename: numeric, funcname: asanyarray
numeric.py(525):     return array(a, dtype, copy=False, order=order, subok=True)
fromnumeric.py(1958):     try:
fromnumeric.py(1959):         return arr.any(axis=axis, out=out, keepdims=keepdims)
 --- modulename: _methods, funcname: _any
_methods.py(38):     return umr_any(a, axis, dtype, out, keepdims)
utils.py(694):                 val = safe_comparison(x, y)
 --- modulename: utils, funcname: safe_comparison
utils.py(639):         with warnings.catch_warnings():
 --- modulename: warnings, funcname: __init__
warnings.py(348):         self._record = record
warnings.py(349):         self._module = sys.modules['warnings'] if module is None else module
warnings.py(350):         self._entered = False
 --- modulename: warnings, funcname: __enter__
warnings.py(362):         if self._entered:
warnings.py(364):         self._entered = True
warnings.py(365):         self._filters = self._module.filters
warnings.py(366):         self._module.filters = self._filters[:]
warnings.py(367):         self._showwarning = self._module.showwarning
warnings.py(368):         if self._record:
warnings.py(375):             return None
utils.py(640):             warnings.filterwarnings("ignore", category=DeprecationWarning)
 --- modulename: warnings, funcname: filterwarnings
warnings.py(79):     import re
warnings.py(80):     assert action in ("error", "ignore", "always", "default", "module",
warnings.py(81):                       "once"), "invalid action: %r" % (action,)
warnings.py(82):     assert isinstance(message, basestring), "message must be a string"
warnings.py(83):     assert isinstance(category, (type, types.ClassType)), \
warnings.py(85):     assert issubclass(category, Warning), "category must be a Warning subclass"
warnings.py(86):     assert isinstance(module, basestring), "module must be a string"
warnings.py(87):     assert isinstance(lineno, int) and lineno >= 0, \
warnings.py(89):     item = (action, re.compile(message, re.I), category,
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(240):         except KeyError:
re.py(241):             pass
re.py(242):     if isinstance(pattern, _pattern_type):
re.py(246):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
re.py(248):     try:
re.py(249):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(570):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(547):     for tp in STRING_TYPES:
sre_compile.py(548):         if isinstance(obj, tp):
sre_compile.py(549):             return 1
sre_compile.py(571):         pattern = p
sre_compile.py(572):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(709):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(190):         self.string = string
sre_parse.py(191):         self.index = 0
sre_parse.py(192):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(711):     if pattern is None:
sre_parse.py(712):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(68):         self.flags = 0
sre_parse.py(69):         self.open = []
sre_parse.py(70):         self.groups = 1
sre_parse.py(71):         self.groupdict = {}
sre_parse.py(72):         self.lookbehind = 0
sre_parse.py(713):     pattern.flags = flags
sre_parse.py(714):     pattern.str = str
sre_parse.py(716):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(320):     items = []
sre_parse.py(321):     itemsappend = items.append
sre_parse.py(322):     sourcematch = source.match
sre_parse.py(323):     while 1:
sre_parse.py(324):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(397):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(93):         self.pattern = pattern
sre_parse.py(94):         if data is None:
sre_parse.py(95):             data = []
sre_parse.py(96):         self.data = data
sre_parse.py(97):         self.width = None
sre_parse.py(400):     subpatternappend = subpattern.append
sre_parse.py(401):     sourceget = source.get
sre_parse.py(402):     sourcematch = source.match
sre_parse.py(403):     _len = len
sre_parse.py(404):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(405):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(406):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(407):     REPEATCODES = _REPEATCODES
sre_parse.py(409):     while 1:
sre_parse.py(411):         if source.next in PATTERNENDERS:
sre_parse.py(413):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(414):         if this is None:
sre_parse.py(415):             break # end of pattern
sre_parse.py(704):     return subpattern
sre_parse.py(325):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(207):         if char == self.next:
sre_parse.py(211):         return 0
sre_parse.py(327):         if not nested:
sre_parse.py(328):             break
sre_parse.py(334):     if len(items) == 1:
sre_parse.py(335):         return items[0]
sre_parse.py(718):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(213):         this = self.next
sre_parse.py(214):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(194):         if self.index >= len(self.string):
sre_parse.py(195):             self.next = None
sre_parse.py(196):             return
sre_parse.py(215):         return this
sre_parse.py(719):     if tail == ")":
sre_parse.py(721):     elif tail:
sre_parse.py(724):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(727):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(732):     return p
sre_compile.py(576):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(554):     flags = p.pattern.flags | flags
sre_compile.py(555):     code = []
sre_compile.py(558):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(437):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(153):         if self.width:
sre_parse.py(155):         lo = hi = 0
sre_parse.py(156):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(157):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(158):         for op, av in self.data:
sre_parse.py(185):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
sre_parse.py(186):         return self.width
sre_compile.py(438):     if lo == 0:
sre_compile.py(439):         return # not worth it
sre_compile.py(561):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(66):     emit = code.append
sre_compile.py(67):     _len = len
sre_compile.py(68):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(69):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(70):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(71):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(72):     if (flags & SRE_FLAG_IGNORECASE and
sre_compile.py(73):             not (flags & SRE_FLAG_LOCALE) and
sre_compile.py(74):             flags & SRE_FLAG_UNICODE):
sre_compile.py(77):         fixes = None
sre_compile.py(78):     for op, av in pattern:
sre_compile.py(563):     code.append(OPCODES[SUCCESS])
sre_compile.py(565):     return code
sre_compile.py(581):     if p.pattern.groups > 100:
sre_compile.py(587):     groupindex = p.pattern.groupdict
sre_compile.py(588):     indexgroup = [None] * p.pattern.groups
sre_compile.py(589):     for k, i in groupindex.items():
sre_compile.py(592):     return _sre.compile(
sre_compile.py(593):         pattern, flags | p.pattern.flags, code,
sre_compile.py(594):         p.pattern.groups-1,
sre_compile.py(595):         groupindex, indexgroup
re.py(252):     if not bypass_cache:
re.py(253):         if len(_cache) >= _MAXCACHE:
re.py(255):         if p.flags & LOCALE:
re.py(260):             loc = None
re.py(261):         _cache[cachekey] = p, loc
re.py(262):     return p
warnings.py(90):             re.compile(module), lineno)
 --- modulename: re, funcname: compile
re.py(194):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(232):     pattern, flags = key
re.py(233):     bypass_cache = flags & DEBUG
re.py(234):     if not bypass_cache:
re.py(235):         cachekey = (type(key[0]),) + key
re.py(236):         try:
re.py(237):             p, loc = _cache[cachekey]
re.py(238):             if loc is None or loc == _locale.setlocale(_locale.LC_CTYPE):
re.py(239):                 return p
warnings.py(91):     if append:
warnings.py(94):         filters.insert(0, item)
utils.py(641):             return comparison(*args, **kwargs)
 --- modulename: utils, funcname: compare
utils.py(865):         try:
utils.py(866):             if npany(gisinf(x)) or npany( gisinf(y)):
 --- modulename: utils, funcname: gisinf
utils.py(101):     from numpy.core import isinf, errstate
utils.py(102):     with errstate(invalid='ignore'):
 --- modulename: numeric, funcname: __init__
numeric.py(2866):         self.call = kwargs.pop('call', _Unspecified)
numeric.py(2867):         self.kwargs = kwargs
 --- modulename: numeric, funcname: __enter__
numeric.py(2870):         self.oldstate = seterr(**self.kwargs)
 --- modulename: numeric, funcname: seterr
numeric.py(2556):     pyvals = umath.geterrobj()
numeric.py(2557):     old = geterr()
 --- modulename: numeric, funcname: geterr
numeric.py(2615):     maskvalue = umath.geterrobj()[1]
numeric.py(2616):     mask = 7
numeric.py(2617):     res = {}
numeric.py(2618):     val = (maskvalue >> SHIFT_DIVIDEBYZERO) & mask
numeric.py(2619):     res['divide'] = _errdict_rev[val]
numeric.py(2620):     val = (maskvalue >> SHIFT_OVERFLOW) & mask
numeric.py(2621):     res['over'] = _errdict_rev[val]
numeric.py(2622):     val = (maskvalue >> SHIFT_UNDERFLOW) & mask
numeric.py(2623):     res['under'] = _errdict_rev[val]
numeric.py(2624):     val = (maskvalue >> SHIFT_INVALID) & mask
numeric.py(2625):     res['invalid'] = _errdict_rev[val]
numeric.py(2626):     return res
numeric.py(2559):     if divide is None:
numeric.py(2560):         divide = all or old['divide']
numeric.py(2561):     if over is None:
numeric.py(2562):         over = all or old['over']
numeric.py(2563):     if under is None:
numeric.py(2564):         under = all or old['under']
numeric.py(2565):     if invalid is None:
numeric.py(2570):                  (_errdict[under] << SHIFT_UNDERFLOW) +
numeric.py(2571):                  (_errdict[invalid] << SHIFT_INVALID))
numeric.py(2573):     pyvals[1] = maskvalue
numeric.py(2574):     umath.seterrobj(pyvals)
numeric.py(2575):     return old
numeric.py(2871):         if self.call is not _Unspecified:
utils.py(103):         st = isinf(x)
utils.py(104):         if isinstance(st, type(NotImplemented)):
 --- modulename: numeric, funcname: __exit__
numeric.py(2875):         seterr(**self.oldstate)
 --- modulename: numeric, funcname: seterr
numeric.py(2556):     pyvals = umath.geterrobj()
numeric.py(2557):     old = geterr()
 --- modulename: numeric, funcname: geterr
numeric.py(2615):     maskvalue = umath.geterrobj()[1]
numeric.py(2616):     mask = 7
numeric.py(2617):     res = {}
numeric.py(2618):     val = (maskvalue >> SHIFT_DIVIDEBYZERO) & mask
numeric.py(2619):     res['divide'] = _errdict_rev[val]
numeric.py(2620):     val = (maskvalue >> SHIFT_OVERFLOW) & mask
numeric.py(2621):     res['over'] = _errdict_rev[val]
numeric.py(2622):     val = (maskvalue >> SHIFT_UNDERFLOW) & mask
numeric.py(2623):     res['under'] = _errdict_rev[val]
numeric.py(2624):     val = (maskvalue >> SHIFT_INVALID) & mask
numeric.py(2625):     res['invalid'] = _errdict_rev[val]
numeric.py(2626):     return res
numeric.py(2559):     if divide is None:
numeric.py(2561):     if over is None:
numeric.py(2563):     if under is None:
numeric.py(2565):     if invalid is None:
numeric.py(2570):                  (_errdict[under] << SHIFT_UNDERFLOW) +
numeric.py(2571):                  (_errdict[invalid] << SHIFT_INVALID))
numeric.py(2573):     pyvals[1] = maskvalue
numeric.py(2574):     umath.seterrobj(pyvals)
numeric.py(2575):     return old
numeric.py(2876):         if self.call is not _Unspecified:
utils.py(106):     return st
 --- modulename: fromnumeric, funcname: any
fromnumeric.py(1956):     arr = asanyarray(a)
 --- modulename: numeric, funcname: asanyarray
numeric.py(525):     return array(a, dtype, copy=False, order=order, subok=True)
fromnumeric.py(1958):     try:
fromnumeric.py(1959):         return arr.any(axis=axis, out=out, keepdims=keepdims)
 --- modulename: _methods, funcname: _any
_methods.py(38):     return umr_any(a, axis, dtype, out, keepdims)
 --- modulename: utils, funcname: gisinf
utils.py(101):     from numpy.core import isinf, errstate
utils.py(102):     with errstate(invalid='ignore'):
 --- modulename: numeric, funcname: __init__
numeric.py(2866):         self.call = kwargs.pop('call', _Unspecified)
numeric.py(2867):         self.kwargs = kwargs
 --- modulename: numeric, funcname: __enter__
numeric.py(2870):         self.oldstate = seterr(**self.kwargs)
 --- modulename: numeric, funcname: seterr
numeric.py(2556):     pyvals = umath.geterrobj()
numeric.py(2557):     old = geterr()
 --- modulename: numeric, funcname: geterr
numeric.py(2615):     maskvalue = umath.geterrobj()[1]
numeric.py(2616):     mask = 7
numeric.py(2617):     res = {}
numeric.py(2618):     val = (maskvalue >> SHIFT_DIVIDEBYZERO) & mask
numeric.py(2619):     res['divide'] = _errdict_rev[val]
numeric.py(2620):     val = (maskvalue >> SHIFT_OVERFLOW) & mask
numeric.py(2621):     res['over'] = _errdict_rev[val]
numeric.py(2622):     val = (maskvalue >> SHIFT_UNDERFLOW) & mask
numeric.py(2623):     res['under'] = _errdict_rev[val]
numeric.py(2624):     val = (maskvalue >> SHIFT_INVALID) & mask
numeric.py(2625):     res['invalid'] = _errdict_rev[val]
numeric.py(2626):     return res
numeric.py(2559):     if divide is None:
numeric.py(2560):         divide = all or old['divide']
numeric.py(2561):     if over is None:
numeric.py(2562):         over = all or old['over']
numeric.py(2563):     if under is None:
numeric.py(2564):         under = all or old['under']
numeric.py(2565):     if invalid is None:
numeric.py(2570):                  (_errdict[under] << SHIFT_UNDERFLOW) +
numeric.py(2571):                  (_errdict[invalid] << SHIFT_INVALID))
numeric.py(2573):     pyvals[1] = maskvalue
numeric.py(2574):     umath.seterrobj(pyvals)
numeric.py(2575):     return old
numeric.py(2871):         if self.call is not _Unspecified:
utils.py(103):         st = isinf(x)
utils.py(104):         if isinstance(st, type(NotImplemented)):
 --- modulename: numeric, funcname: __exit__
numeric.py(2875):         seterr(**self.oldstate)
 --- modulename: numeric, funcname: seterr
numeric.py(2556):     pyvals = umath.geterrobj()
numeric.py(2557):     old = geterr()
 --- modulename: numeric, funcname: geterr
numeric.py(2615):     maskvalue = umath.geterrobj()[1]
numeric.py(2616):     mask = 7
numeric.py(2617):     res = {}
numeric.py(2618):     val = (maskvalue >> SHIFT_DIVIDEBYZERO) & mask
numeric.py(2619):     res['divide'] = _errdict_rev[val]
numeric.py(2620):     val = (maskvalue >> SHIFT_OVERFLOW) & mask
numeric.py(2621):     res['over'] = _errdict_rev[val]
numeric.py(2622):     val = (maskvalue >> SHIFT_UNDERFLOW) & mask
numeric.py(2623):     res['under'] = _errdict_rev[val]
numeric.py(2624):     val = (maskvalue >> SHIFT_INVALID) & mask
numeric.py(2625):     res['invalid'] = _errdict_rev[val]
numeric.py(2626):     return res
numeric.py(2559):     if divide is None:
numeric.py(2561):     if over is None:
numeric.py(2563):     if under is None:
numeric.py(2565):     if invalid is None:
numeric.py(2570):                  (_errdict[under] << SHIFT_UNDERFLOW) +
numeric.py(2571):                  (_errdict[invalid] << SHIFT_INVALID))
numeric.py(2573):     pyvals[1] = maskvalue
numeric.py(2574):     umath.seterrobj(pyvals)
numeric.py(2575):     return old
numeric.py(2876):         if self.call is not _Unspecified:
utils.py(106):     return st
 --- modulename: fromnumeric, funcname: any
fromnumeric.py(1956):     arr = asanyarray(a)
 --- modulename: numeric, funcname: asanyarray
numeric.py(525):     return array(a, dtype, copy=False, order=order, subok=True)
fromnumeric.py(1958):     try:
fromnumeric.py(1959):         return arr.any(axis=axis, out=out, keepdims=keepdims)
 --- modulename: _methods, funcname: _any
_methods.py(38):     return umr_any(a, axis, dtype, out, keepdims)
utils.py(881):         dtype = result_type(y, 1.)
utils.py(882):         y = array(y, dtype=dtype, copy=False, subok=True)
utils.py(883):         z = abs(x-y)
utils.py(885):         if not issubdtype(z.dtype, number):
 --- modulename: numerictypes, funcname: issubdtype
numerictypes.py(754):     if issubclass_(arg2, generic):
 --- modulename: numerictypes, funcname: issubclass_
numerictypes.py(693):     try:
numerictypes.py(694):         return issubclass(arg1, arg2)
numerictypes.py(755):         return issubclass(dtype(arg1).type, arg2)
utils.py(888):         return around(z, decimal) <= 10.0**(-decimal)
 --- modulename: fromnumeric, funcname: around
fromnumeric.py(2760):     try:
fromnumeric.py(2761):         round = a.round
fromnumeric.py(2764):     return round(decimals, out)
 --- modulename: warnings, funcname: __exit__
warnings.py(378):         if not self._entered:
warnings.py(380):         self._module.filters = self._filters
warnings.py(381):         self._module.showwarning = self._showwarning
utils.py(698):         if isinstance(val, bool):
utils.py(702):             reduced = val.ravel()
utils.py(703):             cond = reduced.all()
 --- modulename: _methods, funcname: _all
_methods.py(41):     return umr_all(a, axis, dtype, out, keepdims)
utils.py(704):             reduced = reduced.tolist()
utils.py(705):         if not cond:
test_draw.py(20):     print "test ok"
test ok
test_draw.py(29):     pass
 --- modulename: trace, funcname: _unsettrace
trace.py(80):         sys.settrace(None)
